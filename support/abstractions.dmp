
%% PVS Version 3.1
%% 6.2 [Linux (x86)] (Feb 14, 2003 18:46)
$$$top.pvs
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Lee Pike 
% leepike @ galois.com
% Formal Methods Group, NASA Langley Research Center
%
% PVS Version 3.1
%
% Proofs for TPHOLs 2004 paper
%
% ("Sec." refers the to section from the paper, "Abstractions for 
%  Fault-Tolerant Distributed System Verification" formalized.  The 
%  paper is available at 
%  <http://shemesh.larc.nasa.gov/fm/spider/spider_pubs.html>.)
%
% abstract_msg             : The message datatype (Sec. 4.2)
%                            (imported by send.pvs)
%
% send                     : A formalization of the send function 
%                            (Sec. 5.3)
%
% fault_masking_vote       : fundamental results of bags including
%                            the equivalence of mid_val selection and
%                            majority selection (Sec. 6.2)
%
% single_stage_bag_maj     : proves validity and agreement results
%                            of majority voting over bags after a 
%                            round of exact communication (Sec. 7.3)
%
% single_stage_bag_mid_val : proves validity and agreement results
%                            of middle value selection over bags after a 
%                            round of inexact communiction (Sec. 7.4)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

top: THEORY
BEGIN

    IMPORTING  
      send, 
      structures@fault_masking_vote, 
      single_stage_bag_maj, 
      single_stage_bag_mid_val

END top

$$$min_max_ineq.pvs
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% NASA Langley Formal Methods
% http://shemesh.larc.nasa.gov/fm/spider/fm-now-spider.html
%
% PVS 3.1
%
% Design       : SPIDER Version 2
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
min_max_ineq : THEORY

BEGIN

a, b, c, d: VAR real

min_le : LEMMA min(a,b) <= c IFF (a <= c OR b <= c)
min_lt : LEMMA min(a,b) < c IFF (a < c OR b < c)
min_ge : LEMMA min(a,b) >= c IFF (a >= c AND b >= c)
min_gt : LEMMA min(a,b) > c IFF (a > c AND b > c)
le_min : LEMMA a <= min(b,c) IFF (a <= b AND a <= c)
lt_min : LEMMA a < min(b,c) IFF (a < b AND a < c)
ge_min : LEMMA a >= min(b,c) IFF (a >= b OR a >= c)
gt_min : LEMMA a > min(b,c) IFF (a > b OR a > c)

max_le : LEMMA max(a,b) <= c IFF (a <= c AND b <= c)
max_lt : LEMMA max(a,b) < c IFF (a < c AND b < c)
max_ge : LEMMA max(a,b) >= c IFF (a >= c OR b >= c)
max_gt : LEMMA max(a,b) > c IFF (a > c OR b > c)
le_max : LEMMA a <= max(b,c) IFF (a <= b OR a <= c)
lt_max : LEMMA a < max(b,c) IFF (a < b OR a < c)
ge_max : LEMMA a >= max(b,c) IFF (a >= b AND a >= c)
gt_max : LEMMA a > max(b,c) IFF (a > b AND a > c)

max_triangle: LEMMA max(a+c,b+d) <= max(a,b) + max(c,d)
min_commutative: LEMMA min(a,b) = min(b,a)
max_commutative: LEMMA max(a,b) = max(b,a)

END min_max_ineq

$$$min_max_ineq.prf
(min_max_ineq
 (min_le 0
  (min_le-1 nil 3276016566 nil ("" (grind) nil nil) unchecked nil nil
   nil nil nil))
 (min_lt 0
  (min_lt-1 nil 3276016566 nil ("" (grind) nil nil) unchecked nil nil
   nil nil nil))
 (min_ge 0
  (min_ge-1 nil 3276016566 nil ("" (grind) nil nil) unchecked nil nil
   nil nil nil))
 (min_gt 0
  (min_gt-1 nil 3276016566 nil ("" (grind) nil nil) unchecked nil nil
   nil nil nil))
 (le_min 0
  (le_min-1 nil 3276016566 nil ("" (grind) nil nil) unchecked nil nil
   nil nil nil))
 (lt_min 0
  (lt_min-1 nil 3276016566 nil ("" (grind) nil nil) unchecked nil nil
   nil nil nil))
 (ge_min 0
  (ge_min-1 nil 3276016566 nil ("" (grind) nil nil) unchecked nil nil
   nil nil nil))
 (gt_min 0
  (gt_min-1 nil 3276016566 nil ("" (grind) nil nil) unchecked nil nil
   nil nil nil))
 (max_le 0
  (max_le-1 nil 3276016566 nil
   ("" (skosimp*)
    (("" (expand "max")
      (("" (case "a!1 < b!1")
        (("1" (assert) (("1" (prop) (("1" (assert) nil nil)) nil)) nil)
         ("2" (assert) (("2" (prop) (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   unchecked nil nil nil nil nil))
 (max_lt 0
  (max_lt-1 nil 3276016566 nil
   ("" (skosimp*)
    (("" (expand "max")
      (("" (case "a!1 < b!1")
        (("1" (assert) (("1" (prop) (("1" (assert) nil nil)) nil)) nil)
         ("2" (assert) (("2" (prop) (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   unchecked nil nil nil nil nil))
 (max_ge 0
  (max_ge-1 nil 3276016566 nil
   ("" (skosimp*)
    (("" (expand "max")
      (("" (case "a!1 < b!1")
        (("1" (assert) (("1" (prop) (("1" (assert) nil nil)) nil)) nil)
         ("2" (assert) (("2" (prop) (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   unchecked nil nil nil nil nil))
 (max_gt 0
  (max_gt-1 nil 3276016566 nil
   ("" (skosimp*)
    (("" (expand "max")
      (("" (case "a!1 < b!1")
        (("1" (assert) (("1" (prop) (("1" (assert) nil nil)) nil)) nil)
         ("2" (assert) (("2" (prop) (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   unchecked nil nil nil nil nil))
 (le_max 0
  (le_max-1 nil 3276016566 nil
   ("" (skosimp*)
    (("" (expand "max")
      (("" (case "b!1 < c!1")
        (("1" (assert) (("1" (prop) (("1" (assert) nil nil)) nil)) nil)
         ("2" (assert) (("2" (prop) (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   unchecked nil nil nil nil nil))
 (lt_max 0
  (lt_max-1 nil 3276016566 nil
   ("" (skosimp*)
    (("" (expand "max")
      (("" (case "b!1 < c!1")
        (("1" (assert) (("1" (prop) (("1" (assert) nil nil)) nil)) nil)
         ("2" (assert) (("2" (prop) (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   unchecked nil nil nil nil nil))
 (ge_max 0
  (ge_max-1 nil 3276016566 nil
   ("" (skosimp*)
    (("" (expand "max")
      (("" (case "b!1 < c!1")
        (("1" (assert) (("1" (prop) (("1" (assert) nil nil)) nil)) nil)
         ("2" (assert) (("2" (prop) (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   unchecked nil nil nil nil nil))
 (gt_max 0
  (gt_max-1 nil 3276016566 nil
   ("" (skosimp*)
    (("" (expand "max")
      (("" (case "b!1 < c!1")
        (("1" (assert) (("1" (prop) (("1" (assert) nil nil)) nil)) nil)
         ("2" (assert) (("2" (prop) (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   unchecked nil nil nil nil nil))
 (max_triangle 0
  (max_triangle-1 nil 3276016567 3276017067
   ("" (skosimp*)
    (("" (expand "max")
      (("" (lift-if)
        (("" (lift-if) (("" (lift-if) (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((max const-decl "{p: real | p >= m AND p >= n}" real_defs nil))
   63219 1060 t shostak))
 (min_commutative 0
  (min_commutative-1 nil 3276018406 3276018450
   ("" (skosimp*)
    (("" (expand "min")
      (("" (lift-if)
        (("" (assert) (("" (lift-if) (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((min const-decl "{p: real | p <= m AND p <= n}" real_defs nil))
   18043 900 t shostak))
 (max_commutative 0
  (max_commutative-1 nil 3276018453 3276018464
   ("" (skosimp*)
    (("" (expand "max")
      (("" (lift-if)
        (("" (assert) (("" (lift-if) (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((max const-decl "{p: real | p >= m AND p >= n}" real_defs nil))
   10869 900 t shostak)))


$$$abs_props.pvs
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% NASA Langley Formal Methods
% http://shemesh.larc.nasa.gov/fm/spider/fm-now-spider.html
%
% PVS 3.1
%
% Design       : SPIDER Version 2
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

abs_props: THEORY

BEGIN

  IMPORTING min_max_ineq

  x, y: VAR real
  nny: VAR nnreal

  abs_max: LEMMA
    abs(x) = max(-x,x)

  abs_add: LEMMA
    x*y >= 0 IMPLIES abs(x+y) = abs(x) + abs(y)

  abs_le_nonneg: LEMMA
    abs(x) <= nny IFF -nny <= x AND x <= nny

  abs_diff_commutes: LEMMA abs(x-y) = abs(y-x)  % from hacks

END abs_props

$$$abs_props.prf
(abs_props
 (abs_max 0
  (abs_max-1 nil 3276280183 3276280186 ("" (grind) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (abs const-decl "{n: nonneg_real | n >= m}" real_defs nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil))
   3703 650 t shostak))
 (abs_add 0
  (abs_add-1 nil 3276280191 3276280752
   ("" (skosimp*)
    (("" (expand "abs")
      (("" (rewrite "pos_times_ge" -1)
        (("" (prop)
          (("1" (assert)
            (("1" (case "x!1 = 0 OR y!1 = 0")
              (("1" (split -)
                (("1" (replace*) (("1" (assert) nil nil)) nil)
                 ("2" (replace*) (("2" (assert) nil nil)) nil))
                nil)
               ("2" (flatten) (("2" (assert) nil nil)) nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((abs const-decl "{n: nonneg_real | n >= m}" real_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (pos_times_ge formula-decl nil real_props nil))
   45992 6930 t shostak))
 (abs_le_nonneg 0
  (abs_le_nonneg-1 nil 3276280210 3276280213 ("" (grind) nil nil)
   proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (abs const-decl "{n: nonneg_real | n >= m}" real_defs nil))
   2243 660 t shostak))
 (abs_diff_commutes 0
  (abs_diff_commutes-1 nil 3276018898 3276279807
   ("" (skosimp*)
    (("" (expand "abs")
      (("" (lift-if)
        (("" (assert) (("" (lift-if) (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved ((abs const-decl "{n: nonneg_real | n >= m}" real_defs nil))
   156 150 t shostak)))


$$$aux.pvs
% Lee Pike
% Formal Methods Group
% NASA Langley
% leepike @ galois.com

% Auxillary results

aux[T, R: TYPE, zero:R, +:[R,R -> R] ]: THEORY

BEGIN

  ASSUMING
     r,r1,r2,r3 : VAR R
     zero_identity: ASSUMPTION identity?(+)(zero)
     plus_ac:       ASSUMPTION associative?(+) AND commutative?(+)
  ENDASSUMING

IMPORTING
  finite_sets@finite_sets_sum[T, R, zero, +]

  f,g: VAR [T -> R]
  S, A, B: VAR finite_set
  x,t: VAR T

  sum_particular2: THEOREM sum(S,f) = sum(S, LAMBDA t: IF t = x THEN zero 
                                                        ELSE f(t) ENDIF)
  			                              + IF S(x) THEN f(x) ELSE zero ENDIF 


END aux

$$$aux.prf
(aux
 (IMP_finite_sets_sum_TCC1 0
  (IMP_finite_sets_sum_TCC1-1 nil 3292682981 3292683005
   ("" (use "zero_identity") nil nil) proved
   ((zero_identity formula-decl nil aux nil)) 9952 280 t shostak))
 (IMP_finite_sets_sum_TCC2 0
  (IMP_finite_sets_sum_TCC2-1 nil 3292682981 3292683019
   ("" (use "plus_ac") nil nil) proved
   ((plus_ac formula-decl nil aux nil)) 8586 260 t shostak))
 (sum_particular2 0
  (sum_particular2-1 nil 3292683078 3292683094
   ("" (auto-rewrite "plus_zero_right" "plus_zero_left")
    (("" (skolem!)
      (("" (smash)
        (("1" (use "sum_x")
          (("1"
            (use "sum_x"
                 ("f"
                  "LAMBDA t: IF t = x!1 THEN zero ELSE f!1(t) ENDIF"))
            (("1" (assert)
              (("1" (rewrite "plus_comm" -2)
                (("1"
                  (use "sum_f_g" ("S" "remove(x!1, S!1)" "f" "f!1"))
                  (("1" (assert)
                    (("1" (delete -1 -2 -3 2) (("1" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (rewrite "sum_f_g") nil nil))
        nil))
      nil))
    nil)
   proved
   ((sum_x formula-decl nil finite_sets_sum "finite_sets/")
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (plus_zero_left formula-decl nil finite_sets_sum "finite_sets/")
    (sum_f_g formula-decl nil finite_sets_sum "finite_sets/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (member const-decl "bool" sets nil)
    (plus_comm formula-decl nil finite_sets_sum "finite_sets/")
    (sum def-decl "R" finite_sets_sum "finite_sets/")
    (remove const-decl "set" sets nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (plus_zero_right formula-decl nil finite_sets_sum "finite_sets/")
    (T formal-type-decl nil aux nil) (R formal-type-decl nil aux nil)
    (zero formal-const-decl "R" aux nil)
    (+ formal-const-decl "[R, R -> R]" aux nil))
   10163 3380 t nil)))


$$$mid_val_equiv.pvs
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Lee Pike 
% leepike @ galois.com
% Formal Methods Group, NASA Langley Research Center
%
% PVS Version 3.1
%
% PURPOSE: Prove the equivalence between middle value selection 
%          over bags and over vectors (functions).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

mid_val_equiv[S: posnat, T: NONEMPTY_TYPE, leq: (total_order?[T])]: 

THEORY

BEGIN

IMPORTING
  make_bag[S, T],
  middle_value_index[S, T, leq],
  structures@middle_value_select[T, leq],
  aux[T, real, 0, +]

good_senders : VAR finite_set[below(S)]
eligible_set : VAR non_empty_finite_set[below(S)]

actual       : VAR [below(S) -> T]
s,a          : VAR below(S)  
Set          : VAR finite_set[below(S)]
t            : VAR T
P            : VAR pred[below(S)]

mid_val_l: LEMMA
  middle_value(eligible_set)(actual)(s) AND
  t = actual(s) IMPLIES
    2 * card(l_filter(make_bag(eligible_set, actual), t)) > 
      card(make_bag(eligible_set, actual))

mid_val_u: LEMMA
  middle_value(eligible_set)(actual)(s) AND
  t = actual(s) IMPLIES
    2 * card(u_filter(make_bag(eligible_set, actual), t)) >= 
      card(make_bag(eligible_set, actual))

exists_mid_val: LEMMA
    (EXISTS (s: ({s | middle_value(eligible_set)(actual)(s)})): t = actual(s) )
  IMPLIES
    mid_val?(make_bag(eligible_set, actual))(t) 

nonempty_choose: COROLLARY 
    2 * card(l_filter(make_bag(eligible_set, actual), t)) 
      > card(make_bag(eligible_set, actual)) AND
    2 * card(u_filter(make_bag(eligible_set, actual), t)) >=
      card(make_bag(eligible_set, actual)) 
  IMPLIES
    nonempty?({s: (eligible_set) | actual(s) = t})    

filter_l: LEMMA
    2 * card(l_filter(make_bag(eligible_set, actual), t)) > 
      card(make_bag(eligible_set, actual)) AND
    2 * card(u_filter(make_bag(eligible_set, actual), t)) >=
      card(make_bag(eligible_set, actual)) 
  IMPLIES
    2 * card(filter(leq)(eligible_set)(actual)
             (choose({s: (eligible_set) | actual(s) = t}))) 
      > card(eligible_set)

filter_u: LEMMA
    2 * card(l_filter(make_bag(eligible_set, actual), t)) > 
      card(make_bag(eligible_set, actual)) AND
    2 * card(u_filter(make_bag(eligible_set, actual), t)) >=
      card(make_bag(eligible_set, actual)) 
  IMPLIES
    2 * card(filter(geq)(eligible_set)(actual)
             (choose({s: (eligible_set) | actual(s) = t}))) 
      >= card(eligible_set)

choose_eligible: LEMMA
    2 * card(l_filter(make_bag(eligible_set, actual), t)) 
      > card(make_bag(eligible_set, actual)) AND
    2 * card(u_filter(make_bag(eligible_set, actual), t)) >=
      card(make_bag(eligible_set, actual)) 
  IMPLIES
   eligible_set(choose({s: (eligible_set) | actual(s) = t}))

mid_val_exists: LEMMA
  mid_val?(make_bag(eligible_set, actual))(t) IMPLIES
  (EXISTS (s: ({s | middle_value(eligible_set)(actual)(s)})): t = actual(s))

restrict_actual: LEMMA 
  image(actual, {s | middle_value(eligible_set)(actual)(s)}) = 
  mid_val?(make_bag(eligible_set, actual))

mid_val_is_middle_value: LEMMA
  middle_value(eligible_set, actual) = 
  mid_val(make_bag(eligible_set, actual))

END mid_val_equiv
  

$$$mid_val_equiv.prf
(mid_val_equiv
 (IMP_aux_TCC1 0
  (IMP_aux_TCC1-1 nil 3292683126 3292683252 ("" (grind) nil nil) proved
   ((restrict const-decl "R" restrict nil)
    (identity? const-decl "bool" operator_defs nil))
   3080 290 t shostak))
 (IMP_aux_TCC2 0
  (IMP_aux_TCC2-1 nil 3292683126 3292683261 ("" (grind) nil nil) proved
   ((associative? const-decl "bool" operator_defs nil)
    (commutative? const-decl "bool" operator_defs nil)
    (restrict const-decl "R" restrict nil))
   1701 330 t shostak))
 (mid_val_l 0
  (mid_val_l-4 nil 3287344908 3292683142
   ("" (skolem + ("f" "e" _ "t"))
    (("" (skosimp*)
      (("" (expand "middle_value")
        (("" (flatten)
          (("" (hide -3)
            (("" (use "card_make_bag")
              (("" (replace -1 :hide? t)
                ((""
                  (case-replace
                   "card(l_filter(make_bag(e, f), t)) = card(filter(leq)(e)(f)(s!1))")
                  (("" (hide -2 2)
                    (("" (expand "card")
                      (("" (typepred! "e")
                        (("" (replace -3 :hide? t)
                          ((""
                            (lemma "finite_set_ind_modified[below(S)]")
                            ((""
                              (inst -
                               "LAMBDA (ee: finite_set[below(S)]): sum(bag_to_set(l_filter(make_bag(ee, f), f(s!1))),
                        LAMBDA (t: T): l_filter(make_bag(ee, f), f(s!1))(t))
                     = card(filter(leq)(ee)(f)(s!1))")
                              ((""
                                (split)
                                (("1" (inst?) nil nil)
                                 ("2"
                                  (hide 3)
                                  (("2"
                                    (expand "filter")
                                    (("2"
                                      (lemma "card_empty?[below(S)]")
                                      (("2"
                                        (inst?)
                                        (("1"
                                          (case
                                           "empty?[below(S)]
                                                                      (LAMBDA (j: below(S)): emptyset(j) AND leq(f(j), f(s!1)))")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -2 :hide? t)
                                              (("1"
                                                (expand "bag_to_set")
                                                (("1"
                                                  (expand "make_bag")
                                                  (("1"
                                                    (expand "l_filter")
                                                    (("1"
                                                      (case
                                                       "{t: T |
                                                                                  IF leq(t, f(s!1))
                                                                                    THEN card({s: below(S) | emptyset(s) AND f(s) = t})
                                                                                  ELSE 0
                                                                                  ENDIF
                                                                                   > 0} = emptyset[T]")
                                                      (("1"
                                                        (replace

                                                         -1
                                                         :hide?

                                                         t)
                                                        (("1"
                                                          (use
                                                           "sum_emptyset[T,real,0,+]")
                                                          (("1"
                                                            (skosimp*)
                                                            (("1"
                                                              (use
                                                               "finite_empty")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (decompose-equality
                                                           +)
                                                          (("1"
                                                            (grind)
                                                            (("1"
                                                              (use
                                                               "card_emptyset[below(S)]")
                                                              (("1"
                                                                (expand
                                                                 "emptyset")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (skosimp*)
                                                            (("2"
                                                              (use
                                                               "finite_empty")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (skosimp*)
                                                        (("3"
                                                          (use
                                                           "finite_empty")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2 -1)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (use "finite_empty")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (skosimp*)
                                  (("3"
                                    (hide 4)
                                    (("3"
                                      (case "leq(f(e!1),f(s!1))")
                                      (("1"
                                        (case-replace
                                         "card(filter(leq)(add(e!1, S!1))(f)(s!1)) = card(filter(leq)(S!1)(f)(s!1)) + 1")
                                        (("1"
                                          (replace -3 :dir rl :hide? t)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (case
                                               "bag_to_set(l_filter(make_bag(S!1, f), f(s!1)))(f(e!1))")
                                              (("1"
                                                (case
                                                 "l_filter(make_bag(add(e!1, S!1), f), f(s!1))(f(e!1)) = l_filter(make_bag(S!1, f), f(s!1))(f(e!1)) + 1")
                                                (("1"
                                                  (lemma
                                                   "sum_x[T,real,0,+]")
                                                  (("1"
                                                    (inst-cp
                                                     -
                                                     "bag_to_set(l_filter(make_bag(add(e!1, S!1), f), f(s!1)))"
                                                     "LAMBDA (t: T): l_filter(make_bag(add(e!1, S!1), f), f(s!1))(t)"
                                                     "f(e!1)")
                                                    (("1"
                                                      (inst
                                                       -
                                                       "bag_to_set(l_filter(make_bag(S!1, f), f(s!1)))"
                                                       "LAMBDA (t: T): l_filter(make_bag(S!1, f), f(s!1))(t)"
                                                       "f(e!1)")
                                                      (("1"
                                                        (replace*)
                                                        (("1"
                                                          (hide
                                                           -1
                                                           -2
                                                           -3)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (lemma
                                                               "sum_particular2[T,real,0,+]")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "remove(f(e!1),
                                                                                           bag_to_set(l_filter(make_bag(add(e!1, S!1), f), f(s!1))))"
                                                                 "LAMBDA (t: T): l_filter(make_bag(add(e!1, S!1), f), f(s!1))(t)"
                                                                 "f(e!1)")
                                                                (("1"
                                                                  (replace

                                                                   -
                                                                   :hide?

                                                                   t)
                                                                  (("1"
                                                                    (lift-if)
                                                                    (("1"
                                                                      (split)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (hide-all-but
                                                                           -1)
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (hide
                                                                           1)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (name-replace
                                                                               "g"
                                                                               "LAMBDA (t: T): l_filter(make_bag(add(e!1, S!1), f), f(s!1))(t)")
                                                                              (("2"
                                                                                (case-replace
                                                                                 "remove(f(e!1),
                                                                                                     bag_to_set(l_filter(make_bag(add(e!1, S!1), f), f(s!1)))) = remove(f(e!1), bag_to_set(l_filter(make_bag(S!1, f), f(s!1))))")
                                                                                (("1"
                                                                                  (hide
                                                                                   -1)
                                                                                  (("1"
                                                                                    (use
                                                                                     "sum_f_g[T,real,0,+]")
                                                                                    (("1"
                                                                                      (split)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (skosimp*)
                                                                                        (("2"
                                                                                          (hide
                                                                                           2)
                                                                                          (("2"
                                                                                            (lift-if)
                                                                                            (("2"
                                                                                              (typepred!
                                                                                               "x!1")
                                                                                              (("2"
                                                                                                (split)
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (hide
                                                                                                     -4
                                                                                                     -5
                                                                                                     4)
                                                                                                    (("2"
                                                                                                      (grind)
                                                                                                      (("2"
                                                                                                        (case-replace
                                                                                                         "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1} = {s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                                        (("2"
                                                                                                          (hide
                                                                                                           3)
                                                                                                          (("2"
                                                                                                            (decompose-equality
                                                                                                             +)
                                                                                                            (("2"
                                                                                                              (grind)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (decompose-equality
                                                                                     +)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "remove")
                                                                                      (("2"
                                                                                        (iff)
                                                                                        (("2"
                                                                                          (prop)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "member")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "bag_to_set")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "l_filter")
                                                                                                (("1"
                                                                                                  (lift-if)
                                                                                                  (("1"
                                                                                                    (prop)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "make_bag")
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "nonempty_card[below(S)]")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "{s: below(S) | S!1(s) AND f(s) = f(e!1)}")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "nonempty?")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "empty?")
                                                                                                                (("1"
                                                                                                                  (skosimp*)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "member")
                                                                                                                    (("1"
                                                                                                                      (flatten)
                                                                                                                      (("1"
                                                                                                                        (lemma
                                                                                                                         "nonempty_card[below(S)]")
                                                                                                                        (("1"
                                                                                                                          (inst?)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "nonempty?")
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "empty?")
                                                                                                                                (("1"
                                                                                                                                  (skosimp*)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "member")
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "add")
                                                                                                                                      (("1"
                                                                                                                                        (flatten)
                                                                                                                                        (("1"
                                                                                                                                          (split)
                                                                                                                                          (("1"
                                                                                                                                            (lemma
                                                                                                                                             "nonempty_card[below(S)]")
                                                                                                                                            (("1"
                                                                                                                                              (inst
                                                                                                                                               -
                                                                                                                                               "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (use
                                                                                                                                                 "finite_intersect")
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (expand
                                                                                                                                             "member")
                                                                                                                                            (("2"
                                                                                                                                              (lemma
                                                                                                                                               "nonempty_card[below(S)]")
                                                                                                                                              (("2"
                                                                                                                                                (inst
                                                                                                                                                 -
                                                                                                                                                 "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (grind)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (use
                                                                                                                                                   "finite_intersect")
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (use
                                                                                                                             "finite_add")
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (use
                                                                                                             "finite_intersect")
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (grind)
                                                                                            (("2"
                                                                                              (lemma
                                                                                               "nonempty_card[below(S)]")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -
                                                                                                 "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (skosimp*)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "nonempty_card[below(S)]")
                                                                                                      (("1"
                                                                                                        (inst?)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (inst?)
                                                                                                            (("1"
                                                                                                              (prop)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (hide-all-but
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (use
                                                                                                             "finite_add")
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "LAMBDA (s: below(S)): f(s) = x!1"
                                                                                                               "S!1"
                                                                                                               "e!1")
                                                                                                              (("2"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide-all-but
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (use
                                                                                                     "finite_intersect")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "LAMBDA (s: below(S)): f(s) = x!1"
                                                                                                       "S!1")
                                                                                                      (("2"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide -1 3)
                                                      (("2"
                                                        (expand
                                                         "bag_to_set")
                                                        (("2"
                                                          (expand
                                                           "l_filter")
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (prop)
                                                              (("2"
                                                                (expand
                                                                 "make_bag")
                                                                (("2"
                                                                  (lemma
                                                                   "nonempty_card[below(S)]")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "{s: below(S) | S!1(s) AND f(s) = f(e!1)}")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "nonempty?")
                                                                        (("1"
                                                                          (expand
                                                                           "empty?")
                                                                          (("1"
                                                                            (skosimp*)
                                                                            (("1"
                                                                              (expand
                                                                               "member")
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "nonempty_card[below(S)]")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "{s: below(S) | add[below(S)](e!1, S!1)(s) AND f(s) = f(e!1)}")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "nonempty?")
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (use
                                                                                       "finite_add")
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (use
                                                                       "finite_intersect")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 3)
                                                  (("2"
                                                    (expand "l_filter")
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (split)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (expand
                                                             "make_bag")
                                                            (("1"
                                                              (case-replace
                                                               "{s: below(S) | add(e!1, S!1)(s) AND f(s) = f(e!1)} = add(e!1, {s: below(S) | S!1(s) AND f(s) = f(e!1)})")
                                                              (("1"
                                                                (lemma
                                                                 "card_add[below(S)]")
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "{s: below(S) | S!1(s) AND f(s) = f(e!1)}"
                                                                   "e!1")
                                                                  (("1"
                                                                    (replace

                                                                     -1)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (use
                                                                     "finite_intersect")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 -2
                                                                 2)
                                                                (("2"
                                                                  (decompose-equality
                                                                   +)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma
                                                 "sum_x[T,real,0,+]")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (inst - "f(e!1)")
                                                    (("1"
                                                      (replace

                                                       -
                                                       :hide?

                                                       t)
                                                      (("1"
                                                        (case-replace
                                                         "remove(f(e!1),
                                                                    bag_to_set(l_filter(make_bag(add(e!1, S!1), f),
                                                                                        f(s!1)))) = bag_to_set(l_filter(make_bag(S!1, f), f(s!1)))")
                                                        (("1"
                                                          (lemma
                                                           "sum_particular2[T,real,0,+]")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (replace

                                                                 -1
                                                                 :hide?

                                                                 t)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case
                                                                     "l_filter(make_bag(add(e!1, S!1), f), f(s!1))(f(e!1)) = 1")
                                                                    (("1"
                                                                      (replace

                                                                       -
                                                                       :hide?

                                                                       t)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (case-replace
                                                                           "(LAMBDA (t_1: T):
                        IF t_1 = f(e!1) THEN 0
                        ELSE l_filter(make_bag(add(e!1, S!1), f), f(s!1))(t_1)
                        ENDIF) = LAMBDA (t: T): l_filter(make_bag(S!1, f), f(s!1))(t)")
                                                                          (("1"
                                                                            (hide
                                                                             4)
                                                                            (("1"
                                                                              (decompose-equality
                                                                               +)
                                                                              (("1"
                                                                                (lift-if)
                                                                                (("1"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "bag_to_set")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (hide
                                                                                       -1)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "bag_to_set")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "l_filter")
                                                                                          (("2"
                                                                                            (lift-if)
                                                                                            (("2"
                                                                                              (split)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "make_bag")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "add")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "member")
                                                                                                      (("1"
                                                                                                        (case-replace
                                                                                                         "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1} = {s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           2)
                                                                                                          (("1"
                                                                                                            (decompose-equality
                                                                                                             +)
                                                                                                            (("1"
                                                                                                              (grind)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       -1
                                                                       4)
                                                                      (("2"
                                                                        (expand
                                                                         "bag_to_set")
                                                                        (("2"
                                                                          (expand
                                                                           "l_filter")
                                                                          (("2"
                                                                            (expand
                                                                             "make_bag")
                                                                            (("2"
                                                                              (lemma
                                                                               "nonempty_card[below(S)]")
                                                                              (("2"
                                                                                (inst
                                                                                 -
                                                                                 "{s: below(S) | S!1(s) AND f(s) = f(e!1)}")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "nonempty?")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "empty?")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "member")
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "card_one[below(S)]")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -
                                                                                             "{s: below(S) | add(e!1, S!1)(s) AND f(s) = f(e!1)}")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (inst?)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "singleton")
                                                                                                  (("1"
                                                                                                    (decompose-equality
                                                                                                     +)
                                                                                                    (("1"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (use
                                                                                               "finite_add")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (use
                                                                                   "finite_intersect")
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 4)
                                                          (("2"
                                                            (decompose-equality
                                                             +)
                                                            (("2"
                                                              (iff)
                                                              (("2"
                                                                (grind)
                                                                (("1"
                                                                  (lemma
                                                                   "nonempty_card[below(S)]")
                                                                  (("1"
                                                                    (inst-cp
                                                                     -
                                                                     "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1}")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (skosimp*)
                                                                        (("1"
                                                                          (split)
                                                                          (("1"
                                                                            (replace*)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (inst
                                                                             -
                                                                             "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (use
                                                                                 "finite_intersect")
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "LAMBDA (s: below(S)): f(s) = x!1"
                                                                                   "S!1")
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("2"
                                                                        (use
                                                                         "finite_add")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "LAMBDA (s: below(S)): f(s) = x!1"
                                                                           "S!1"
                                                                           "e!1")
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (lemma
                                                                   "nonempty_card[below(S)]")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (skosimp*)
                                                                        (("1"
                                                                          (lemma
                                                                           "nonempty_card[below(S)]")
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1}")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (prop)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (use
                                                                                 "finite_add")
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "LAMBDA (s: below(S)): f(s) = x!1"
                                                                                   "S!1"
                                                                                   "e!1")
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (use
                                                                       "finite_intersect")
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 4)
                                                      (("2"
                                                        (grind)
                                                        (("2"
                                                          (lemma
                                                           "nonempty_card[below(S)]")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = f(e!1)}")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst?)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               1)
                                                              (("2"
                                                                (use
                                                                 "finite_add")
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide -2 3)
                                          (("2"
                                            (expand "filter")
                                            (("2"
                                              (expand "add")
                                              (("2"
                                                (expand "member")
                                                (("2"
                                                  (case-replace
                                                   "(LAMBDA (j: below(S)): (e!1 = j OR S!1(j)) AND leq(f(j), f(s!1))) = add(e!1, LAMBDA (j: below(S)): S!1(j) AND leq(f(j), f(s!1)))")
                                                  (("1"
                                                    (lemma
                                                     "card_add[below(S)]")
                                                    (("1"
                                                      (inst
                                                       -
                                                       "LAMBDA (j: below(S)): S!1(j) AND leq(f(j), f(s!1))"
                                                       "e!1")
                                                      (("1"
                                                        (replace -)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (use
                                                         "finite_intersect")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (decompose-equality
                                                       +)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case-replace
                                         "filter(leq)(add(e!1, S!1))(f)(s!1) = filter(leq)(S!1)(f)(s!1)")
                                        (("1"
                                          (replace -2 :dir rl :hide? t)
                                          (("1"
                                            (case-replace
                                             "bag_to_set(l_filter(make_bag(add(e!1, S!1), f), f(s!1))) = bag_to_set(l_filter(make_bag(S!1, f), f(s!1)))")
                                            (("1"
                                              (lemma
                                               "sum_particular2[T,real,0,+]")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (inst - "f(e!1)")
                                                  (("1"
                                                    (replace

                                                     -1
                                                     :hide?

                                                     t)
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (case-replace
                                                             "l_filter(make_bag(add(e!1, S!1), f), f(s!1))(f(e!1)) = 0")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (hide
                                                                 -2
                                                                 -3
                                                                 -4)
                                                                (("1"
                                                                  (case-replace
                                                                   "(LAMBDA (t_1: T):
            IF t_1 = f(e!1) THEN 0
            ELSE l_filter(make_bag(add(e!1, S!1), f), f(s!1))(t_1)
            ENDIF) = LAMBDA (t: T): l_filter(make_bag(S!1, f), f(s!1))(t)")
                                                                  (("1"
                                                                    (hide
                                                                     2)
                                                                    (("1"
                                                                      (decompose-equality
                                                                       +)
                                                                      (("1"
                                                                        (lift-if)
                                                                        (("1"
                                                                          (split)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (expand
                                                                               "l_filter")
                                                                              (("2"
                                                                                (lift-if)
                                                                                (("2"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "make_bag")
                                                                                      (("1"
                                                                                        (case-replace
                                                                                         "{s: below(S) | add(e!1, S!1)(s) AND f(s) = x!1} = {s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                        (("1"
                                                                                          (hide
                                                                                           2)
                                                                                          (("1"
                                                                                            (decompose-equality
                                                                                             +)
                                                                                            (("1"
                                                                                              (iff)
                                                                                              (("1"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide
                                                               -1
                                                               -2
                                                               -3
                                                               2)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (case-replace
                                                               "(LAMBDA (t_1: T):
            IF t_1 = f(e!1) THEN 0
            ELSE l_filter(make_bag(add(e!1, S!1), f), f(s!1))(t_1)
            ENDIF) = LAMBDA (t: T): l_filter(make_bag(S!1, f), f(s!1))(t)")
                                                              (("2"
                                                                (hide
                                                                 3)
                                                                (("2"
                                                                  (decompose-equality
                                                                   +)
                                                                  (("2"
                                                                    (lift-if)
                                                                    (("2"
                                                                      (split)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (expand
                                                                           "bag_to_set")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (hide
                                                                           -1
                                                                           -2)
                                                                          (("2"
                                                                            (expand
                                                                             "bag_to_set")
                                                                            (("2"
                                                                              (expand
                                                                               "l_filter")
                                                                              (("2"
                                                                                (lift-if)
                                                                                (("2"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "make_bag")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "add")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "member")
                                                                                          (("1"
                                                                                            (case-replace
                                                                                             "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1} = {s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                            (("1"
                                                                                              (hide
                                                                                               2)
                                                                                              (("1"
                                                                                                (decompose-equality
                                                                                                 +)
                                                                                                (("1"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide -1 4)
                                              (("2"
                                                (decompose-equality +)
                                                (("2"
                                                  (grind)
                                                  (("1"
                                                    (case
                                                     "x!1 = f(e!1)")
                                                    (("1"
                                                      (hide-all-but
                                                       (-1 -4 2))
                                                      (("1"
                                                        (typepred!
                                                         "leq")
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       "nonempty_card[below(S)]")
                                                      (("2"
                                                        (inst-cp
                                                         -
                                                         "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1}")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (skosimp*)
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (replace*)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (inst
                                                                 -
                                                                 "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (use
                                                                     "finite_intersect")
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "LAMBDA (s: below(S)): f(s) = x!1"
                                                                       "S!1")
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (use
                                                             "finite_add")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "LAMBDA (s: below(S)): f(s) = x!1"
                                                               "S!1"
                                                               "e!1")
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     "nonempty_card[below(S)]")
                                                    (("2"
                                                      (inst-cp
                                                       -
                                                       "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (skosimp*)
                                                          (("1"
                                                            (inst
                                                             -
                                                             "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1}")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               1)
                                                              (("2"
                                                                (use
                                                                 "finite_add")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "LAMBDA (s: below(S)): f(s) = x!1"
                                                                   "S!1"
                                                                   "e!1")
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (use
                                                           "finite_intersect")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "LAMBDA (s: below(S)): f(s) = x!1"
                                                             "S!1")
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide -1 4)
                                          (("2"
                                            (decompose-equality +)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((card_make_bag formula-decl nil make_bag nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (S formal-const-decl "posnat" mid_val_equiv nil)
    (T formal-nonempty-type-decl nil mid_val_equiv nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bag type-eq-decl nil bags "structures/")
    (is_finite const-decl "bool" finite_bags "structures/")
    (finite_bag type-eq-decl nil finite_bags "structures/")
    (card const-decl "nat" finite_bags "structures/")
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (leq formal-const-decl "(total_order?[T])" mid_val_equiv nil)
    (l_filter const-decl "bag" bag_filters "structures/")
    (make_bag const-decl "finite_bag[T]" make_bag nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (filter const-decl "bool" index_filters nil)
    (bag_to_set const-decl "set[T]" bags_to_sets "structures/")
    (sum def-decl "R" finite_sets_sum "finite_sets/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (card_add formula-decl nil finite_sets nil)
    (sum_x formula-decl nil finite_sets_sum "finite_sets/")
    (sum_particular2 formula-decl nil aux nil)
    (x!1 skolem-const-decl "T" mid_val_equiv nil)
    (finite_intersect formula-decl nil make_bag nil)
    (finite_add formula-decl nil make_bag nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (below type-eq-decl nil nat_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (sum_f_g formula-decl nil finite_sets_sum "finite_sets/")
    (remove const-decl "set" sets nil)
    (S!1 skolem-const-decl "finite_set[below(S)]" mid_val_equiv nil)
    (e!1 skolem-const-decl "below(S)" mid_val_equiv nil)
    (x!1 skolem-const-decl "T" mid_val_equiv nil)
    (/= const-decl "boolean" notequal nil)
    (card_one formula-decl nil finite_sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (x!1 skolem-const-decl "T" mid_val_equiv nil)
    (reflexive? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (antisymmetric? const-decl "bool" relations nil)
    (partial_order? const-decl "bool" orders nil)
    (dichotomous? const-decl "bool" orders nil)
    (card_empty? formula-decl nil finite_sets nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sum_emptyset formula-decl nil finite_sets_sum "finite_sets/")
    (finite_empty formula-decl nil make_bag nil)
    (card_emptyset formula-decl nil finite_sets nil)
    (member const-decl "bool" sets nil)
    (injective? const-decl "bool" functions nil)
    (s!1 skolem-const-decl "below(S)" mid_val_equiv nil)
    (f skolem-const-decl "[below(S) -> T]" mid_val_equiv nil)
    (emptyset const-decl "set" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set_ind_modified formula-decl nil finite_sets_inductions
     "finite_sets/")
    (middle_value const-decl "bool" middle_value_index nil))
   15715 11960 t nil)
  (mid_val_l-3 nil 3287343585 3287344891
   ("" (skolem + ("f" "e" _ "t"))
    (("" (skosimp*)
      (("" (expand "middle_value")
        (("" (flatten)
          (("" (hide -3)
            (("" (use "card_make_bag")
              (("" (replace -1 :hide? t)
                ((""
                  (case-replace
                   "card(l_filter(make_bag(e, f), t)) = card(filter(leq)(e)(f)(s!1))")
                  (("" (hide -2 2)
                    (("" (expand "card")
                      (("" (typepred! "e")
                        (("" (replace -3 :hide? t)
                          ((""
                            (lemma "finite_set_ind_modified[below(S)]")
                            ((""
                              (inst -
                               "LAMBDA (ee: finite_set[below(S)]): sum(bag_to_set(l_filter(make_bag(ee, f), f(s!1))),
                      LAMBDA (t: T): l_filter(make_bag(ee, f), f(s!1))(t))
                   = card(filter(leq)(ee)(f)(s!1))")
                              ((""
                                (split)
                                (("1" (inst?) nil)
                                 ("2"
                                  (hide 3)
                                  (("2"
                                    (expand "filter")
                                    (("2"
                                      (lemma "card_empty?[below(S)]")
                                      (("2"
                                        (inst?)
                                        (("1"
                                          (case
                                           "empty?[below(S)]
                                                           (LAMBDA (j: below(S)): emptyset(j) AND leq(f(j), f(s!1)))")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -2 :hide? t)
                                              (("1"
                                                (expand "bag_to_set")
                                                (("1"
                                                  (expand "make_bag")
                                                  (("1"
                                                    (expand "l_filter")
                                                    (("1"
                                                      (case
                                                       "{t: T |
                                                                     IF leq(t, f(s!1))
                                                                       THEN card({s: below(S) | emptyset(s) AND f(s) = t})
                                                                     ELSE 0
                                                                     ENDIF
                                                                      > 0} = emptyset[T]")
                                                      (("1"
                                                        (replace

                                                         -1
                                                         :hide?

                                                         t)
                                                        (("1"
                                                          (use
                                                           "sum_emptyset[T,real,0,+]")
                                                          (("1"
                                                            (skosimp*)
                                                            (("1"
                                                              (use
                                                               "finite_empty")
                                                              nil)))))))
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (decompose-equality
                                                           +)
                                                          (("1"
                                                            (grind)
                                                            (("1"
                                                              (use
                                                               "card_emptyset[below(S)]")
                                                              (("1"
                                                                (expand
                                                                 "emptyset")
                                                                (("1"
                                                                  (assert)
                                                                  nil)))))))
                                                           ("2"
                                                            (skosimp*)
                                                            (("2"
                                                              (use
                                                               "finite_empty")
                                                              nil)))))))
                                                       ("3"
                                                        (skosimp*)
                                                        (("3"
                                                          (use
                                                           "finite_empty")
                                                          nil)))))))))))))))
                                           ("2"
                                            (hide 2 -1)
                                            (("2" (grind) nil)))))
                                         ("2"
                                          (use "finite_empty")
                                          nil)))))))))
                                 ("3"
                                  (skosimp*)
                                  (("3"
                                    (hide 4)
                                    (("3"
                                      (case "leq(f(e!1),f(s!1))")
                                      (("1"
                                        (case-replace
                                         "card(filter(leq)(add(e!1, S!1))(f)(s!1)) = card(filter(leq)(S!1)(f)(s!1)) + 1")
                                        (("1"
                                          (replace -3 :dir rl :hide? t)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (case
                                               "bag_to_set(l_filter(make_bag(S!1, f), f(s!1)))(f(e!1))")
                                              (("1"
                                                (case
                                                 "l_filter(make_bag(add(e!1, S!1), f), f(s!1))(f(e!1)) = l_filter(make_bag(S!1, f), f(s!1))(f(e!1)) + 1")
                                                (("1"
                                                  (lemma
                                                   "sum_x[T,real,0,+]")
                                                  (("1"
                                                    (inst-cp
                                                     -
                                                     "bag_to_set(l_filter(make_bag(add(e!1, S!1), f), f(s!1)))"
                                                     "LAMBDA (t: T): l_filter(make_bag(add(e!1, S!1), f), f(s!1))(t)"
                                                     "f(e!1)")
                                                    (("1"
                                                      (inst
                                                       -
                                                       "bag_to_set(l_filter(make_bag(S!1, f), f(s!1)))"
                                                       "LAMBDA (t: T): l_filter(make_bag(S!1, f), f(s!1))(t)"
                                                       "f(e!1)")
                                                      (("1"
                                                        (replace*)
                                                        (("1"
                                                          (hide
                                                           -1
                                                           -2
                                                           -3)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (lemma
                                                               "sum_particular[T,real,0,+]")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "remove(f(e!1),
                                                                             bag_to_set(l_filter(make_bag(add(e!1, S!1), f), f(s!1))))"
                                                                 "LAMBDA (t: T): l_filter(make_bag(add(e!1, S!1), f), f(s!1))(t)"
                                                                 "f(e!1)")
                                                                (("1"
                                                                  (replace

                                                                   -
                                                                   :hide?

                                                                   t)
                                                                  (("1"
                                                                    (lift-if)
                                                                    (("1"
                                                                      (split)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (hide-all-but
                                                                           -1)
                                                                          (("1"
                                                                            (grind)
                                                                            nil)))))
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (hide
                                                                           1)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (name-replace
                                                                               "g"
                                                                               "LAMBDA (t: T): l_filter(make_bag(add(e!1, S!1), f), f(s!1))(t)")
                                                                              (("2"
                                                                                (case-replace
                                                                                 "remove(f(e!1),
                                                                                     bag_to_set(l_filter(make_bag(add(e!1, S!1), f), f(s!1)))) = remove(f(e!1), bag_to_set(l_filter(make_bag(S!1, f), f(s!1))))")
                                                                                (("1"
                                                                                  (postpone)
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (decompose-equality
                                                                                     +)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "remove")
                                                                                      (("2"
                                                                                        (iff)
                                                                                        (("2"
                                                                                          (prop)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "member")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "bag_to_set")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "l_filter")
                                                                                                (("1"
                                                                                                  (lift-if)
                                                                                                  (("1"
                                                                                                    (prop)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "make_bag")
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "nonempty_card[below(S)]")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "{s: below(S) | S!1(s) AND f(s) = f(e!1)}")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "nonempty?")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "empty?")
                                                                                                                (("1"
                                                                                                                  (skosimp*)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "member")
                                                                                                                    (("1"
                                                                                                                      (flatten)
                                                                                                                      (("1"
                                                                                                                        (lemma
                                                                                                                         "nonempty_card[below(S)]")
                                                                                                                        (("1"
                                                                                                                          (inst?)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "nonempty?")
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "empty?")
                                                                                                                                (("1"
                                                                                                                                  (skosimp*)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "member")
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "add")
                                                                                                                                      (("1"
                                                                                                                                        (flatten)
                                                                                                                                        (("1"
                                                                                                                                          (split)
                                                                                                                                          (("1"
                                                                                                                                            (lemma
                                                                                                                                             "nonempty_card[below(S)]")
                                                                                                                                            (("1"
                                                                                                                                              (inst
                                                                                                                                               -
                                                                                                                                               "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (use
                                                                                                                                                 "finite_intersect")
                                                                                                                                                nil)))))
                                                                                                                                           ("2"
                                                                                                                                            (expand
                                                                                                                                             "member")
                                                                                                                                            (("2"
                                                                                                                                              (lemma
                                                                                                                                               "nonempty_card[below(S)]")
                                                                                                                                              (("2"
                                                                                                                                                (inst
                                                                                                                                                 -
                                                                                                                                                 "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (grind)
                                                                                                                                                    nil)))
                                                                                                                                                 ("2"
                                                                                                                                                  (use
                                                                                                                                                   "finite_intersect")
                                                                                                                                                  nil)))))))))))))))))))))))
                                                                                                                           ("2"
                                                                                                                            (use
                                                                                                                             "finite_add")
                                                                                                                            nil)))))))))))))))))
                                                                                                           ("2"
                                                                                                            (use
                                                                                                             "finite_intersect")
                                                                                                            nil)))))))))))))))))
                                                                                           ("2"
                                                                                            (grind)
                                                                                            (("2"
                                                                                              (lemma
                                                                                               "nonempty_card[below(S)]")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -
                                                                                                 "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (skosimp*)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "nonempty_card[below(S)]")
                                                                                                      (("1"
                                                                                                        (inst?)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (inst?)
                                                                                                            (("1"
                                                                                                              (prop)
                                                                                                              nil)))))
                                                                                                         ("2"
                                                                                                          (hide-all-but
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (use
                                                                                                             "finite_add")
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "LAMBDA (s: below(S)): f(s) = x!1"
                                                                                                               "S!1"
                                                                                                               "e!1")
                                                                                                              (("2"
                                                                                                                (grind)
                                                                                                                nil)))))))))))))))
                                                                                                 ("2"
                                                                                                  (hide-all-but
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (use
                                                                                                     "finite_intersect")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "LAMBDA (s: below(S)): f(s) = x!1"
                                                                                                       "S!1")
                                                                                                      (("2"
                                                                                                        (grind)
                                                                                                        nil)))))))))))))))))))))))))))))))))))))))))))))))))))
                                                     ("2"
                                                      (hide -1 3)
                                                      (("2"
                                                        (expand
                                                         "bag_to_set")
                                                        (("2"
                                                          (expand
                                                           "l_filter")
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (prop)
                                                              (("2"
                                                                (expand
                                                                 "make_bag")
                                                                (("2"
                                                                  (lemma
                                                                   "nonempty_card[below(S)]")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "{s: below(S) | S!1(s) AND f(s) = f(e!1)}")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "nonempty?")
                                                                        (("1"
                                                                          (expand
                                                                           "empty?")
                                                                          (("1"
                                                                            (skosimp*)
                                                                            (("1"
                                                                              (expand
                                                                               "member")
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "nonempty_card[below(S)]")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "{s: below(S) | add[below(S)](e!1, S!1)(s) AND f(s) = f(e!1)}")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "nonempty?")
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil)))))
                                                                                     ("2"
                                                                                      (use
                                                                                       "finite_add")
                                                                                      nil)))))))))))))))))
                                                                     ("2"
                                                                      (use
                                                                       "finite_intersect")
                                                                      nil)))))))))))))))))))))
                                                 ("2"
                                                  (hide 3)
                                                  (("2"
                                                    (expand "l_filter")
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (split)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (expand
                                                             "make_bag")
                                                            (("1"
                                                              (case-replace
                                                               "{s: below(S) | add(e!1, S!1)(s) AND f(s) = f(e!1)} = add(e!1, {s: below(S) | S!1(s) AND f(s) = f(e!1)})")
                                                              (("1"
                                                                (lemma
                                                                 "card_add[below(S)]")
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "{s: below(S) | S!1(s) AND f(s) = f(e!1)}"
                                                                   "e!1")
                                                                  (("1"
                                                                    (replace

                                                                     -1)
                                                                    (("1"
                                                                      (assert)
                                                                      nil)))
                                                                   ("2"
                                                                    (use
                                                                     "finite_intersect")
                                                                    nil)))))
                                                               ("2"
                                                                (hide
                                                                 -2
                                                                 2)
                                                                (("2"
                                                                  (decompose-equality
                                                                   +)
                                                                  (("2"
                                                                    (grind)
                                                                    nil)))))))))))
                                                         ("2"
                                                          (flatten)
                                                          nil)))))))))))
                                               ("2"
                                                (lemma
                                                 "sum_x[T,real,0,+]")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (inst - "f(e!1)")
                                                    (("1"
                                                      (replace

                                                       -
                                                       :hide?

                                                       t)
                                                      (("1"
                                                        (case-replace
                                                         "remove(f(e!1),
                                                        bag_to_set(l_filter(make_bag(add(e!1, S!1), f),
                                                                            f(s!1)))) = bag_to_set(l_filter(make_bag(S!1, f), f(s!1)))")
                                                        (("1"
                                                          (lemma
                                                           "sum_particular[T,real,0,+]")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (replace

                                                                 -1
                                                                 :hide?

                                                                 t)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case
                                                                     "l_filter(make_bag(add(e!1, S!1), f), f(s!1))(f(e!1)) = 1")
                                                                    (("1"
                                                                      (replace

                                                                       -
                                                                       :hide?

                                                                       t)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (postpone)
                                                                          nil)))))
                                                                     ("2"
                                                                      (hide
                                                                       -1
                                                                       4)
                                                                      (("2"
                                                                        (expand
                                                                         "bag_to_set")
                                                                        (("2"
                                                                          (expand
                                                                           "l_filter")
                                                                          (("2"
                                                                            (expand
                                                                             "make_bag")
                                                                            (("2"
                                                                              (lemma
                                                                               "nonempty_card[below(S)]")
                                                                              (("2"
                                                                                (inst
                                                                                 -
                                                                                 "{s: below(S) | S!1(s) AND f(s) = f(e!1)}")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "nonempty?")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "empty?")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "member")
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "card_one[below(S)]")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -
                                                                                             "{s: below(S) | add(e!1, S!1)(s) AND f(s) = f(e!1)}")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (inst?)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "singleton")
                                                                                                  (("1"
                                                                                                    (decompose-equality
                                                                                                     +)
                                                                                                    (("1"
                                                                                                      (grind)
                                                                                                      nil)))))))))
                                                                                             ("2"
                                                                                              (use
                                                                                               "finite_add")
                                                                                              nil)))))))))))))
                                                                                 ("2"
                                                                                  (use
                                                                                   "finite_intersect")
                                                                                  nil)))))))))))))))))))))))))
                                                         ("2"
                                                          (hide 4)
                                                          (("2"
                                                            (decompose-equality
                                                             +)
                                                            (("2"
                                                              (iff)
                                                              (("2"
                                                                (grind)
                                                                (("1"
                                                                  (lemma
                                                                   "nonempty_card[below(S)]")
                                                                  (("1"
                                                                    (inst-cp
                                                                     -
                                                                     "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1}")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (skosimp*)
                                                                        (("1"
                                                                          (split)
                                                                          (("1"
                                                                            (replace*)
                                                                            nil)
                                                                           ("2"
                                                                            (inst
                                                                             -
                                                                             "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil)
                                                                                   ("2"
                                                                                    (propax)
                                                                                    nil)))))))
                                                                             ("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (use
                                                                                 "finite_intersect")
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "LAMBDA (s: below(S)): f(s) = x!1"
                                                                                   "S!1")
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil)))))))))))))))
                                                                     ("2"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("2"
                                                                        (use
                                                                         "finite_add")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "LAMBDA (s: below(S)): f(s) = x!1"
                                                                           "S!1"
                                                                           "e!1")
                                                                          (("2"
                                                                            (grind)
                                                                            nil)))))))))))
                                                                 ("2"
                                                                  (lemma
                                                                   "nonempty_card[below(S)]")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (skosimp*)
                                                                        (("1"
                                                                          (lemma
                                                                           "nonempty_card[below(S)]")
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1}")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (prop)
                                                                                  nil)))))
                                                                             ("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (use
                                                                                 "finite_add")
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "LAMBDA (s: below(S)): f(s) = x!1"
                                                                                   "S!1"
                                                                                   "e!1")
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil)))))))))))))))
                                                                     ("2"
                                                                      (use
                                                                       "finite_intersect")
                                                                      (("2"
                                                                        (grind)
                                                                        nil)))))))))))))))))))
                                                     ("2"
                                                      (hide 4)
                                                      (("2"
                                                        (grind)
                                                        (("2"
                                                          (lemma
                                                           "nonempty_card[below(S)]")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = f(e!1)}")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst?)
                                                                nil)))
                                                             ("2"
                                                              (hide-all-but
                                                               1)
                                                              (("2"
                                                                (use
                                                                 "finite_add")
                                                                (("2"
                                                                  (grind)
                                                                  nil)))))))))))))))))))))))))
                                         ("2"
                                          (hide -2 3)
                                          (("2"
                                            (expand "filter")
                                            (("2"
                                              (expand "add")
                                              (("2"
                                                (expand "member")
                                                (("2"
                                                  (case-replace
                                                   "(LAMBDA (j: below(S)): (e!1 = j OR S!1(j)) AND leq(f(j), f(s!1))) = add(e!1, LAMBDA (j: below(S)): S!1(j) AND leq(f(j), f(s!1)))")
                                                  (("1"
                                                    (lemma
                                                     "card_add[below(S)]")
                                                    (("1"
                                                      (inst
                                                       -
                                                       "LAMBDA (j: below(S)): S!1(j) AND leq(f(j), f(s!1))"
                                                       "e!1")
                                                      (("1"
                                                        (replace -)
                                                        (("1"
                                                          (assert)
                                                          nil)))
                                                       ("2"
                                                        (use
                                                         "finite_intersect")
                                                        nil)))))
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (decompose-equality
                                                       +)
                                                      (("2"
                                                        (grind)
                                                        nil)))))))))))))))))
                                       ("2"
                                        (case-replace
                                         "filter(leq)(add(e!1, S!1))(f)(s!1) = filter(leq)(S!1)(f)(s!1)")
                                        (("1"
                                          (replace -2 :dir rl :hide? t)
                                          (("1"
                                            (case-replace
                                             "bag_to_set(l_filter(make_bag(add(e!1, S!1), f), f(s!1))) = bag_to_set(l_filter(make_bag(S!1, f), f(s!1)))")
                                            (("1"
                                              (lemma
                                               "sum_particular[T,real,0,+]")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (inst - "f(e!1)")
                                                  (("1"
                                                    (replace

                                                     -1
                                                     :hide?

                                                     t)
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (case-replace
                                                             "l_filter(make_bag(add(e!1, S!1), f), f(s!1))(f(e!1)) = 0")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (postpone)
                                                                nil)))
                                                             ("2"
                                                              (hide
                                                               -1
                                                               -2
                                                               -3
                                                               2)
                                                              (("2"
                                                                (grind)
                                                                nil)))))))
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (postpone)
                                                              nil)))))))))))))))))
                                             ("2"
                                              (hide -1 4)
                                              (("2"
                                                (decompose-equality +)
                                                (("2"
                                                  (grind)
                                                  (("1"
                                                    (case
                                                     "x!1 = f(e!1)")
                                                    (("1"
                                                      (hide-all-but
                                                       (-1 -4 2))
                                                      (("1"
                                                        (typepred!
                                                         "leq")
                                                        (("1"
                                                          (grind)
                                                          nil)))))
                                                     ("2"
                                                      (lemma
                                                       "nonempty_card[below(S)]")
                                                      (("2"
                                                        (inst-cp
                                                         -
                                                         "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1}")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (skosimp*)
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (replace*)
                                                                nil)
                                                               ("2"
                                                                (inst
                                                                 -
                                                                 "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      nil)))))
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (use
                                                                     "finite_intersect")
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "LAMBDA (s: below(S)): f(s) = x!1"
                                                                       "S!1")
                                                                      (("2"
                                                                        (grind)
                                                                        nil)))))))))))))))
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (use
                                                             "finite_add")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "LAMBDA (s: below(S)): f(s) = x!1"
                                                               "S!1"
                                                               "e!1")
                                                              (("2"
                                                                (grind)
                                                                nil)))))))))))))
                                                   ("2"
                                                    (lemma
                                                     "nonempty_card[below(S)]")
                                                    (("2"
                                                      (inst-cp
                                                       -
                                                       "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (skosimp*)
                                                          (("1"
                                                            (inst
                                                             -
                                                             "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1}")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (assert)
                                                                  nil)))))
                                                             ("2"
                                                              (hide-all-but
                                                               1)
                                                              (("2"
                                                                (use
                                                                 "finite_add")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "LAMBDA (s: below(S)): f(s) = x!1"
                                                                   "S!1"
                                                                   "e!1")
                                                                  (("2"
                                                                    (grind)
                                                                    nil)))))))))))))
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (use
                                                           "finite_intersect")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "LAMBDA (s: below(S)): f(s) = x!1"
                                                             "S!1")
                                                            (("2"
                                                              (grind)
                                                              nil)))))))))))))))))))))
                                         ("2"
                                          (hide -1 4)
                                          (("2"
                                            (decompose-equality +)
                                            (("2"
                                              (grind)
                                              nil))))))))))))))))))))))))))))))))))))))))))
    nil)
   unfinished nil 20259 4280 t nil)
  (mid_val_l-2 nil 3287342858 3287343563
   ("" (skolem + ("f" "e" _ "t"))
    (("" (skosimp*)
      (("" (expand "middle_value")
        (("" (flatten)
          (("" (hide -3)
            (("" (use "card_make_bag")
              (("" (replace -1 :hide? t)
                ((""
                  (case-replace
                   "card(l_filter(make_bag(e, f), t)) = card(filter(leq)(e)(f)(s!1))")
                  (("" (hide -2 2)
                    (("" (expand "card")
                      (("" (typepred! "e")
                        (("" (replace -3 :hide? t)
                          ((""
                            (lemma "finite_set_ind_modified[below(S)]")
                            ((""
                              (inst -
                               "LAMBDA (ee: finite_set[below(S)]): sum(bag_to_set(l_filter(make_bag(ee, f), f(s!1))),
                    LAMBDA (t: T): l_filter(make_bag(ee, f), f(s!1))(t))
                 = card(filter(leq)(ee)(f)(s!1))")
                              ((""
                                (split)
                                (("1" (inst?) nil)
                                 ("2"
                                  (hide 3)
                                  (("2"
                                    (expand "filter")
                                    (("2"
                                      (lemma "card_empty?[below(S)]")
                                      (("2"
                                        (inst?)
                                        (("1"
                                          (case
                                           "empty?[below(S)]
                                                (LAMBDA (j: below(S)): emptyset(j) AND leq(f(j), f(s!1)))")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -2 :hide? t)
                                              (("1"
                                                (expand "bag_to_set")
                                                (("1"
                                                  (expand "make_bag")
                                                  (("1"
                                                    (expand "l_filter")
                                                    (("1"
                                                      (case
                                                       "{t: T |
                                                        IF leq(t, f(s!1))
                                                          THEN card({s: below(S) | emptyset(s) AND f(s) = t})
                                                        ELSE 0
                                                        ENDIF
                                                         > 0} = emptyset[T]")
                                                      (("1"
                                                        (replace

                                                         -1
                                                         :hide?

                                                         t)
                                                        (("1"
                                                          (use
                                                           "sum_emptyset[T,real,0,+]")
                                                          (("1"
                                                            (skosimp*)
                                                            (("1"
                                                              (use
                                                               "finite_empty")
                                                              nil)))))))
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (decompose-equality
                                                           +)
                                                          (("1"
                                                            (grind)
                                                            (("1"
                                                              (use
                                                               "card_emptyset[below(S)]")
                                                              (("1"
                                                                (expand
                                                                 "emptyset")
                                                                (("1"
                                                                  (assert)
                                                                  nil)))))))
                                                           ("2"
                                                            (skosimp*)
                                                            (("2"
                                                              (use
                                                               "finite_empty")
                                                              nil)))))))
                                                       ("3"
                                                        (skosimp*)
                                                        (("3"
                                                          (use
                                                           "finite_empty")
                                                          nil)))))))))))))))
                                           ("2"
                                            (hide 2 -1)
                                            (("2" (grind) nil)))))
                                         ("2"
                                          (use "finite_empty")
                                          nil)))))))))
                                 ("3"
                                  (skosimp*)
                                  (("3"
                                    (hide 4)
                                    (("3"
                                      (case "leq(f(e!1),f(s!1))")
                                      (("1"
                                        (case-replace
                                         "card(filter(leq)(add(e!1, S!1))(f)(s!1)) = card(filter(leq)(S!1)(f)(s!1)) + 1")
                                        (("1"
                                          (replace -3 :dir rl :hide? t)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (case
                                               "bag_to_set(l_filter(make_bag(S!1, f), f(s!1)))(f(e!1))")
                                              (("1"
                                                (case
                                                 "l_filter(make_bag(add(e!1, S!1), f), f(s!1))(f(e!1)) = l_filter(make_bag(S!1, f), f(s!1))(f(e!1)) + 1")
                                                (("1"
                                                  (lemma
                                                   "sum_x[T,real,0,+]")
                                                  (("1"
                                                    (inst-cp
                                                     -
                                                     "bag_to_set(l_filter(make_bag(add(e!1, S!1), f), f(s!1)))"
                                                     "LAMBDA (t: T): l_filter(make_bag(add(e!1, S!1), f), f(s!1))(t)"
                                                     "f(e!1)")
                                                    (("1"
                                                      (inst
                                                       -
                                                       "bag_to_set(l_filter(make_bag(S!1, f), f(s!1)))"
                                                       "LAMBDA (t: T): l_filter(make_bag(S!1, f), f(s!1))(t)"
                                                       "f(e!1)")
                                                      (("1"
                                                        (replace*)
                                                        (("1"
                                                          (hide
                                                           -1
                                                           -2
                                                           -3)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (lemma
                                                               "sum_particular2[T,real,0,+]")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "remove(f(e!1),
                                                               bag_to_set(l_filter(make_bag(add(e!1, S!1), f), f(s!1))))"
                                                                 "LAMBDA (t: T): l_filter(make_bag(add(e!1, S!1), f), f(s!1))(t)"
                                                                 "f(e!1)")
                                                                (("1"
                                                                  (replace

                                                                   -
                                                                   :hide?

                                                                   t)
                                                                  (("1"
                                                                    (lift-if)
                                                                    (("1"
                                                                      (split)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (hide-all-but
                                                                           -1)
                                                                          (("1"
                                                                            (grind)
                                                                            nil)))))
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (hide
                                                                           1)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (name-replace
                                                                               "g"
                                                                               "LAMBDA (t: T): l_filter(make_bag(add(e!1, S!1), f), f(s!1))(t)")
                                                                              (("2"
                                                                                (case-replace
                                                                                 "remove(f(e!1),
                                                                     bag_to_set(l_filter(make_bag(add(e!1, S!1), f), f(s!1)))) = remove(f(e!1), bag_to_set(l_filter(make_bag(S!1, f), f(s!1))))")
                                                                                (("1"
                                                                                  (postpone)
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (decompose-equality
                                                                                     +)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "remove")
                                                                                      (("2"
                                                                                        (iff)
                                                                                        (("2"
                                                                                          (prop)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "member")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "bag_to_set")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "l_filter")
                                                                                                (("1"
                                                                                                  (lift-if)
                                                                                                  (("1"
                                                                                                    (prop)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "make_bag")
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "nonempty_card[below(S)]")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "{s: below(S) | S!1(s) AND f(s) = f(e!1)}")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "nonempty?")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "empty?")
                                                                                                                (("1"
                                                                                                                  (skosimp*)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "member")
                                                                                                                    (("1"
                                                                                                                      (flatten)
                                                                                                                      (("1"
                                                                                                                        (lemma
                                                                                                                         "nonempty_card[below(S)]")
                                                                                                                        (("1"
                                                                                                                          (inst?)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "nonempty?")
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "empty?")
                                                                                                                                (("1"
                                                                                                                                  (skosimp*)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "member")
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "add")
                                                                                                                                      (("1"
                                                                                                                                        (flatten)
                                                                                                                                        (("1"
                                                                                                                                          (split)
                                                                                                                                          (("1"
                                                                                                                                            (lemma
                                                                                                                                             "nonempty_card[below(S)]")
                                                                                                                                            (("1"
                                                                                                                                              (inst
                                                                                                                                               -
                                                                                                                                               "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (use
                                                                                                                                                 "finite_intersect")
                                                                                                                                                nil)))))
                                                                                                                                           ("2"
                                                                                                                                            (expand
                                                                                                                                             "member")
                                                                                                                                            (("2"
                                                                                                                                              (lemma
                                                                                                                                               "nonempty_card[below(S)]")
                                                                                                                                              (("2"
                                                                                                                                                (inst
                                                                                                                                                 -
                                                                                                                                                 "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (grind)
                                                                                                                                                    nil)))
                                                                                                                                                 ("2"
                                                                                                                                                  (use
                                                                                                                                                   "finite_intersect")
                                                                                                                                                  nil)))))))))))))))))))))))
                                                                                                                           ("2"
                                                                                                                            (use
                                                                                                                             "finite_add")
                                                                                                                            nil)))))))))))))))))
                                                                                                           ("2"
                                                                                                            (use
                                                                                                             "finite_intersect")
                                                                                                            nil)))))))))))))))))
                                                                                           ("2"
                                                                                            (grind)
                                                                                            (("2"
                                                                                              (lemma
                                                                                               "nonempty_card[below(S)]")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -
                                                                                                 "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (skosimp*)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "nonempty_card[below(S)]")
                                                                                                      (("1"
                                                                                                        (inst?)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (inst?)
                                                                                                            (("1"
                                                                                                              (prop)
                                                                                                              nil)))))
                                                                                                         ("2"
                                                                                                          (hide-all-but
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (use
                                                                                                             "finite_add")
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "LAMBDA (s: below(S)): f(s) = x!1"
                                                                                                               "S!1"
                                                                                                               "e!1")
                                                                                                              (("2"
                                                                                                                (grind)
                                                                                                                nil)))))))))))))))
                                                                                                 ("2"
                                                                                                  (hide-all-but
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (use
                                                                                                     "finite_intersect")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "LAMBDA (s: below(S)): f(s) = x!1"
                                                                                                       "S!1")
                                                                                                      (("2"
                                                                                                        (grind)
                                                                                                        nil)))))))))))))))))))))))))))))))))))))))))))))))))))
                                                     ("2"
                                                      (hide -1 3)
                                                      (("2"
                                                        (expand
                                                         "bag_to_set")
                                                        (("2"
                                                          (expand
                                                           "l_filter")
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (prop)
                                                              (("2"
                                                                (expand
                                                                 "make_bag")
                                                                (("2"
                                                                  (lemma
                                                                   "nonempty_card[below(S)]")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "{s: below(S) | S!1(s) AND f(s) = f(e!1)}")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "nonempty?")
                                                                        (("1"
                                                                          (expand
                                                                           "empty?")
                                                                          (("1"
                                                                            (skosimp*)
                                                                            (("1"
                                                                              (expand
                                                                               "member")
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "nonempty_card[below(S)]")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "{s: below(S) | add[below(S)](e!1, S!1)(s) AND f(s) = f(e!1)}")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "nonempty?")
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil)))))
                                                                                     ("2"
                                                                                      (use
                                                                                       "finite_add")
                                                                                      nil)))))))))))))))))
                                                                     ("2"
                                                                      (use
                                                                       "finite_intersect")
                                                                      nil)))))))))))))))))))))
                                                 ("2"
                                                  (hide 3)
                                                  (("2"
                                                    (expand "l_filter")
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (split)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (expand
                                                             "make_bag")
                                                            (("1"
                                                              (case-replace
                                                               "{s: below(S) | add(e!1, S!1)(s) AND f(s) = f(e!1)} = add(e!1, {s: below(S) | S!1(s) AND f(s) = f(e!1)})")
                                                              (("1"
                                                                (lemma
                                                                 "card_add[below(S)]")
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "{s: below(S) | S!1(s) AND f(s) = f(e!1)}"
                                                                   "e!1")
                                                                  (("1"
                                                                    (replace

                                                                     -1)
                                                                    (("1"
                                                                      (assert)
                                                                      nil)))
                                                                   ("2"
                                                                    (use
                                                                     "finite_intersect")
                                                                    nil)))))
                                                               ("2"
                                                                (hide
                                                                 -2
                                                                 2)
                                                                (("2"
                                                                  (decompose-equality
                                                                   +)
                                                                  (("2"
                                                                    (grind)
                                                                    nil)))))))))))
                                                         ("2"
                                                          (flatten)
                                                          nil)))))))))))
                                               ("2"
                                                (lemma
                                                 "sum_x[T,real,0,+]")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (inst - "f(e!1)")
                                                    (("1"
                                                      (replace

                                                       -
                                                       :hide?

                                                       t)
                                                      (("1"
                                                        (case-replace
                                                         "remove(f(e!1),
                                            bag_to_set(l_filter(make_bag(add(e!1, S!1), f),
                                                                f(s!1)))) = bag_to_set(l_filter(make_bag(S!1, f), f(s!1)))")
                                                        (("1"
                                                          (lemma
                                                           "sum_particular2[T,real,0,+]")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (replace

                                                                 -1
                                                                 :hide?

                                                                 t)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case
                                                                     "l_filter(make_bag(add(e!1, S!1), f), f(s!1))(f(e!1)) = 1")
                                                                    (("1"
                                                                      (replace

                                                                       -
                                                                       :hide?

                                                                       t)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (postpone)
                                                                          nil)))))
                                                                     ("2"
                                                                      (hide
                                                                       -1
                                                                       4)
                                                                      (("2"
                                                                        (expand
                                                                         "bag_to_set")
                                                                        (("2"
                                                                          (expand
                                                                           "l_filter")
                                                                          (("2"
                                                                            (expand
                                                                             "make_bag")
                                                                            (("2"
                                                                              (lemma
                                                                               "nonempty_card[below(S)]")
                                                                              (("2"
                                                                                (inst
                                                                                 -
                                                                                 "{s: below(S) | S!1(s) AND f(s) = f(e!1)}")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "nonempty?")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "empty?")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "member")
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "card_one[below(S)]")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -
                                                                                             "{s: below(S) | add(e!1, S!1)(s) AND f(s) = f(e!1)}")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (inst?)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "singleton")
                                                                                                  (("1"
                                                                                                    (decompose-equality
                                                                                                     +)
                                                                                                    (("1"
                                                                                                      (grind)
                                                                                                      nil)))))))))
                                                                                             ("2"
                                                                                              (use
                                                                                               "finite_add")
                                                                                              nil)))))))))))))
                                                                                 ("2"
                                                                                  (use
                                                                                   "finite_intersect")
                                                                                  nil)))))))))))))))))))))))))
                                                         ("2"
                                                          (hide 4)
                                                          (("2"
                                                            (decompose-equality
                                                             +)
                                                            (("2"
                                                              (iff)
                                                              (("2"
                                                                (grind)
                                                                (("1"
                                                                  (lemma
                                                                   "nonempty_card[below(S)]")
                                                                  (("1"
                                                                    (inst-cp
                                                                     -
                                                                     "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1}")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (skosimp*)
                                                                        (("1"
                                                                          (split)
                                                                          (("1"
                                                                            (replace*)
                                                                            nil)
                                                                           ("2"
                                                                            (inst
                                                                             -
                                                                             "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil)
                                                                                   ("2"
                                                                                    (propax)
                                                                                    nil)))))))
                                                                             ("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (use
                                                                                 "finite_intersect")
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "LAMBDA (s: below(S)): f(s) = x!1"
                                                                                   "S!1")
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil)))))))))))))))
                                                                     ("2"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("2"
                                                                        (use
                                                                         "finite_add")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "LAMBDA (s: below(S)): f(s) = x!1"
                                                                           "S!1"
                                                                           "e!1")
                                                                          (("2"
                                                                            (grind)
                                                                            nil)))))))))))
                                                                 ("2"
                                                                  (lemma
                                                                   "nonempty_card[below(S)]")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (skosimp*)
                                                                        (("1"
                                                                          (lemma
                                                                           "nonempty_card[below(S)]")
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1}")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (prop)
                                                                                  nil)))))
                                                                             ("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (use
                                                                                 "finite_add")
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "LAMBDA (s: below(S)): f(s) = x!1"
                                                                                   "S!1"
                                                                                   "e!1")
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil)))))))))))))))
                                                                     ("2"
                                                                      (use
                                                                       "finite_intersect")
                                                                      (("2"
                                                                        (grind)
                                                                        nil)))))))))))))))))))
                                                     ("2"
                                                      (hide 4)
                                                      (("2"
                                                        (grind)
                                                        (("2"
                                                          (lemma
                                                           "nonempty_card[below(S)]")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = f(e!1)}")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst?)
                                                                nil)))
                                                             ("2"
                                                              (hide-all-but
                                                               1)
                                                              (("2"
                                                                (use
                                                                 "finite_add")
                                                                (("2"
                                                                  (grind)
                                                                  nil)))))))))))))))))))))))))
                                         ("2"
                                          (hide -2 3)
                                          (("2"
                                            (expand "filter")
                                            (("2"
                                              (expand "add")
                                              (("2"
                                                (expand "member")
                                                (("2"
                                                  (case-replace
                                                   "(LAMBDA (j: below(S)): (e!1 = j OR S!1(j)) AND leq(f(j), f(s!1))) = add(e!1, LAMBDA (j: below(S)): S!1(j) AND leq(f(j), f(s!1)))")
                                                  (("1"
                                                    (lemma
                                                     "card_add[below(S)]")
                                                    (("1"
                                                      (inst
                                                       -
                                                       "LAMBDA (j: below(S)): S!1(j) AND leq(f(j), f(s!1))"
                                                       "e!1")
                                                      (("1"
                                                        (replace -)
                                                        (("1"
                                                          (assert)
                                                          nil)))
                                                       ("2"
                                                        (use
                                                         "finite_intersect")
                                                        nil)))))
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (decompose-equality
                                                       +)
                                                      (("2"
                                                        (grind)
                                                        nil)))))))))))))))))
                                       ("2"
                                        (case-replace
                                         "filter(leq)(add(e!1, S!1))(f)(s!1) = filter(leq)(S!1)(f)(s!1)")
                                        (("1"
                                          (replace -2 :dir rl :hide? t)
                                          (("1"
                                            (case-replace
                                             "bag_to_set(l_filter(make_bag(add(e!1, S!1), f), f(s!1))) = bag_to_set(l_filter(make_bag(S!1, f), f(s!1)))")
                                            (("1"
                                              (lemma
                                               "sum_particular2[T,real,0,+]")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (inst - "f(e!1)")
                                                  (("1"
                                                    (replace

                                                     -1
                                                     :hide?

                                                     t)
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (case-replace
                                                             "l_filter(make_bag(add(e!1, S!1), f), f(s!1))(f(e!1)) = 0")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (postpone)
                                                                nil)))
                                                             ("2"
                                                              (hide
                                                               -1
                                                               -2
                                                               -3
                                                               2)
                                                              (("2"
                                                                (grind)
                                                                nil)))))))
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (postpone)
                                                              nil)))))))))))))))))
                                             ("2"
                                              (hide -1 4)
                                              (("2"
                                                (decompose-equality +)
                                                (("2"
                                                  (grind)
                                                  (("1"
                                                    (case
                                                     "x!1 = f(e!1)")
                                                    (("1"
                                                      (hide-all-but
                                                       (-1 -4 2))
                                                      (("1"
                                                        (typepred!
                                                         "leq")
                                                        (("1"
                                                          (grind)
                                                          nil)))))
                                                     ("2"
                                                      (lemma
                                                       "nonempty_card[below(S)]")
                                                      (("2"
                                                        (inst-cp
                                                         -
                                                         "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1}")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (skosimp*)
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (replace*)
                                                                nil)
                                                               ("2"
                                                                (inst
                                                                 -
                                                                 "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      nil)))))
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (use
                                                                     "finite_intersect")
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "LAMBDA (s: below(S)): f(s) = x!1"
                                                                       "S!1")
                                                                      (("2"
                                                                        (grind)
                                                                        nil)))))))))))))))
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (use
                                                             "finite_add")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "LAMBDA (s: below(S)): f(s) = x!1"
                                                               "S!1"
                                                               "e!1")
                                                              (("2"
                                                                (grind)
                                                                nil)))))))))))))
                                                   ("2"
                                                    (lemma
                                                     "nonempty_card[below(S)]")
                                                    (("2"
                                                      (inst-cp
                                                       -
                                                       "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (skosimp*)
                                                          (("1"
                                                            (inst
                                                             -
                                                             "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1}")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (assert)
                                                                  nil)))))
                                                             ("2"
                                                              (hide-all-but
                                                               1)
                                                              (("2"
                                                                (use
                                                                 "finite_add")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "LAMBDA (s: below(S)): f(s) = x!1"
                                                                   "S!1"
                                                                   "e!1")
                                                                  (("2"
                                                                    (grind)
                                                                    nil)))))))))))))
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (use
                                                           "finite_intersect")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "LAMBDA (s: below(S)): f(s) = x!1"
                                                             "S!1")
                                                            (("2"
                                                              (grind)
                                                              nil)))))))))))))))))))))
                                         ("2"
                                          (hide -1 4)
                                          (("2"
                                            (decompose-equality +)
                                            (("2"
                                              (grind)
                                              nil))))))))))))))))))))))))))))))))))))))))))
    nil)
   unfinished nil 9459 290 t nil)
  (mid_val_l-1 nil 3287341697 3287342318
   ("" (skolem + ("f" "e" _ "t"))
    (("" (skosimp*)
      (("" (expand "middle_value")
        (("" (flatten)
          (("" (hide -3)
            (("" (use "card_make_bag")
              (("" (replace -1 :hide? t)
                ((""
                  (case-replace
                   "card(l_filter(make_bag(e, f), t)) = card(filter(leq)(e)(f)(s!1))")
                  (("" (hide -2 2)
                    (("" (expand "card")
                      (("" (typepred! "e")
                        (("" (replace -3 :hide? t)
                          ((""
                            (lemma "finite_set_ind_modified[below(S)]")
                            ((""
                              (inst -
                               "LAMBDA (ee: finite_set[below(S)]): sum(bag_to_set(l_filter(make_bag(ee, f), f(s!1))),
                  LAMBDA (t: T): l_filter(make_bag(ee, f), f(s!1))(t))
               = card(filter(leq)(ee)(f)(s!1))")
                              ((""
                                (split)
                                (("1" (inst?) nil nil)
                                 ("2"
                                  (hide 3)
                                  (("2"
                                    (expand "filter")
                                    (("2"
                                      (lemma "card_empty?[below(S)]")
                                      (("2"
                                        (inst?)
                                        (("1"
                                          (case
                                           "empty?[below(S)]
                                     (LAMBDA (j: below(S)): emptyset(j) AND leq(f(j), f(s!1)))")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -2 :hide? t)
                                              (("1"
                                                (expand "bag_to_set")
                                                (("1"
                                                  (expand "make_bag")
                                                  (("1"
                                                    (expand "l_filter")
                                                    (("1"
                                                      (case
                                                       "{t: T |
                                           IF leq(t, f(s!1))
                                             THEN card({s: below(S) | emptyset(s) AND f(s) = t})
                                           ELSE 0
                                           ENDIF
                                            > 0} = emptyset[T]")
                                                      (("1"
                                                        (replace

                                                         -1
                                                         :hide?

                                                         t)
                                                        (("1"
                                                          (use
                                                           "sum_emptyset[T,real,0,+]")
                                                          (("1"
                                                            (skosimp*)
                                                            (("1"
                                                              (use
                                                               "finite_empty")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (decompose-equality
                                                           +)
                                                          (("1"
                                                            (grind)
                                                            (("1"
                                                              (use
                                                               "card_emptyset[below(S)]")
                                                              (("1"
                                                                (expand
                                                                 "emptyset")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (skosimp*)
                                                            (("2"
                                                              (use
                                                               "finite_empty")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (skosimp*)
                                                        (("3"
                                                          (use
                                                           "finite_empty")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2 -1)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (use "finite_empty")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (skosimp*)
                                  (("3"
                                    (hide 4)
                                    (("3"
                                      (case "leq(f(e!1),f(s!1))")
                                      (("1"
                                        (case-replace
                                         "card(filter(leq)(add(e!1, S!1))(f)(s!1)) = card(filter(leq)(S!1)(f)(s!1)) + 1")
                                        (("1"
                                          (replace -3 :dir rl :hide? t)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (case
                                               "bag_to_set(l_filter(make_bag(S!1, f), f(s!1)))(f(e!1))")
                                              (("1"
                                                (case
                                                 "l_filter(make_bag(add(e!1, S!1), f), f(s!1))(f(e!1)) = l_filter(make_bag(S!1, f), f(s!1))(f(e!1)) + 1")
                                                (("1"
                                                  (lemma
                                                   "sum_x[T,real,0,+]")
                                                  (("1"
                                                    (inst-cp
                                                     -
                                                     "bag_to_set(l_filter(make_bag(add(e!1, S!1), f), f(s!1)))"
                                                     "LAMBDA (t: T): l_filter(make_bag(add(e!1, S!1), f), f(s!1))(t)"
                                                     "f(e!1)")
                                                    (("1"
                                                      (inst
                                                       -
                                                       "bag_to_set(l_filter(make_bag(S!1, f), f(s!1)))"
                                                       "LAMBDA (t: T): l_filter(make_bag(S!1, f), f(s!1))(t)"
                                                       "f(e!1)")
                                                      (("1"
                                                        (replace*)
                                                        (("1"
                                                          (hide
                                                           -1
                                                           -2
                                                           -3)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (lemma
                                                               "sum_particular[T,real,0,+]")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "remove(f(e!1),
                                                 bag_to_set(l_filter(make_bag(add(e!1, S!1), f), f(s!1))))"
                                                                 "LAMBDA (t: T): l_filter(make_bag(add(e!1, S!1), f), f(s!1))(t)"
                                                                 "f(e!1)")
                                                                (("1"
                                                                  (replace

                                                                   -
                                                                   :hide?

                                                                   t)
                                                                  (("1"
                                                                    (lift-if)
                                                                    (("1"
                                                                      (split)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (hide-all-but
                                                                           -1)
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (hide
                                                                           1)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (name-replace
                                                                               "g"
                                                                               "LAMBDA (t: T): l_filter(make_bag(add(e!1, S!1), f), f(s!1))(t)")
                                                                              (("2"
                                                                                (case-replace
                                                                                 "remove(f(e!1),
                                                     bag_to_set(l_filter(make_bag(add(e!1, S!1), f), f(s!1)))) = remove(f(e!1), bag_to_set(l_filter(make_bag(S!1, f), f(s!1))))")
                                                                                (("1"
                                                                                  (postpone)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (decompose-equality
                                                                                     +)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "remove")
                                                                                      (("2"
                                                                                        (iff)
                                                                                        (("2"
                                                                                          (prop)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "member")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "bag_to_set")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "l_filter")
                                                                                                (("1"
                                                                                                  (lift-if)
                                                                                                  (("1"
                                                                                                    (prop)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "make_bag")
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "nonempty_card[below(S)]")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "{s: below(S) | S!1(s) AND f(s) = f(e!1)}")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "nonempty?")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "empty?")
                                                                                                                (("1"
                                                                                                                  (skosimp*)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "member")
                                                                                                                    (("1"
                                                                                                                      (flatten)
                                                                                                                      (("1"
                                                                                                                        (lemma
                                                                                                                         "nonempty_card[below(S)]")
                                                                                                                        (("1"
                                                                                                                          (inst?)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "nonempty?")
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "empty?")
                                                                                                                                (("1"
                                                                                                                                  (skosimp*)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "member")
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "add")
                                                                                                                                      (("1"
                                                                                                                                        (flatten)
                                                                                                                                        (("1"
                                                                                                                                          (split)
                                                                                                                                          (("1"
                                                                                                                                            (lemma
                                                                                                                                             "nonempty_card[below(S)]")
                                                                                                                                            (("1"
                                                                                                                                              (inst
                                                                                                                                               -
                                                                                                                                               "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (use
                                                                                                                                                 "finite_intersect")
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (expand
                                                                                                                                             "member")
                                                                                                                                            (("2"
                                                                                                                                              (lemma
                                                                                                                                               "nonempty_card[below(S)]")
                                                                                                                                              (("2"
                                                                                                                                                (inst
                                                                                                                                                 -
                                                                                                                                                 "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (grind)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (use
                                                                                                                                                   "finite_intersect")
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (use
                                                                                                                             "finite_add")
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (use
                                                                                                             "finite_intersect")
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (grind)
                                                                                            (("2"
                                                                                              (lemma
                                                                                               "nonempty_card[below(S)]")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -
                                                                                                 "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (skosimp*)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "nonempty_card[below(S)]")
                                                                                                      (("1"
                                                                                                        (inst?)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (inst?)
                                                                                                            (("1"
                                                                                                              (prop)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (hide-all-but
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (use
                                                                                                             "finite_add")
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "LAMBDA (s: below(S)): f(s) = x!1"
                                                                                                               "S!1"
                                                                                                               "e!1")
                                                                                                              (("2"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide-all-but
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (use
                                                                                                     "finite_intersect")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "LAMBDA (s: below(S)): f(s) = x!1"
                                                                                                       "S!1")
                                                                                                      (("2"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide -1 3)
                                                      (("2"
                                                        (expand
                                                         "bag_to_set")
                                                        (("2"
                                                          (expand
                                                           "l_filter")
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (prop)
                                                              (("2"
                                                                (expand
                                                                 "make_bag")
                                                                (("2"
                                                                  (lemma
                                                                   "nonempty_card[below(S)]")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "{s: below(S) | S!1(s) AND f(s) = f(e!1)}")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "nonempty?")
                                                                        (("1"
                                                                          (expand
                                                                           "empty?")
                                                                          (("1"
                                                                            (skosimp*)
                                                                            (("1"
                                                                              (expand
                                                                               "member")
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "nonempty_card[below(S)]")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "{s: below(S) | add[below(S)](e!1, S!1)(s) AND f(s) = f(e!1)}")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "nonempty?")
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (use
                                                                                       "finite_add")
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (use
                                                                       "finite_intersect")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 3)
                                                  (("2"
                                                    (expand "l_filter")
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (split)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (expand
                                                             "make_bag")
                                                            (("1"
                                                              (case-replace
                                                               "{s: below(S) | add(e!1, S!1)(s) AND f(s) = f(e!1)} = add(e!1, {s: below(S) | S!1(s) AND f(s) = f(e!1)})")
                                                              (("1"
                                                                (lemma
                                                                 "card_add[below(S)]")
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "{s: below(S) | S!1(s) AND f(s) = f(e!1)}"
                                                                   "e!1")
                                                                  (("1"
                                                                    (replace

                                                                     -1)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (use
                                                                     "finite_intersect")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 -2
                                                                 2)
                                                                (("2"
                                                                  (decompose-equality
                                                                   +)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma
                                                 "sum_x[T,real,0,+]")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (inst - "f(e!1)")
                                                    (("1"
                                                      (replace

                                                       -
                                                       :hide?

                                                       t)
                                                      (("1"
                                                        (case-replace
                                                         "remove(f(e!1),
                                bag_to_set(l_filter(make_bag(add(e!1, S!1), f),
                                                    f(s!1)))) = bag_to_set(l_filter(make_bag(S!1, f), f(s!1)))")
                                                        (("1"
                                                          (lemma
                                                           "sum_particular[T,real,0,+]")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (replace

                                                                 -1
                                                                 :hide?

                                                                 t)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case
                                                                     "l_filter(make_bag(add(e!1, S!1), f), f(s!1))(f(e!1)) = 1")
                                                                    (("1"
                                                                      (replace

                                                                       -
                                                                       :hide?

                                                                       t)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (postpone)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       -1
                                                                       4)
                                                                      (("2"
                                                                        (expand
                                                                         "bag_to_set")
                                                                        (("2"
                                                                          (expand
                                                                           "l_filter")
                                                                          (("2"
                                                                            (expand
                                                                             "make_bag")
                                                                            (("2"
                                                                              (lemma
                                                                               "nonempty_card[below(S)]")
                                                                              (("2"
                                                                                (inst
                                                                                 -
                                                                                 "{s: below(S) | S!1(s) AND f(s) = f(e!1)}")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "nonempty?")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "empty?")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "member")
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "card_one[below(S)]")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -
                                                                                             "{s: below(S) | add(e!1, S!1)(s) AND f(s) = f(e!1)}")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (inst?)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "singleton")
                                                                                                  (("1"
                                                                                                    (decompose-equality
                                                                                                     +)
                                                                                                    (("1"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (use
                                                                                               "finite_add")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (use
                                                                                   "finite_intersect")
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 4)
                                                          (("2"
                                                            (decompose-equality
                                                             +)
                                                            (("2"
                                                              (iff)
                                                              (("2"
                                                                (grind)
                                                                (("1"
                                                                  (lemma
                                                                   "nonempty_card[below(S)]")
                                                                  (("1"
                                                                    (inst-cp
                                                                     -
                                                                     "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1}")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (skosimp*)
                                                                        (("1"
                                                                          (split)
                                                                          (("1"
                                                                            (replace*)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (inst
                                                                             -
                                                                             "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (use
                                                                                 "finite_intersect")
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "LAMBDA (s: below(S)): f(s) = x!1"
                                                                                   "S!1")
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("2"
                                                                        (use
                                                                         "finite_add")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "LAMBDA (s: below(S)): f(s) = x!1"
                                                                           "S!1"
                                                                           "e!1")
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (lemma
                                                                   "nonempty_card[below(S)]")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (skosimp*)
                                                                        (("1"
                                                                          (lemma
                                                                           "nonempty_card[below(S)]")
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1}")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (prop)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (use
                                                                                 "finite_add")
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "LAMBDA (s: below(S)): f(s) = x!1"
                                                                                   "S!1"
                                                                                   "e!1")
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (use
                                                                       "finite_intersect")
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 4)
                                                      (("2"
                                                        (grind)
                                                        (("2"
                                                          (lemma
                                                           "nonempty_card[below(S)]")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = f(e!1)}")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst?)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               1)
                                                              (("2"
                                                                (use
                                                                 "finite_add")
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide -2 3)
                                          (("2"
                                            (expand "filter")
                                            (("2"
                                              (expand "add")
                                              (("2"
                                                (expand "member")
                                                (("2"
                                                  (case-replace
                                                   "(LAMBDA (j: below(S)): (e!1 = j OR S!1(j)) AND leq(f(j), f(s!1))) = add(e!1, LAMBDA (j: below(S)): S!1(j) AND leq(f(j), f(s!1)))")
                                                  (("1"
                                                    (lemma
                                                     "card_add[below(S)]")
                                                    (("1"
                                                      (inst
                                                       -
                                                       "LAMBDA (j: below(S)): S!1(j) AND leq(f(j), f(s!1))"
                                                       "e!1")
                                                      (("1"
                                                        (replace -)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (use
                                                         "finite_intersect")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (decompose-equality
                                                       +)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case-replace
                                         "filter(leq)(add(e!1, S!1))(f)(s!1) = filter(leq)(S!1)(f)(s!1)")
                                        (("1"
                                          (replace -2 :dir rl :hide? t)
                                          (("1"
                                            (case-replace
                                             "bag_to_set(l_filter(make_bag(add(e!1, S!1), f), f(s!1))) = bag_to_set(l_filter(make_bag(S!1, f), f(s!1)))")
                                            (("1"
                                              (lemma
                                               "sum_particular[T,real,0,+]")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (inst - "f(e!1)")
                                                  (("1"
                                                    (replace

                                                     -1
                                                     :hide?

                                                     t)
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (case-replace
                                                             "l_filter(make_bag(add(e!1, S!1), f), f(s!1))(f(e!1)) = 0")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (postpone)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide
                                                               -1
                                                               -2
                                                               -3
                                                               2)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (postpone)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide -1 4)
                                              (("2"
                                                (decompose-equality +)
                                                (("2"
                                                  (grind)
                                                  (("1"
                                                    (case
                                                     "x!1 = f(e!1)")
                                                    (("1"
                                                      (hide-all-but
                                                       (-1 -4 2))
                                                      (("1"
                                                        (typepred!
                                                         "leq")
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       "nonempty_card[below(S)]")
                                                      (("2"
                                                        (inst-cp
                                                         -
                                                         "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1}")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (skosimp*)
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (replace*)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (inst
                                                                 -
                                                                 "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (use
                                                                     "finite_intersect")
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "LAMBDA (s: below(S)): f(s) = x!1"
                                                                       "S!1")
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (use
                                                             "finite_add")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "LAMBDA (s: below(S)): f(s) = x!1"
                                                               "S!1"
                                                               "e!1")
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     "nonempty_card[below(S)]")
                                                    (("2"
                                                      (inst-cp
                                                       -
                                                       "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (skosimp*)
                                                          (("1"
                                                            (inst
                                                             -
                                                             "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1}")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               1)
                                                              (("2"
                                                                (use
                                                                 "finite_add")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "LAMBDA (s: below(S)): f(s) = x!1"
                                                                   "S!1"
                                                                   "e!1")
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (use
                                                           "finite_intersect")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "LAMBDA (s: below(S)): f(s) = x!1"
                                                             "S!1")
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide -1 4)
                                          (("2"
                                            (decompose-equality +)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked nil 620668 102730 t shostak))
 (mid_val_u 0
  (mid_val_u-8 nil 3287751459 3292683160
   ("" (skolem + ("f" "e" _ "t"))
    (("" (skosimp*)
      (("" (expand "middle_value")
        (("" (flatten)
          (("" (hide -2)
            (("" (use "card_make_bag")
              (("" (replace -1 :hide? t)
                ((""
                  (case-replace
                   "card(u_filter(make_bag(e, f), t)) = card(filter(geq)(e)(f)(s!1))")
                  (("" (hide -2 2)
                    (("" (expand "card")
                      (("" (typepred! "e")
                        (("" (replace -3 :hide? t)
                          ((""
                            (lemma "finite_set_ind_modified[below(S)]")
                            ((""
                              (inst -
                               "LAMBDA (ee: finite_set[below(S)]): sum(bag_to_set(u_filter(make_bag(ee, f), f(s!1))),
                                        LAMBDA (t: T): u_filter(make_bag(ee, f), f(s!1))(t))
                                     = card(filter(geq)(ee)(f)(s!1))")
                              ((""
                                (split)
                                (("1" (inst?) nil nil)
                                 ("2"
                                  (hide 3)
                                  (("2"
                                    (expand "filter")
                                    (("2"
                                      (lemma "card_empty?[below(S)]")
                                      (("2"
                                        (inst?)
                                        (("1"
                                          (case
                                           "empty?[below(S)]
                                                                                                                                                              (LAMBDA (j: below(S)): emptyset(j) AND geq(f(j), f(s!1)))")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -2 :hide? t)
                                              (("1"
                                                (expand "bag_to_set")
                                                (("1"
                                                  (expand "make_bag")
                                                  (("1"
                                                    (expand "u_filter")
                                                    (("1"
                                                      (case
                                                       "{t: T |
                                                                                                                                                                                          IF leq(f(s!1), t)
                                                                                                                                                                                            THEN card({s: below(S) | emptyset(s) AND f(s) = t})
                                                                                                                                                                                          ELSE 0
                                                                                                                                                                                          ENDIF
                                                                                                                                                                                           > 0} = emptyset[T]")
                                                      (("1"
                                                        (replace

                                                         -1
                                                         :hide?

                                                         t)
                                                        (("1"
                                                          (use
                                                           "sum_emptyset[T,real,0,+]")
                                                          (("1"
                                                            (skosimp*)
                                                            (("1"
                                                              (use
                                                               "finite_empty")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (decompose-equality
                                                           +)
                                                          (("1"
                                                            (grind)
                                                            (("1"
                                                              (use
                                                               "card_emptyset[below(S)]")
                                                              (("1"
                                                                (expand
                                                                 "emptyset")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (skosimp*)
                                                            (("2"
                                                              (use
                                                               "finite_empty")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (skosimp*)
                                                        (("3"
                                                          (use
                                                           "finite_empty")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2 -1)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (use "finite_empty")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (skosimp*)
                                  (("3"
                                    (hide 4)
                                    (("3"
                                      (case "geq(f(e!1), f(s!1))")
                                      (("1"
                                        (case-replace
                                         "card(filter(geq)(add(e!1, S!1))(f)(s!1)) = card(filter(geq)(S!1)(f)(s!1)) + 1")
                                        (("1"
                                          (replace -3 :dir rl :hide? t)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (case
                                               "bag_to_set(u_filter(make_bag(S!1, f), f(s!1)))(f(e!1))")
                                              (("1"
                                                (case
                                                 "u_filter(make_bag(add(e!1, S!1), f), f(s!1))(f(e!1)) = u_filter(make_bag(S!1, f), f(s!1))(f(e!1)) + 1")
                                                (("1"
                                                  (lemma
                                                   "sum_x[T,real,0,+]")
                                                  (("1"
                                                    (inst-cp
                                                     -
                                                     "bag_to_set(u_filter(make_bag(add(e!1, S!1), f), f(s!1)))"
                                                     "LAMBDA (t: T): u_filter(make_bag(add(e!1, S!1), f), f(s!1))(t)"
                                                     "f(e!1)")
                                                    (("1"
                                                      (inst
                                                       -
                                                       "bag_to_set(u_filter(make_bag(S!1, f), f(s!1)))"
                                                       "LAMBDA (t: T): u_filter(make_bag(S!1, f), f(s!1))(t)"
                                                       "f(e!1)")
                                                      (("1"
                                                        (replace*)
                                                        (("1"
                                                          (hide
                                                           -1
                                                           -2
                                                           -3)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (lemma
                                                               "sum_particular2[T,real,0,+]")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "remove(f(e!1),
                                                                                                                                                                                                           bag_to_set(u_filter(make_bag(add(e!1, S!1), f), f(s!1))))"
                                                                 "LAMBDA (t: T): u_filter(make_bag(add(e!1, S!1), f), f(s!1))(t)"
                                                                 "f(e!1)")
                                                                (("1"
                                                                  (replace

                                                                   -
                                                                   :hide?

                                                                   t)
                                                                  (("1"
                                                                    (lift-if)
                                                                    (("1"
                                                                      (split)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (hide-all-but
                                                                           -1)
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (hide
                                                                           1)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (name-replace
                                                                               "g"
                                                                               "LAMBDA (t: T): u_filter(make_bag(add(e!1, S!1), f), f(s!1))(t)")
                                                                              (("2"
                                                                                (case-replace
                                                                                 "remove(f(e!1),
                                                                                                                                                                                                                                     bag_to_set(u_filter(make_bag(add(e!1, S!1), f), f(s!1)))) = remove(f(e!1), bag_to_set(u_filter(make_bag(S!1, f), f(s!1))))")
                                                                                (("1"
                                                                                  (hide
                                                                                   -1)
                                                                                  (("1"
                                                                                    (use
                                                                                     "sum_f_g[T,real,0,+]")
                                                                                    (("1"
                                                                                      (split)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (skosimp*)
                                                                                        (("2"
                                                                                          (hide
                                                                                           2)
                                                                                          (("2"
                                                                                            (lift-if)
                                                                                            (("2"
                                                                                              (typepred!
                                                                                               "x!1")
                                                                                              (("2"
                                                                                                (split)
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (hide
                                                                                                     -4
                                                                                                     -5
                                                                                                     4)
                                                                                                    (("2"
                                                                                                      (grind)
                                                                                                      (("2"
                                                                                                        (case-replace
                                                                                                         "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1} = {s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                                        (("2"
                                                                                                          (hide
                                                                                                           3)
                                                                                                          (("2"
                                                                                                            (decompose-equality
                                                                                                             +)
                                                                                                            (("2"
                                                                                                              (grind)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (decompose-equality
                                                                                     +)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "remove")
                                                                                      (("2"
                                                                                        (iff)
                                                                                        (("2"
                                                                                          (prop)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "member")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "bag_to_set")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "u_filter")
                                                                                                (("1"
                                                                                                  (lift-if)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "geq")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (prop)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "make_bag")
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "nonempty_card[below(S)]")
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "{s: below(S) | S!1(s) AND f(s) = f(e!1)}")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "nonempty?")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "empty?")
                                                                                                                    (("1"
                                                                                                                      (skosimp*)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "member")
                                                                                                                        (("1"
                                                                                                                          (flatten)
                                                                                                                          (("1"
                                                                                                                            (lemma
                                                                                                                             "nonempty_card[below(S)]")
                                                                                                                            (("1"
                                                                                                                              (inst?)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "nonempty?")
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "empty?")
                                                                                                                                    (("1"
                                                                                                                                      (skosimp*)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "member")
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "add")
                                                                                                                                          (("1"
                                                                                                                                            (flatten)
                                                                                                                                            (("1"
                                                                                                                                              (split)
                                                                                                                                              (("1"
                                                                                                                                                (lemma
                                                                                                                                                 "nonempty_card[below(S)]")
                                                                                                                                                (("1"
                                                                                                                                                  (inst
                                                                                                                                                   -
                                                                                                                                                   "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (use
                                                                                                                                                     "finite_intersect")
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (expand
                                                                                                                                                 "member")
                                                                                                                                                (("2"
                                                                                                                                                  (lemma
                                                                                                                                                   "nonempty_card[below(S)]")
                                                                                                                                                  (("2"
                                                                                                                                                    (inst
                                                                                                                                                     -
                                                                                                                                                     "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      (("1"
                                                                                                                                                        (grind)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (use
                                                                                                                                                       "finite_intersect")
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (use
                                                                                                                                 "finite_add")
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (use
                                                                                                                 "finite_intersect")
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (grind)
                                                                                            (("2"
                                                                                              (lemma
                                                                                               "nonempty_card[below(S)]")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -
                                                                                                 "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (skosimp*)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "nonempty_card[below(S)]")
                                                                                                      (("1"
                                                                                                        (inst?)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (inst?)
                                                                                                            (("1"
                                                                                                              (prop)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (hide-all-but
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (use
                                                                                                             "finite_add")
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "LAMBDA (s: below(S)): f(s) = x!1"
                                                                                                               "S!1"
                                                                                                               "e!1")
                                                                                                              (("2"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide-all-but
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (use
                                                                                                     "finite_intersect")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "LAMBDA (s: below(S)): f(s) = x!1"
                                                                                                       "S!1")
                                                                                                      (("2"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide -1 3)
                                                      (("2"
                                                        (expand
                                                         "bag_to_set")
                                                        (("2"
                                                          (expand
                                                           "u_filter")
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (prop)
                                                              (("2"
                                                                (expand
                                                                 "make_bag")
                                                                (("2"
                                                                  (lemma
                                                                   "nonempty_card[below(S)]")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "{s: below(S) | S!1(s) AND f(s) = f(e!1)}")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "nonempty?")
                                                                        (("1"
                                                                          (expand
                                                                           "empty?")
                                                                          (("1"
                                                                            (skosimp*)
                                                                            (("1"
                                                                              (expand
                                                                               "member")
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "nonempty_card[below(S)]")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "{s: below(S) | add[below(S)](e!1, S!1)(s) AND f(s) = f(e!1)}")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "nonempty?")
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (use
                                                                                       "finite_add")
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (use
                                                                       "finite_intersect")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 3)
                                                  (("2"
                                                    (expand "u_filter")
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (split)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (expand
                                                             "make_bag")
                                                            (("1"
                                                              (case-replace
                                                               "{s: below(S) | add(e!1, S!1)(s) AND f(s) = f(e!1)} = add(e!1, {s: below(S) | S!1(s) AND f(s) = f(e!1)})")
                                                              (("1"
                                                                (lemma
                                                                 "card_add[below(S)]")
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "{s: below(S) | S!1(s) AND f(s) = f(e!1)}"
                                                                   "e!1")
                                                                  (("1"
                                                                    (replace

                                                                     -1)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (use
                                                                     "finite_intersect")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 -2
                                                                 2)
                                                                (("2"
                                                                  (decompose-equality
                                                                   +)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "geq")
                                                          (("2"
                                                            (flatten)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma
                                                 "sum_x[T,real,0,+]")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (inst - "f(e!1)")
                                                    (("1"
                                                      (replace

                                                       -
                                                       :hide?

                                                       t)
                                                      (("1"
                                                        (case-replace
                                                         "remove(f(e!1),
                                                                                                                                                                    bag_to_set(u_filter(make_bag(add(e!1, S!1), f),
                                                                                                                                                                                        f(s!1)))) = bag_to_set(u_filter(make_bag(S!1, f), f(s!1)))")
                                                        (("1"
                                                          (lemma
                                                           "sum_particular2[T,real,0,+]")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (replace

                                                                 -1
                                                                 :hide?

                                                                 t)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case
                                                                     "u_filter(make_bag(add(e!1, S!1), f), f(s!1))(f(e!1)) = 1")
                                                                    (("1"
                                                                      (replace

                                                                       -
                                                                       :hide?

                                                                       t)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (case-replace
                                                                           "(LAMBDA (t_1: T):
                                                                                                                                                        IF t_1 = f(e!1) THEN 0
                                                                                                                                                        ELSE u_filter(make_bag(add(e!1, S!1), f), f(s!1))(t_1)
                                                                                                                                                        ENDIF) = LAMBDA (t: T): u_filter(make_bag(S!1, f), f(s!1))(t)")
                                                                          (("1"
                                                                            (hide
                                                                             4)
                                                                            (("1"
                                                                              (decompose-equality
                                                                               +)
                                                                              (("1"
                                                                                (lift-if)
                                                                                (("1"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "bag_to_set")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (hide
                                                                                       -1)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "bag_to_set")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "u_filter")
                                                                                          (("2"
                                                                                            (lift-if)
                                                                                            (("2"
                                                                                              (split)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "make_bag")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "add")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "member")
                                                                                                      (("1"
                                                                                                        (case-replace
                                                                                                         "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1} = {s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           2)
                                                                                                          (("1"
                                                                                                            (decompose-equality
                                                                                                             +)
                                                                                                            (("1"
                                                                                                              (grind)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       -1
                                                                       4)
                                                                      (("2"
                                                                        (expand
                                                                         "bag_to_set")
                                                                        (("2"
                                                                          (expand
                                                                           "u_filter")
                                                                          (("2"
                                                                            (expand
                                                                             "make_bag")
                                                                            (("2"
                                                                              (lemma
                                                                               "nonempty_card[below(S)]")
                                                                              (("2"
                                                                                (inst
                                                                                 -
                                                                                 "{s: below(S) | S!1(s) AND f(s) = f(e!1)}")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "nonempty?")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "empty?")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "member")
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "card_one[below(S)]")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "geq")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -
                                                                                               "{s: below(S) | add(e!1, S!1)(s) AND f(s) = f(e!1)}")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (inst?)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "singleton")
                                                                                                      (("1"
                                                                                                        (decompose-equality
                                                                                                         +)
                                                                                                        (("1"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (use
                                                                                                 "finite_add")
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (use
                                                                                   "finite_intersect")
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 4)
                                                          (("2"
                                                            (decompose-equality
                                                             +)
                                                            (("2"
                                                              (iff)
                                                              (("2"
                                                                (grind)
                                                                (("1"
                                                                  (lemma
                                                                   "nonempty_card[below(S)]")
                                                                  (("1"
                                                                    (inst-cp
                                                                     -
                                                                     "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1}")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (skosimp*)
                                                                        (("1"
                                                                          (split)
                                                                          (("1"
                                                                            (replace*)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (inst
                                                                             -
                                                                             "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (use
                                                                                 "finite_intersect")
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "LAMBDA (s: below(S)): f(s) = x!1"
                                                                                   "S!1")
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("2"
                                                                        (use
                                                                         "finite_add")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "LAMBDA (s: below(S)): f(s) = x!1"
                                                                           "S!1"
                                                                           "e!1")
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (lemma
                                                                   "nonempty_card[below(S)]")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (skosimp*)
                                                                        (("1"
                                                                          (lemma
                                                                           "nonempty_card[below(S)]")
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1}")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (prop)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (use
                                                                                 "finite_add")
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "LAMBDA (s: below(S)): f(s) = x!1"
                                                                                   "S!1"
                                                                                   "e!1")
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (use
                                                                       "finite_intersect")
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 4)
                                                      (("2"
                                                        (grind)
                                                        (("2"
                                                          (lemma
                                                           "nonempty_card[below(S)]")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = f(e!1)}")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst?)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               1)
                                                              (("2"
                                                                (use
                                                                 "finite_add")
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide -2 3)
                                          (("2"
                                            (expand "filter")
                                            (("2"
                                              (expand "add")
                                              (("2"
                                                (expand "member")
                                                (("2"
                                                  (expand "geq")
                                                  (("2"
                                                    (case-replace
                                                     "(LAMBDA (j: below(S)): (e!1 = j OR S!1(j)) AND leq(f(s!1), f(j))) = add(e!1, LAMBDA (j: below(S)): S!1(j) AND leq(f(s!1), f(j)))")
                                                    (("1"
                                                      (lemma
                                                       "card_add[below(S)]")
                                                      (("1"
                                                        (inst
                                                         -
                                                         "LAMBDA (j: below(S)): S!1(j) AND leq(f(s!1), f(j))"
                                                         "e!1")
                                                        (("1"
                                                          (replace -)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (use
                                                           "finite_intersect")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (decompose-equality
                                                         +)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case-replace
                                         "filter(geq)(add(e!1, S!1))(f)(s!1) = filter(geq)(S!1)(f)(s!1)")
                                        (("1"
                                          (replace -2 :dir rl :hide? t)
                                          (("1"
                                            (case-replace
                                             "bag_to_set(u_filter(make_bag(add(e!1, S!1), f), f(s!1))) = bag_to_set(u_filter(make_bag(S!1, f), f(s!1)))")
                                            (("1"
                                              (lemma
                                               "sum_particular2[T,real,0,+]")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (inst - "f(e!1)")
                                                  (("1"
                                                    (replace

                                                     -1
                                                     :hide?

                                                     t)
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (case-replace
                                                             "u_filter(make_bag(add(e!1, S!1), f), f(s!1))(f(e!1)) = 0")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (hide
                                                                 -2
                                                                 -3
                                                                 -4)
                                                                (("1"
                                                                  (case-replace
                                                                   "(LAMBDA (t_1: T):
                                                                                                                            IF t_1 = f(e!1) THEN 0
                                                                                                                            ELSE u_filter(make_bag(add(e!1, S!1), f), f(s!1))(t_1)
                                                                                                                            ENDIF) = LAMBDA (t: T): u_filter(make_bag(S!1, f), f(s!1))(t)")
                                                                  (("1"
                                                                    (hide
                                                                     2)
                                                                    (("1"
                                                                      (decompose-equality
                                                                       +)
                                                                      (("1"
                                                                        (lift-if)
                                                                        (("1"
                                                                          (split)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (expand
                                                                               "u_filter")
                                                                              (("2"
                                                                                (lift-if)
                                                                                (("2"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "make_bag")
                                                                                      (("1"
                                                                                        (case-replace
                                                                                         "{s: below(S) | add(e!1, S!1)(s) AND f(s) = x!1} = {s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                        (("1"
                                                                                          (hide
                                                                                           2)
                                                                                          (("1"
                                                                                            (decompose-equality
                                                                                             +)
                                                                                            (("1"
                                                                                              (iff)
                                                                                              (("1"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide
                                                               -1
                                                               -2
                                                               -3
                                                               2)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (case-replace
                                                               "(LAMBDA (t_1: T):
                                                                                                            IF t_1 = f(e!1) THEN 0
                                                                                                            ELSE u_filter(make_bag(add(e!1, S!1), f), f(s!1))(t_1)
                                                                                                            ENDIF) = LAMBDA (t: T): u_filter(make_bag(S!1, f), f(s!1))(t)")
                                                              (("2"
                                                                (hide
                                                                 3)
                                                                (("2"
                                                                  (decompose-equality
                                                                   +)
                                                                  (("2"
                                                                    (lift-if)
                                                                    (("2"
                                                                      (split)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (expand
                                                                           "bag_to_set")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (hide
                                                                           -1
                                                                           -2)
                                                                          (("2"
                                                                            (expand
                                                                             "bag_to_set")
                                                                            (("2"
                                                                              (expand
                                                                               "u_filter")
                                                                              (("2"
                                                                                (lift-if)
                                                                                (("2"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "make_bag")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "add")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "member")
                                                                                          (("1"
                                                                                            (case-replace
                                                                                             "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1} = {s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                            (("1"
                                                                                              (hide
                                                                                               2)
                                                                                              (("1"
                                                                                                (decompose-equality
                                                                                                 +)
                                                                                                (("1"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide -1 4)
                                              (("2"
                                                (decompose-equality +)
                                                (("2"
                                                  (grind)
                                                  (("1"
                                                    (case
                                                     "x!1 = f(e!1)")
                                                    (("1"
                                                      (hide-all-but
                                                       (-1 -4 2))
                                                      (("1"
                                                        (typepred!
                                                         "leq")
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       "nonempty_card[below(S)]")
                                                      (("2"
                                                        (inst-cp
                                                         -
                                                         "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1}")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (skosimp*)
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (replace*)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (inst
                                                                 -
                                                                 "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (use
                                                                     "finite_intersect")
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "LAMBDA (s: below(S)): f(s) = x!1"
                                                                       "S!1")
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (use
                                                             "finite_add")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "LAMBDA (s: below(S)): f(s) = x!1"
                                                               "S!1"
                                                               "e!1")
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     "nonempty_card[below(S)]")
                                                    (("2"
                                                      (inst-cp
                                                       -
                                                       "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (skosimp*)
                                                          (("1"
                                                            (inst
                                                             -
                                                             "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1}")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               1)
                                                              (("2"
                                                                (use
                                                                 "finite_add")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "LAMBDA (s: below(S)): f(s) = x!1"
                                                                   "S!1"
                                                                   "e!1")
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (use
                                                           "finite_intersect")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "LAMBDA (s: below(S)): f(s) = x!1"
                                                             "S!1")
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide -1 4)
                                          (("2"
                                            (decompose-equality +)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((card_make_bag formula-decl nil make_bag nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (S formal-const-decl "posnat" mid_val_equiv nil)
    (T formal-nonempty-type-decl nil mid_val_equiv nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bag type-eq-decl nil bags "structures/")
    (is_finite const-decl "bool" finite_bags "structures/")
    (finite_bag type-eq-decl nil finite_bags "structures/")
    (card const-decl "nat" finite_bags "structures/")
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (leq formal-const-decl "(total_order?[T])" mid_val_equiv nil)
    (u_filter const-decl "bag" bag_filters "structures/")
    (make_bag const-decl "finite_bag[T]" make_bag nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (filter const-decl "bool" index_filters nil)
    (geq const-decl "bool" index_select nil)
    (bag_to_set const-decl "set[T]" bags_to_sets "structures/")
    (sum def-decl "R" finite_sets_sum "finite_sets/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (card_add formula-decl nil finite_sets nil)
    (sum_x formula-decl nil finite_sets_sum "finite_sets/")
    (sum_particular2 formula-decl nil aux nil)
    (x!1 skolem-const-decl "T" mid_val_equiv nil)
    (finite_intersect formula-decl nil make_bag nil)
    (finite_add formula-decl nil make_bag nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (below type-eq-decl nil nat_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (sum_f_g formula-decl nil finite_sets_sum "finite_sets/")
    (remove const-decl "set" sets nil)
    (S!1 skolem-const-decl "finite_set[below(S)]" mid_val_equiv nil)
    (e!1 skolem-const-decl "below(S)" mid_val_equiv nil)
    (x!1 skolem-const-decl "T" mid_val_equiv nil)
    (/= const-decl "boolean" notequal nil)
    (card_one formula-decl nil finite_sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (x!1 skolem-const-decl "T" mid_val_equiv nil)
    (reflexive? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (antisymmetric? const-decl "bool" relations nil)
    (partial_order? const-decl "bool" orders nil)
    (dichotomous? const-decl "bool" orders nil)
    (card_empty? formula-decl nil finite_sets nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sum_emptyset formula-decl nil finite_sets_sum "finite_sets/")
    (finite_empty formula-decl nil make_bag nil)
    (card_emptyset formula-decl nil finite_sets nil)
    (member const-decl "bool" sets nil)
    (injective? const-decl "bool" functions nil)
    (s!1 skolem-const-decl "below(S)" mid_val_equiv nil)
    (f skolem-const-decl "[below(S) -> T]" mid_val_equiv nil)
    (emptyset const-decl "set" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set_ind_modified formula-decl nil finite_sets_inductions
     "finite_sets/")
    (middle_value const-decl "bool" middle_value_index nil))
   18272 12790 t nil)
  (mid_val_u-7 nil 3287749755 3287751448
   ("" (skolem + ("f" "e" _ "t"))
    (("" (skosimp*)
      (("" (expand "middle_value")
        (("" (flatten)
          (("" (hide -3)
            (("" (use "card_make_bag")
              (("" (replace -1 :hide? t)
                ((""
                  (case-replace
                   "card(u_filter(make_bag(e, f), t)) = card(filter(leq)(e)(f)(s!1))")
                  (("" (hide -2 2)
                    (("" (expand "card")
                      (("" (typepred! "e")
                        (("" (replace -3 :hide? t)
                          ((""
                            (lemma "finite_set_ind_modified[below(S)]")
                            ((""
                              (inst -
                               "LAMBDA (ee: finite_set[below(S)]): sum(bag_to_set(u_filter(make_bag(ee, f), f(s!1))),
                                    LAMBDA (t: T): u_filter(make_bag(ee, f), f(s!1))(t))
                                 = card(filter(leq)(ee)(f)(s!1))")
                              ((""
                                (split)
                                (("1" (inst?) nil)
                                 ("2"
                                  (hide 3)
                                  (("2"
                                    (expand "filter")
                                    (("2"
                                      (lemma "card_empty?[below(S)]")
                                      (("2"
                                        (inst?)
                                        (("1"
                                          (case
                                           "empty?[below(S)]
                                                                                                                                        (LAMBDA (j: below(S)): emptyset(j) AND leq(f(j), f(s!1)))")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -2 :hide? t)
                                              (("1"
                                                (expand "bag_to_set")
                                                (("1"
                                                  (expand "make_bag")
                                                  (("1"
                                                    (expand "u_filter")
                                                    (("1"
                                                      (case
                                                       "{t: T |
                                                                                                                                                                IF leq(f(s!1), t)
                                                                                                                                                                  THEN card({s: below(S) | emptyset(s) AND f(s) = t})
                                                                                                                                                                ELSE 0
                                                                                                                                                                ENDIF
                                                                                                                                                                 > 0} = emptyset[T]")
                                                      (("1"
                                                        (replace

                                                         -1
                                                         :hide?

                                                         t)
                                                        (("1"
                                                          (use
                                                           "sum_emptyset[T,real,0,+]")
                                                          (("1"
                                                            (skosimp*)
                                                            (("1"
                                                              (use
                                                               "finite_empty")
                                                              nil)))))))
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (decompose-equality
                                                           +)
                                                          (("1"
                                                            (grind)
                                                            (("1"
                                                              (use
                                                               "card_emptyset[below(S)]")
                                                              (("1"
                                                                (expand
                                                                 "emptyset")
                                                                (("1"
                                                                  (assert)
                                                                  nil)))))))
                                                           ("2"
                                                            (skosimp*)
                                                            (("2"
                                                              (use
                                                               "finite_empty")
                                                              nil)))))))
                                                       ("3"
                                                        (skosimp*)
                                                        (("3"
                                                          (use
                                                           "finite_empty")
                                                          nil)))))))))))))))
                                           ("2"
                                            (hide 2 -1)
                                            (("2" (grind) nil)))))
                                         ("2"
                                          (use "finite_empty")
                                          nil)))))))))
                                 ("3"
                                  (skosimp*)
                                  (("3"
                                    (hide 4)
                                    (("3"
                                      (case "leq(f(e!1), f(s!1))")
                                      (("1"
                                        (case-replace
                                         "card(filter(leq)(add(e!1, S!1))(f)(s!1)) = card(filter(leq)(S!1)(f)(s!1)) + 1")
                                        (("1"
                                          (replace -3 :dir rl :hide? t)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (case
                                               "bag_to_set(u_filter(make_bag(S!1, f), f(s!1)))(f(e!1))")
                                              (("1"
                                                (case
                                                 "u_filter(make_bag(add(e!1, S!1), f), f(s!1))(f(e!1)) = u_filter(make_bag(S!1, f), f(s!1))(f(e!1)) + 1")
                                                (("1"
                                                  (lemma
                                                   "sum_x[T,real,0,+]")
                                                  (("1"
                                                    (inst-cp
                                                     -
                                                     "bag_to_set(u_filter(make_bag(add(e!1, S!1), f), f(s!1)))"
                                                     "LAMBDA (t: T): u_filter(make_bag(add(e!1, S!1), f), f(s!1))(t)"
                                                     "f(e!1)")
                                                    (("1"
                                                      (inst
                                                       -
                                                       "bag_to_set(u_filter(make_bag(S!1, f), f(s!1)))"
                                                       "LAMBDA (t: T): u_filter(make_bag(S!1, f), f(s!1))(t)"
                                                       "f(e!1)")
                                                      (("1"
                                                        (replace*)
                                                        (("1"
                                                          (hide
                                                           -1
                                                           -2
                                                           -3)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (lemma
                                                               "sum_particular2[T,real,0,+]")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "remove(f(e!1),
                                                                                                                                                                               bag_to_set(u_filter(make_bag(add(e!1, S!1), f), f(s!1))))"
                                                                 "LAMBDA (t: T): u_filter(make_bag(add(e!1, S!1), f), f(s!1))(t)"
                                                                 "f(e!1)")
                                                                (("1"
                                                                  (replace

                                                                   -
                                                                   :hide?

                                                                   t)
                                                                  (("1"
                                                                    (lift-if)
                                                                    (("1"
                                                                      (split)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (hide-all-but
                                                                           -1)
                                                                          (("1"
                                                                            (grind)
                                                                            nil)))))
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (hide
                                                                           1)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (name-replace
                                                                               "g"
                                                                               "LAMBDA (t: T): u_filter(make_bag(add(e!1, S!1), f), f(s!1))(t)")
                                                                              (("2"
                                                                                (case-replace
                                                                                 "remove(f(e!1),
                                                                                                                                                                                                     bag_to_set(u_filter(make_bag(add(e!1, S!1), f), f(s!1)))) = remove(f(e!1), bag_to_set(u_filter(make_bag(S!1, f), f(s!1))))")
                                                                                (("1"
                                                                                  (hide
                                                                                   -1)
                                                                                  (("1"
                                                                                    (use
                                                                                     "sum_f_g[T,real,0,+]")
                                                                                    (("1"
                                                                                      (split)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil)
                                                                                       ("2"
                                                                                        (skosimp*)
                                                                                        (("2"
                                                                                          (hide
                                                                                           2)
                                                                                          (("2"
                                                                                            (lift-if)
                                                                                            (("2"
                                                                                              (typepred!
                                                                                               "x!1")
                                                                                              (("2"
                                                                                                (split)
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (grind)
                                                                                                    nil)))
                                                                                                 ("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (hide
                                                                                                     -4
                                                                                                     -5
                                                                                                     4)
                                                                                                    (("2"
                                                                                                      (grind)
                                                                                                      (("2"
                                                                                                        (case-replace
                                                                                                         "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1} = {s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                                        (("2"
                                                                                                          (hide
                                                                                                           3)
                                                                                                          (("2"
                                                                                                            (decompose-equality
                                                                                                             +)
                                                                                                            (("2"
                                                                                                              (grind)
                                                                                                              nil)))))))))))))))))))))))))))))
                                                                                 ("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (decompose-equality
                                                                                     +)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "remove")
                                                                                      (("2"
                                                                                        (iff)
                                                                                        (("2"
                                                                                          (prop)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "member")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "bag_to_set")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "u_filter")
                                                                                                (("1"
                                                                                                  (lift-if)
                                                                                                  (("1"
                                                                                                    (prop)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "make_bag")
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "nonempty_card[below(S)]")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "{s: below(S) | S!1(s) AND f(s) = f(e!1)}")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "nonempty?")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "empty?")
                                                                                                                (("1"
                                                                                                                  (skosimp*)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "member")
                                                                                                                    (("1"
                                                                                                                      (flatten)
                                                                                                                      (("1"
                                                                                                                        (lemma
                                                                                                                         "nonempty_card[below(S)]")
                                                                                                                        (("1"
                                                                                                                          (inst?)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "nonempty?")
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "empty?")
                                                                                                                                (("1"
                                                                                                                                  (skosimp*)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "member")
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "add")
                                                                                                                                      (("1"
                                                                                                                                        (flatten)
                                                                                                                                        (("1"
                                                                                                                                          (split)
                                                                                                                                          (("1"
                                                                                                                                            (lemma
                                                                                                                                             "nonempty_card[below(S)]")
                                                                                                                                            (("1"
                                                                                                                                              (inst
                                                                                                                                               -
                                                                                                                                               "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (use
                                                                                                                                                 "finite_intersect")
                                                                                                                                                nil)))))
                                                                                                                                           ("2"
                                                                                                                                            (expand
                                                                                                                                             "member")
                                                                                                                                            (("2"
                                                                                                                                              (lemma
                                                                                                                                               "nonempty_card[below(S)]")
                                                                                                                                              (("2"
                                                                                                                                                (inst
                                                                                                                                                 -
                                                                                                                                                 "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (grind)
                                                                                                                                                    nil)))
                                                                                                                                                 ("2"
                                                                                                                                                  (use
                                                                                                                                                   "finite_intersect")
                                                                                                                                                  nil)))))))))))))))))))))))
                                                                                                                           ("2"
                                                                                                                            (use
                                                                                                                             "finite_add")
                                                                                                                            nil)))))))))))))))))
                                                                                                           ("2"
                                                                                                            (use
                                                                                                             "finite_intersect")
                                                                                                            nil)))))))))))))))))
                                                                                           ("2"
                                                                                            (grind)
                                                                                            (("2"
                                                                                              (lemma
                                                                                               "nonempty_card[below(S)]")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -
                                                                                                 "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (skosimp*)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "nonempty_card[below(S)]")
                                                                                                      (("1"
                                                                                                        (inst?)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (inst?)
                                                                                                            (("1"
                                                                                                              (prop)
                                                                                                              nil)))))
                                                                                                         ("2"
                                                                                                          (hide-all-but
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (use
                                                                                                             "finite_add")
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "LAMBDA (s: below(S)): f(s) = x!1"
                                                                                                               "S!1"
                                                                                                               "e!1")
                                                                                                              (("2"
                                                                                                                (grind)
                                                                                                                nil)))))))))))))))
                                                                                                 ("2"
                                                                                                  (hide-all-but
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (use
                                                                                                     "finite_intersect")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "LAMBDA (s: below(S)): f(s) = x!1"
                                                                                                       "S!1")
                                                                                                      (("2"
                                                                                                        (grind)
                                                                                                        nil)))))))))))))))))))))))))))))))))))))))))))))))))))
                                                     ("2"
                                                      (hide -1 3)
                                                      (("2"
                                                        (expand
                                                         "bag_to_set")
                                                        (("2"
                                                          (expand
                                                           "u_filter")
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (prop)
                                                              (("2"
                                                                (expand
                                                                 "make_bag")
                                                                (("2"
                                                                  (lemma
                                                                   "nonempty_card[below(S)]")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "{s: below(S) | S!1(s) AND f(s) = f(e!1)}")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "nonempty?")
                                                                        (("1"
                                                                          (expand
                                                                           "empty?")
                                                                          (("1"
                                                                            (skosimp*)
                                                                            (("1"
                                                                              (expand
                                                                               "member")
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "nonempty_card[below(S)]")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "{s: below(S) | add[below(S)](e!1, S!1)(s) AND f(s) = f(e!1)}")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "nonempty?")
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil)))))
                                                                                     ("2"
                                                                                      (use
                                                                                       "finite_add")
                                                                                      nil)))))))))))))))))
                                                                     ("2"
                                                                      (use
                                                                       "finite_intersect")
                                                                      nil)))))))))))))))))))))
                                                 ("2"
                                                  (hide 3)
                                                  (("2"
                                                    (expand "u_filter")
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (split)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (expand
                                                             "make_bag")
                                                            (("1"
                                                              (case-replace
                                                               "{s: below(S) | add(e!1, S!1)(s) AND f(s) = f(e!1)} = add(e!1, {s: below(S) | S!1(s) AND f(s) = f(e!1)})")
                                                              (("1"
                                                                (lemma
                                                                 "card_add[below(S)]")
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "{s: below(S) | S!1(s) AND f(s) = f(e!1)}"
                                                                   "e!1")
                                                                  (("1"
                                                                    (replace

                                                                     -1)
                                                                    (("1"
                                                                      (assert)
                                                                      nil)))
                                                                   ("2"
                                                                    (use
                                                                     "finite_intersect")
                                                                    nil)))))
                                                               ("2"
                                                                (hide
                                                                 -2
                                                                 2)
                                                                (("2"
                                                                  (decompose-equality
                                                                   +)
                                                                  (("2"
                                                                    (grind)
                                                                    nil)))))))))))
                                                         ("2"
                                                          (flatten)
                                                          nil)))))))))))
                                               ("2"
                                                (lemma
                                                 "sum_x[T,real,0,+]")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (inst - "f(e!1)")
                                                    (("1"
                                                      (replace

                                                       -
                                                       :hide?

                                                       t)
                                                      (("1"
                                                        (case-replace
                                                         "remove(f(e!1),
                                                                                                                                            bag_to_set(u_filter(make_bag(add(e!1, S!1), f),
                                                                                                                                                                f(s!1)))) = bag_to_set(u_filter(make_bag(S!1, f), f(s!1)))")
                                                        (("1"
                                                          (lemma
                                                           "sum_particular2[T,real,0,+]")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (replace

                                                                 -1
                                                                 :hide?

                                                                 t)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case
                                                                     "u_filter(make_bag(add(e!1, S!1), f), f(s!1))(f(e!1)) = 1")
                                                                    (("1"
                                                                      (replace

                                                                       -
                                                                       :hide?

                                                                       t)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (case-replace
                                                                           "(LAMBDA (t_1: T):
                                                                                                                        IF t_1 = f(e!1) THEN 0
                                                                                                                        ELSE u_filter(make_bag(add(e!1, S!1), f), f(s!1))(t_1)
                                                                                                                        ENDIF) = LAMBDA (t: T): u_filter(make_bag(S!1, f), f(s!1))(t)")
                                                                          (("1"
                                                                            (hide
                                                                             4)
                                                                            (("1"
                                                                              (decompose-equality
                                                                               +)
                                                                              (("1"
                                                                                (lift-if)
                                                                                (("1"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "bag_to_set")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil)))))
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (hide
                                                                                       -1)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "bag_to_set")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "u_filter")
                                                                                          (("2"
                                                                                            (lift-if)
                                                                                            (("2"
                                                                                              (split)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "make_bag")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "add")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "member")
                                                                                                      (("1"
                                                                                                        (case-replace
                                                                                                         "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1} = {s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           2)
                                                                                                          (("1"
                                                                                                            (decompose-equality
                                                                                                             +)
                                                                                                            (("1"
                                                                                                              (grind)
                                                                                                              nil)))))))))))))))
                                                                                               ("2"
                                                                                                (propax)
                                                                                                nil)))))))))))))))))))))))))))
                                                                     ("2"
                                                                      (hide
                                                                       -1
                                                                       4)
                                                                      (("2"
                                                                        (expand
                                                                         "bag_to_set")
                                                                        (("2"
                                                                          (expand
                                                                           "u_filter")
                                                                          (("2"
                                                                            (expand
                                                                             "make_bag")
                                                                            (("2"
                                                                              (lemma
                                                                               "nonempty_card[below(S)]")
                                                                              (("2"
                                                                                (inst
                                                                                 -
                                                                                 "{s: below(S) | S!1(s) AND f(s) = f(e!1)}")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "nonempty?")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "empty?")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "member")
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "card_one[below(S)]")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -
                                                                                             "{s: below(S) | add(e!1, S!1)(s) AND f(s) = f(e!1)}")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (inst?)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "singleton")
                                                                                                  (("1"
                                                                                                    (decompose-equality
                                                                                                     +)
                                                                                                    (("1"
                                                                                                      (grind)
                                                                                                      nil)))))))))
                                                                                             ("2"
                                                                                              (use
                                                                                               "finite_add")
                                                                                              nil)))))))))))))
                                                                                 ("2"
                                                                                  (use
                                                                                   "finite_intersect")
                                                                                  nil)))))))))))))))))))))))))
                                                         ("2"
                                                          (hide 4)
                                                          (("2"
                                                            (decompose-equality
                                                             +)
                                                            (("2"
                                                              (iff)
                                                              (("2"
                                                                (grind)
                                                                (("1"
                                                                  (lemma
                                                                   "nonempty_card[below(S)]")
                                                                  (("1"
                                                                    (inst-cp
                                                                     -
                                                                     "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1}")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (skosimp*)
                                                                        (("1"
                                                                          (split)
                                                                          (("1"
                                                                            (replace*)
                                                                            nil)
                                                                           ("2"
                                                                            (inst
                                                                             -
                                                                             "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil)
                                                                                   ("2"
                                                                                    (propax)
                                                                                    nil)))))))
                                                                             ("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (use
                                                                                 "finite_intersect")
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "LAMBDA (s: below(S)): f(s) = x!1"
                                                                                   "S!1")
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil)))))))))))))))
                                                                     ("2"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("2"
                                                                        (use
                                                                         "finite_add")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "LAMBDA (s: below(S)): f(s) = x!1"
                                                                           "S!1"
                                                                           "e!1")
                                                                          (("2"
                                                                            (grind)
                                                                            nil)))))))))))
                                                                 ("2"
                                                                  (lemma
                                                                   "nonempty_card[below(S)]")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (skosimp*)
                                                                        (("1"
                                                                          (lemma
                                                                           "nonempty_card[below(S)]")
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1}")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (prop)
                                                                                  nil)))))
                                                                             ("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (use
                                                                                 "finite_add")
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "LAMBDA (s: below(S)): f(s) = x!1"
                                                                                   "S!1"
                                                                                   "e!1")
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil)))))))))))))))
                                                                     ("2"
                                                                      (use
                                                                       "finite_intersect")
                                                                      (("2"
                                                                        (grind)
                                                                        nil)))))))))))))))))))
                                                     ("2"
                                                      (hide 4)
                                                      (("2"
                                                        (grind)
                                                        (("2"
                                                          (lemma
                                                           "nonempty_card[below(S)]")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = f(e!1)}")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst?)
                                                                nil)))
                                                             ("2"
                                                              (hide-all-but
                                                               1)
                                                              (("2"
                                                                (use
                                                                 "finite_add")
                                                                (("2"
                                                                  (grind)
                                                                  nil)))))))))))))))))))))))))
                                         ("2"
                                          (hide -2 3)
                                          (("2"
                                            (expand "filter")
                                            (("2"
                                              (expand "add")
                                              (("2"
                                                (expand "member")
                                                (("2"
                                                  (case-replace
                                                   "(LAMBDA (j: below(S)): (e!1 = j OR S!1(j)) AND leq(f(j), f(s!1))) = add(e!1, LAMBDA (j: below(S)): S!1(j) AND leq(f(j), f(s!1)))")
                                                  (("1"
                                                    (lemma
                                                     "card_add[below(S)]")
                                                    (("1"
                                                      (inst
                                                       -
                                                       "LAMBDA (j: below(S)): S!1(j) AND leq(f(j), f(s!1))"
                                                       "e!1")
                                                      (("1"
                                                        (replace -)
                                                        (("1"
                                                          (assert)
                                                          nil)))
                                                       ("2"
                                                        (use
                                                         "finite_intersect")
                                                        nil)))))
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (decompose-equality
                                                       +)
                                                      (("2"
                                                        (grind)
                                                        nil)))))))))))))))))
                                       ("2"
                                        (case-replace
                                         "filter(leq)(add(e!1, S!1))(f)(s!1) = filter(leq)(S!1)(f)(s!1)")
                                        (("1"
                                          (replace -2 :dir rl :hide? t)
                                          (("1"
                                            (case-replace
                                             "bag_to_set(u_filter(make_bag(add(e!1, S!1), f), f(s!1))) = bag_to_set(u_filter(make_bag(S!1, f), f(s!1)))")
                                            (("1"
                                              (lemma
                                               "sum_particular2[T,real,0,+]")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (inst - "f(e!1)")
                                                  (("1"
                                                    (replace

                                                     -1
                                                     :hide?

                                                     t)
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (case-replace
                                                             "u_filter(make_bag(add(e!1, S!1), f), f(s!1))(f(e!1)) = 0")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (hide
                                                                 -2
                                                                 -3
                                                                 -4)
                                                                (("1"
                                                                  (case-replace
                                                                   "(LAMBDA (t_1: T):
                                                                                                IF t_1 = f(e!1) THEN 0
                                                                                                ELSE u_filter(make_bag(add(e!1, S!1), f), f(s!1))(t_1)
                                                                                                ENDIF) = LAMBDA (t: T): u_filter(make_bag(S!1, f), f(s!1))(t)")
                                                                  (("1"
                                                                    (hide
                                                                     2)
                                                                    (("1"
                                                                      (decompose-equality
                                                                       +)
                                                                      (("1"
                                                                        (lift-if)
                                                                        (("1"
                                                                          (split)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (grind)
                                                                              nil)))
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (expand
                                                                               "u_filter")
                                                                              (("2"
                                                                                (lift-if)
                                                                                (("2"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "make_bag")
                                                                                      (("1"
                                                                                        (case-replace
                                                                                         "{s: below(S) | add(e!1, S!1)(s) AND f(s) = x!1} = {s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                        (("1"
                                                                                          (hide
                                                                                           2)
                                                                                          (("1"
                                                                                            (decompose-equality
                                                                                             +)
                                                                                            (("1"
                                                                                              (iff)
                                                                                              (("1"
                                                                                                (grind)
                                                                                                nil)))))))))))))
                                                                                   ("2"
                                                                                    (propax)
                                                                                    nil)))))))))))))))))))))))
                                                             ("2"
                                                              (hide
                                                               -1
                                                               -2
                                                               -3
                                                               2)
                                                              (("2"
                                                                (grind)
                                                                nil)))))))
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (case-replace
                                                               "(LAMBDA (t_1: T):
                                                                                    IF t_1 = f(e!1) THEN 0
                                                                                    ELSE u_filter(make_bag(add(e!1, S!1), f), f(s!1))(t_1)
                                                                                    ENDIF) = LAMBDA (t: T): u_filter(make_bag(S!1, f), f(s!1))(t)")
                                                              (("2"
                                                                (hide
                                                                 3)
                                                                (("2"
                                                                  (decompose-equality
                                                                   +)
                                                                  (("2"
                                                                    (lift-if)
                                                                    (("2"
                                                                      (split)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (expand
                                                                           "bag_to_set")
                                                                          (("1"
                                                                            (assert)
                                                                            nil)))))
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (hide
                                                                           -1
                                                                           -2)
                                                                          (("2"
                                                                            (expand
                                                                             "bag_to_set")
                                                                            (("2"
                                                                              (expand
                                                                               "u_filter")
                                                                              (("2"
                                                                                (lift-if)
                                                                                (("2"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "make_bag")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "add")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "member")
                                                                                          (("1"
                                                                                            (case-replace
                                                                                             "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1} = {s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                            (("1"
                                                                                              (hide
                                                                                               2)
                                                                                              (("1"
                                                                                                (decompose-equality
                                                                                                 +)
                                                                                                (("1"
                                                                                                  (grind)
                                                                                                  nil)))))))))))))))
                                                                                   ("2"
                                                                                    (propax)
                                                                                    nil)))))))))))))))))))))))))))))))))))))))
                                             ("2"
                                              (hide -1 4)
                                              (("2"
                                                (decompose-equality +)
                                                (("2"
                                                  (grind)
                                                  (("1"
                                                    (case
                                                     "x!1 = f(e!1)")
                                                    (("1"
                                                      (hide-all-but
                                                       (-1 -4 2))
                                                      (("1"
                                                        (typepred!
                                                         "leq")
                                                        (("1"
                                                          (grind)
                                                          nil)))))
                                                     ("2"
                                                      (lemma
                                                       "nonempty_card[below(S)]")
                                                      (("2"
                                                        (inst-cp
                                                         -
                                                         "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1}")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (skosimp*)
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (replace*)
                                                                nil)
                                                               ("2"
                                                                (inst
                                                                 -
                                                                 "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      nil)))))
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (use
                                                                     "finite_intersect")
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "LAMBDA (s: below(S)): f(s) = x!1"
                                                                       "S!1")
                                                                      (("2"
                                                                        (grind)
                                                                        nil)))))))))))))))
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (use
                                                             "finite_add")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "LAMBDA (s: below(S)): f(s) = x!1"
                                                               "S!1"
                                                               "e!1")
                                                              (("2"
                                                                (grind)
                                                                nil)))))))))))))
                                                   ("2"
                                                    (lemma
                                                     "nonempty_card[below(S)]")
                                                    (("2"
                                                      (inst-cp
                                                       -
                                                       "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (skosimp*)
                                                          (("1"
                                                            (inst
                                                             -
                                                             "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1}")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (assert)
                                                                  nil)))))
                                                             ("2"
                                                              (hide-all-but
                                                               1)
                                                              (("2"
                                                                (use
                                                                 "finite_add")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "LAMBDA (s: below(S)): f(s) = x!1"
                                                                   "S!1"
                                                                   "e!1")
                                                                  (("2"
                                                                    (grind)
                                                                    nil)))))))))))))
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (use
                                                           "finite_intersect")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "LAMBDA (s: below(S)): f(s) = x!1"
                                                             "S!1")
                                                            (("2"
                                                              (grind)
                                                              nil)))))))))))))))))))))
                                         ("2"
                                          (hide -1 4)
                                          (("2"
                                            (decompose-equality +)
                                            (("2"
                                              (grind)
                                              nil))))))))))))))))))))))))))))))))))))))))))
    nil)
   unfinished nil 632312 30410 t nil)
  (mid_val_u-6 nil 3287529218 3287749682
   ("" (skolem + ("f" "e" _ "t"))
    (("" (skosimp*)
      (("" (expand "middle_value")
        (("" (flatten)
          (("" (hide -3)
            (("" (use "card_make_bag")
              (("" (replace -1 :hide? t)
                ((""
                  (case-replace
                   "card(u_filter(make_bag(e, f), t)) = card(filter(leq)(e)(f)(s!1))")
                  (("" (hide -2 2)
                    (("" (expand "card")
                      (("" (typepred! "e")
                        (("" (replace -3 :hide? t)
                          ((""
                            (lemma "finite_set_ind_modified[below(S)]")
                            ((""
                              (inst -
                               "LAMBDA (ee: finite_set[below(S)]): sum(bag_to_set(u_filter(make_bag(ee, f), f(s!1))),
                                  LAMBDA (t: T): u_filter(make_bag(ee, f), f(s!1))(t))
                               = card(filter(leq)(ee)(f)(s!1))")
                              ((""
                                (split)
                                (("1" (inst?) nil)
                                 ("2"
                                  (hide 3)
                                  (("2"
                                    (expand "filter")
                                    (("2"
                                      (lemma "card_empty?[below(S)]")
                                      (("2"
                                        (inst?)
                                        (("1"
                                          (case
                                           "empty?[below(S)]
                                                                                                                             (LAMBDA (j: below(S)): emptyset(j) AND leq(f(j), f(s!1)))")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -2 :hide? t)
                                              (("1"
                                                (expand "bag_to_set")
                                                (("1"
                                                  (expand "make_bag")
                                                  (("1"
                                                    (expand "u_filter")
                                                    (("1"
                                                      (case
                                                       "{t: T |
                                                                                                                                                   IF leq(t, f(s!1))
                                                                                                                                                     THEN card({s: below(S) | emptyset(s) AND f(s) = t})
                                                                                                                                                   ELSE 0
                                                                                                                                                   ENDIF
                                                                                                                                                    > 0} = emptyset[T]")
                                                      (("1"
                                                        (replace

                                                         -1
                                                         :hide?

                                                         t)
                                                        (("1"
                                                          (use
                                                           "sum_emptyset[T,real,0,+]")
                                                          (("1"
                                                            (skosimp*)
                                                            (("1"
                                                              (use
                                                               "finite_empty")
                                                              nil)))))))
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (decompose-equality
                                                           +)
                                                          (("1"
                                                            (grind)
                                                            (("1"
                                                              (use
                                                               "card_emptyset[below(S)]")
                                                              (("1"
                                                                (expand
                                                                 "emptyset")
                                                                (("1"
                                                                  (assert)
                                                                  nil)))))))
                                                           ("2"
                                                            (skosimp*)
                                                            (("2"
                                                              (use
                                                               "finite_empty")
                                                              nil)))))))
                                                       ("3"
                                                        (skosimp*)
                                                        (("3"
                                                          (use
                                                           "finite_empty")
                                                          nil)))))))))))))))
                                           ("2"
                                            (hide 2 -1)
                                            (("2" (grind) nil)))))
                                         ("2"
                                          (use "finite_empty")
                                          nil)))))))))
                                 ("3"
                                  (skosimp*)
                                  (("3"
                                    (hide 4)
                                    (("3"
                                      (case "leq(f(s!1),f(e!1))")
                                      (("1"
                                        (case-replace
                                         "card(filter(leq)(add(e!1, S!1))(f)(s!1)) = card(filter(leq)(S!1)(f)(s!1)) + 1")
                                        (("1"
                                          (replace -3 :dir rl :hide? t)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (case
                                               "bag_to_set(u_filter(make_bag(S!1, f), f(s!1)))(f(e!1))")
                                              (("1"
                                                (case
                                                 "u_filter(make_bag(add(e!1, S!1), f), f(s!1))(f(e!1)) = u_filter(make_bag(S!1, f), f(s!1))(f(e!1)) + 1")
                                                (("1"
                                                  (lemma
                                                   "sum_x[T,real,0,+]")
                                                  (("1"
                                                    (inst-cp
                                                     -
                                                     "bag_to_set(u_filter(make_bag(add(e!1, S!1), f), f(s!1)))"
                                                     "LAMBDA (t: T): u_filter(make_bag(add(e!1, S!1), f), f(s!1))(t)"
                                                     "f(e!1)")
                                                    (("1"
                                                      (inst
                                                       -
                                                       "bag_to_set(u_filter(make_bag(S!1, f), f(s!1)))"
                                                       "LAMBDA (t: T): u_filter(make_bag(S!1, f), f(s!1))(t)"
                                                       "f(e!1)")
                                                      (("1"
                                                        (replace*)
                                                        (("1"
                                                          (hide
                                                           -1
                                                           -2
                                                           -3)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (lemma
                                                               "sum_particular2[T,real,0,+]")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "remove(f(e!1),
                                                                                                                                                                 bag_to_set(u_filter(make_bag(add(e!1, S!1), f), f(s!1))))"
                                                                 "LAMBDA (t: T): u_filter(make_bag(add(e!1, S!1), f), f(s!1))(t)"
                                                                 "f(e!1)")
                                                                (("1"
                                                                  (replace

                                                                   -
                                                                   :hide?

                                                                   t)
                                                                  (("1"
                                                                    (lift-if)
                                                                    (("1"
                                                                      (split)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (hide-all-but
                                                                           -1)
                                                                          (("1"
                                                                            (grind)
                                                                            nil)))))
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (hide
                                                                           1)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (name-replace
                                                                               "g"
                                                                               "LAMBDA (t: T): u_filter(make_bag(add(e!1, S!1), f), f(s!1))(t)")
                                                                              (("2"
                                                                                (case-replace
                                                                                 "remove(f(e!1),
                                                                                                                                                                                     bag_to_set(u_filter(make_bag(add(e!1, S!1), f), f(s!1)))) = remove(f(e!1), bag_to_set(u_filter(make_bag(S!1, f), f(s!1))))")
                                                                                (("1"
                                                                                  (hide
                                                                                   -1)
                                                                                  (("1"
                                                                                    (use
                                                                                     "sum_f_g[T,real,0,+]")
                                                                                    (("1"
                                                                                      (split)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil)
                                                                                       ("2"
                                                                                        (skosimp*)
                                                                                        (("2"
                                                                                          (hide
                                                                                           2)
                                                                                          (("2"
                                                                                            (lift-if)
                                                                                            (("2"
                                                                                              (typepred!
                                                                                               "x!1")
                                                                                              (("2"
                                                                                                (split)
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (grind)
                                                                                                    nil)))
                                                                                                 ("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (hide
                                                                                                     -4
                                                                                                     -5
                                                                                                     4)
                                                                                                    (("2"
                                                                                                      (grind)
                                                                                                      (("2"
                                                                                                        (case-replace
                                                                                                         "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1} = {s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                                        (("2"
                                                                                                          (hide
                                                                                                           3)
                                                                                                          (("2"
                                                                                                            (decompose-equality
                                                                                                             +)
                                                                                                            (("2"
                                                                                                              (grind)
                                                                                                              nil)))))))))))))))))))))))))))))
                                                                                 ("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (decompose-equality
                                                                                     +)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "remove")
                                                                                      (("2"
                                                                                        (iff)
                                                                                        (("2"
                                                                                          (prop)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "member")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "bag_to_set")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "u_filter")
                                                                                                (("1"
                                                                                                  (lift-if)
                                                                                                  (("1"
                                                                                                    (prop)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "make_bag")
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "nonempty_card[below(S)]")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "{s: below(S) | S!1(s) AND f(s) = f(e!1)}")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "nonempty?")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "empty?")
                                                                                                                (("1"
                                                                                                                  (skosimp*)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "member")
                                                                                                                    (("1"
                                                                                                                      (flatten)
                                                                                                                      (("1"
                                                                                                                        (lemma
                                                                                                                         "nonempty_card[below(S)]")
                                                                                                                        (("1"
                                                                                                                          (inst?)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "nonempty?")
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "empty?")
                                                                                                                                (("1"
                                                                                                                                  (skosimp*)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "member")
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "add")
                                                                                                                                      (("1"
                                                                                                                                        (flatten)
                                                                                                                                        (("1"
                                                                                                                                          (split)
                                                                                                                                          (("1"
                                                                                                                                            (lemma
                                                                                                                                             "nonempty_card[below(S)]")
                                                                                                                                            (("1"
                                                                                                                                              (inst
                                                                                                                                               -
                                                                                                                                               "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (use
                                                                                                                                                 "finite_intersect")
                                                                                                                                                nil)))))
                                                                                                                                           ("2"
                                                                                                                                            (expand
                                                                                                                                             "member")
                                                                                                                                            (("2"
                                                                                                                                              (lemma
                                                                                                                                               "nonempty_card[below(S)]")
                                                                                                                                              (("2"
                                                                                                                                                (inst
                                                                                                                                                 -
                                                                                                                                                 "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (grind)
                                                                                                                                                    nil)))
                                                                                                                                                 ("2"
                                                                                                                                                  (use
                                                                                                                                                   "finite_intersect")
                                                                                                                                                  nil)))))))))))))))))))))))
                                                                                                                           ("2"
                                                                                                                            (use
                                                                                                                             "finite_add")
                                                                                                                            nil)))))))))))))))))
                                                                                                           ("2"
                                                                                                            (use
                                                                                                             "finite_intersect")
                                                                                                            nil)))))))))))))))))
                                                                                           ("2"
                                                                                            (grind)
                                                                                            (("2"
                                                                                              (lemma
                                                                                               "nonempty_card[below(S)]")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -
                                                                                                 "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (skosimp*)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "nonempty_card[below(S)]")
                                                                                                      (("1"
                                                                                                        (inst?)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (inst?)
                                                                                                            (("1"
                                                                                                              (prop)
                                                                                                              nil)))))
                                                                                                         ("2"
                                                                                                          (hide-all-but
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (use
                                                                                                             "finite_add")
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "LAMBDA (s: below(S)): f(s) = x!1"
                                                                                                               "S!1"
                                                                                                               "e!1")
                                                                                                              (("2"
                                                                                                                (grind)
                                                                                                                nil)))))))))))))))
                                                                                                 ("2"
                                                                                                  (hide-all-but
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (use
                                                                                                     "finite_intersect")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "LAMBDA (s: below(S)): f(s) = x!1"
                                                                                                       "S!1")
                                                                                                      (("2"
                                                                                                        (grind)
                                                                                                        nil)))))))))))))))))))))))))))))))))))))))))))))))))))
                                                     ("2"
                                                      (hide -1 3)
                                                      (("2"
                                                        (expand
                                                         "bag_to_set")
                                                        (("2"
                                                          (expand
                                                           "u_filter")
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (prop)
                                                              (("2"
                                                                (expand
                                                                 "make_bag")
                                                                (("2"
                                                                  (lemma
                                                                   "nonempty_card[below(S)]")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "{s: below(S) | S!1(s) AND f(s) = f(e!1)}")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "nonempty?")
                                                                        (("1"
                                                                          (expand
                                                                           "empty?")
                                                                          (("1"
                                                                            (skosimp*)
                                                                            (("1"
                                                                              (expand
                                                                               "member")
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "nonempty_card[below(S)]")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "{s: below(S) | add[below(S)](e!1, S!1)(s) AND f(s) = f(e!1)}")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "nonempty?")
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil)))))
                                                                                     ("2"
                                                                                      (use
                                                                                       "finite_add")
                                                                                      nil)))))))))))))))))
                                                                     ("2"
                                                                      (use
                                                                       "finite_intersect")
                                                                      nil)))))))))))))))))))))
                                                 ("2"
                                                  (hide 3)
                                                  (("2"
                                                    (expand "u_filter")
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (split)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (expand
                                                             "make_bag")
                                                            (("1"
                                                              (case-replace
                                                               "{s: below(S) | add(e!1, S!1)(s) AND f(s) = f(e!1)} = add(e!1, {s: below(S) | S!1(s) AND f(s) = f(e!1)})")
                                                              (("1"
                                                                (lemma
                                                                 "card_add[below(S)]")
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "{s: below(S) | S!1(s) AND f(s) = f(e!1)}"
                                                                   "e!1")
                                                                  (("1"
                                                                    (replace

                                                                     -1)
                                                                    (("1"
                                                                      (assert)
                                                                      nil)))
                                                                   ("2"
                                                                    (use
                                                                     "finite_intersect")
                                                                    nil)))))
                                                               ("2"
                                                                (hide
                                                                 -2
                                                                 2)
                                                                (("2"
                                                                  (decompose-equality
                                                                   +)
                                                                  (("2"
                                                                    (grind)
                                                                    nil)))))))))))
                                                         ("2"
                                                          (flatten)
                                                          nil)))))))))))
                                               ("2"
                                                (lemma
                                                 "sum_x[T,real,0,+]")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (inst - "f(e!1)")
                                                    (("1"
                                                      (replace

                                                       -
                                                       :hide?

                                                       t)
                                                      (("1"
                                                        (case-replace
                                                         "remove(f(e!1),
                                                                                                                                bag_to_set(u_filter(make_bag(add(e!1, S!1), f),
                                                                                                                                                    f(s!1)))) = bag_to_set(u_filter(make_bag(S!1, f), f(s!1)))")
                                                        (("1"
                                                          (lemma
                                                           "sum_particular2[T,real,0,+]")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (replace

                                                                 -1
                                                                 :hide?

                                                                 t)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case
                                                                     "u_filter(make_bag(add(e!1, S!1), f), f(s!1))(f(e!1)) = 1")
                                                                    (("1"
                                                                      (replace

                                                                       -
                                                                       :hide?

                                                                       t)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (case-replace
                                                                           "(LAMBDA (t_1: T):
                                                                                                        IF t_1 = f(e!1) THEN 0
                                                                                                        ELSE u_filter(make_bag(add(e!1, S!1), f), f(s!1))(t_1)
                                                                                                        ENDIF) = LAMBDA (t: T): u_filter(make_bag(S!1, f), f(s!1))(t)")
                                                                          (("1"
                                                                            (hide
                                                                             4)
                                                                            (("1"
                                                                              (decompose-equality
                                                                               +)
                                                                              (("1"
                                                                                (lift-if)
                                                                                (("1"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "bag_to_set")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil)))))
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (hide
                                                                                       -1)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "bag_to_set")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "u_filter")
                                                                                          (("2"
                                                                                            (lift-if)
                                                                                            (("2"
                                                                                              (split)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "make_bag")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "add")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "member")
                                                                                                      (("1"
                                                                                                        (case-replace
                                                                                                         "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1} = {s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           2)
                                                                                                          (("1"
                                                                                                            (decompose-equality
                                                                                                             +)
                                                                                                            (("1"
                                                                                                              (grind)
                                                                                                              nil)))))))))))))))
                                                                                               ("2"
                                                                                                (propax)
                                                                                                nil)))))))))))))))))))))))))))
                                                                     ("2"
                                                                      (hide
                                                                       -1
                                                                       4)
                                                                      (("2"
                                                                        (expand
                                                                         "bag_to_set")
                                                                        (("2"
                                                                          (expand
                                                                           "u_filter")
                                                                          (("2"
                                                                            (expand
                                                                             "make_bag")
                                                                            (("2"
                                                                              (lemma
                                                                               "nonempty_card[below(S)]")
                                                                              (("2"
                                                                                (inst
                                                                                 -
                                                                                 "{s: below(S) | S!1(s) AND f(s) = f(e!1)}")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "nonempty?")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "empty?")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "member")
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "card_one[below(S)]")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -
                                                                                             "{s: below(S) | add(e!1, S!1)(s) AND f(s) = f(e!1)}")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (inst?)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "singleton")
                                                                                                  (("1"
                                                                                                    (decompose-equality
                                                                                                     +)
                                                                                                    (("1"
                                                                                                      (grind)
                                                                                                      nil)))))))))
                                                                                             ("2"
                                                                                              (use
                                                                                               "finite_add")
                                                                                              nil)))))))))))))
                                                                                 ("2"
                                                                                  (use
                                                                                   "finite_intersect")
                                                                                  nil)))))))))))))))))))))))))
                                                         ("2"
                                                          (hide 4)
                                                          (("2"
                                                            (decompose-equality
                                                             +)
                                                            (("2"
                                                              (iff)
                                                              (("2"
                                                                (grind)
                                                                (("1"
                                                                  (lemma
                                                                   "nonempty_card[below(S)]")
                                                                  (("1"
                                                                    (inst-cp
                                                                     -
                                                                     "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1}")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (skosimp*)
                                                                        (("1"
                                                                          (split)
                                                                          (("1"
                                                                            (replace*)
                                                                            nil)
                                                                           ("2"
                                                                            (inst
                                                                             -
                                                                             "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil)
                                                                                   ("2"
                                                                                    (propax)
                                                                                    nil)))))))
                                                                             ("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (use
                                                                                 "finite_intersect")
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "LAMBDA (s: below(S)): f(s) = x!1"
                                                                                   "S!1")
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil)))))))))))))))
                                                                     ("2"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("2"
                                                                        (use
                                                                         "finite_add")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "LAMBDA (s: below(S)): f(s) = x!1"
                                                                           "S!1"
                                                                           "e!1")
                                                                          (("2"
                                                                            (grind)
                                                                            nil)))))))))))
                                                                 ("2"
                                                                  (lemma
                                                                   "nonempty_card[below(S)]")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (skosimp*)
                                                                        (("1"
                                                                          (lemma
                                                                           "nonempty_card[below(S)]")
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1}")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (prop)
                                                                                  nil)))))
                                                                             ("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (use
                                                                                 "finite_add")
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "LAMBDA (s: below(S)): f(s) = x!1"
                                                                                   "S!1"
                                                                                   "e!1")
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil)))))))))))))))
                                                                     ("2"
                                                                      (use
                                                                       "finite_intersect")
                                                                      (("2"
                                                                        (grind)
                                                                        nil)))))))))))))))))))
                                                     ("2"
                                                      (hide 4)
                                                      (("2"
                                                        (grind)
                                                        (("2"
                                                          (lemma
                                                           "nonempty_card[below(S)]")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = f(e!1)}")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst?)
                                                                nil)))
                                                             ("2"
                                                              (hide-all-but
                                                               1)
                                                              (("2"
                                                                (use
                                                                 "finite_add")
                                                                (("2"
                                                                  (grind)
                                                                  nil)))))))))))))))))))))))))
                                         ("2"
                                          (hide -2 3)
                                          (("2"
                                            (expand "filter")
                                            (("2"
                                              (expand "add")
                                              (("2"
                                                (expand "member")
                                                (("2"
                                                  (case-replace
                                                   "(LAMBDA (j: below(S)): (e!1 = j OR S!1(j)) AND leq(f(j), f(s!1))) = add(e!1, LAMBDA (j: below(S)): S!1(j) AND leq(f(j), f(s!1)))")
                                                  (("1"
                                                    (lemma
                                                     "card_add[below(S)]")
                                                    (("1"
                                                      (inst
                                                       -
                                                       "LAMBDA (j: below(S)): S!1(j) AND leq(f(j), f(s!1))"
                                                       "e!1")
                                                      (("1"
                                                        (replace -)
                                                        (("1"
                                                          (assert)
                                                          nil)))
                                                       ("2"
                                                        (use
                                                         "finite_intersect")
                                                        nil)))))
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (decompose-equality
                                                       +)
                                                      (("2"
                                                        (grind)
                                                        nil)))))))))))))))))
                                       ("2"
                                        (case-replace
                                         "filter(leq)(add(e!1, S!1))(f)(s!1) = filter(leq)(S!1)(f)(s!1)")
                                        (("1"
                                          (replace -2 :dir rl :hide? t)
                                          (("1"
                                            (case-replace
                                             "bag_to_set(u_filter(make_bag(add(e!1, S!1), f), f(s!1))) = bag_to_set(u_filter(make_bag(S!1, f), f(s!1)))")
                                            (("1"
                                              (lemma
                                               "sum_particular2[T,real,0,+]")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (inst - "f(e!1)")
                                                  (("1"
                                                    (replace

                                                     -1
                                                     :hide?

                                                     t)
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (case-replace
                                                             "u_filter(make_bag(add(e!1, S!1), f), f(s!1))(f(e!1)) = 0")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (hide
                                                                 -2
                                                                 -3
                                                                 -4)
                                                                (("1"
                                                                  (case-replace
                                                                   "(LAMBDA (t_1: T):
                                                                                  IF t_1 = f(e!1) THEN 0
                                                                                  ELSE u_filter(make_bag(add(e!1, S!1), f), f(s!1))(t_1)
                                                                                  ENDIF) = LAMBDA (t: T): u_filter(make_bag(S!1, f), f(s!1))(t)")
                                                                  (("1"
                                                                    (hide
                                                                     2)
                                                                    (("1"
                                                                      (decompose-equality
                                                                       +)
                                                                      (("1"
                                                                        (lift-if)
                                                                        (("1"
                                                                          (split)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (grind)
                                                                              nil)))
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (expand
                                                                               "u_filter")
                                                                              (("2"
                                                                                (lift-if)
                                                                                (("2"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "make_bag")
                                                                                      (("1"
                                                                                        (case-replace
                                                                                         "{s: below(S) | add(e!1, S!1)(s) AND f(s) = x!1} = {s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                        (("1"
                                                                                          (hide
                                                                                           2)
                                                                                          (("1"
                                                                                            (decompose-equality
                                                                                             +)
                                                                                            (("1"
                                                                                              (iff)
                                                                                              (("1"
                                                                                                (grind)
                                                                                                nil)))))))))))))
                                                                                   ("2"
                                                                                    (propax)
                                                                                    nil)))))))))))))))))))))))
                                                             ("2"
                                                              (hide
                                                               -1
                                                               -2
                                                               -3
                                                               2)
                                                              (("2"
                                                                (grind)
                                                                nil)))))))
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (case-replace
                                                               "(LAMBDA (t_1: T):
                                                                        IF t_1 = f(e!1) THEN 0
                                                                        ELSE u_filter(make_bag(add(e!1, S!1), f), f(s!1))(t_1)
                                                                        ENDIF) = LAMBDA (t: T): u_filter(make_bag(S!1, f), f(s!1))(t)")
                                                              (("2"
                                                                (hide
                                                                 3)
                                                                (("2"
                                                                  (decompose-equality
                                                                   +)
                                                                  (("2"
                                                                    (lift-if)
                                                                    (("2"
                                                                      (split)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (expand
                                                                           "bag_to_set")
                                                                          (("1"
                                                                            (assert)
                                                                            nil)))))
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (hide
                                                                           -1
                                                                           -2)
                                                                          (("2"
                                                                            (expand
                                                                             "bag_to_set")
                                                                            (("2"
                                                                              (expand
                                                                               "u_filter")
                                                                              (("2"
                                                                                (lift-if)
                                                                                (("2"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "make_bag")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "add")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "member")
                                                                                          (("1"
                                                                                            (case-replace
                                                                                             "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1} = {s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                            (("1"
                                                                                              (hide
                                                                                               2)
                                                                                              (("1"
                                                                                                (decompose-equality
                                                                                                 +)
                                                                                                (("1"
                                                                                                  (grind)
                                                                                                  nil)))))))))))))))
                                                                                   ("2"
                                                                                    (propax)
                                                                                    nil)))))))))))))))))))))))))))))))))))))))
                                             ("2"
                                              (hide -1 4)
                                              (("2"
                                                (decompose-equality +)
                                                (("2"
                                                  (grind)
                                                  (("1"
                                                    (case
                                                     "x!1 = f(e!1)")
                                                    (("1"
                                                      (hide-all-but
                                                       (-1 -4 2))
                                                      (("1"
                                                        (typepred!
                                                         "leq")
                                                        (("1"
                                                          (grind)
                                                          nil)))))
                                                     ("2"
                                                      (lemma
                                                       "nonempty_card[below(S)]")
                                                      (("2"
                                                        (inst-cp
                                                         -
                                                         "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1}")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (skosimp*)
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (replace*)
                                                                nil)
                                                               ("2"
                                                                (inst
                                                                 -
                                                                 "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      nil)))))
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (use
                                                                     "finite_intersect")
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "LAMBDA (s: below(S)): f(s) = x!1"
                                                                       "S!1")
                                                                      (("2"
                                                                        (grind)
                                                                        nil)))))))))))))))
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (use
                                                             "finite_add")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "LAMBDA (s: below(S)): f(s) = x!1"
                                                               "S!1"
                                                               "e!1")
                                                              (("2"
                                                                (grind)
                                                                nil)))))))))))))
                                                   ("2"
                                                    (lemma
                                                     "nonempty_card[below(S)]")
                                                    (("2"
                                                      (inst-cp
                                                       -
                                                       "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (skosimp*)
                                                          (("1"
                                                            (inst
                                                             -
                                                             "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1}")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (assert)
                                                                  nil)))))
                                                             ("2"
                                                              (hide-all-but
                                                               1)
                                                              (("2"
                                                                (use
                                                                 "finite_add")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "LAMBDA (s: below(S)): f(s) = x!1"
                                                                   "S!1"
                                                                   "e!1")
                                                                  (("2"
                                                                    (grind)
                                                                    nil)))))))))))))
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (use
                                                           "finite_intersect")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "LAMBDA (s: below(S)): f(s) = x!1"
                                                             "S!1")
                                                            (("2"
                                                              (grind)
                                                              nil)))))))))))))))))))))
                                         ("2"
                                          (hide -1 4)
                                          (("2"
                                            (decompose-equality +)
                                            (("2"
                                              (grind)
                                              nil))))))))))))))))))))))))))))))))))))))))))
    nil)
   unfinished nil 1418601 89620 t nil)
  (mid_val_u-5 nil 3287526869 3287529085
   ("" (skolem + ("f" "e" _ "t"))
    (("" (skosimp*)
      (("" (expand "middle_value")
        (("" (flatten)
          (("" (hide -3)
            (("" (use "card_make_bag")
              (("" (replace -1 :hide? t)
                ((""
                  (case-replace
                   "card(u_filter(make_bag(e, f), t)) = card(filter(leq)(e)(f)(s!1))")
                  (("" (hide -2 2)
                    (("" (expand "card")
                      (("" (typepred! "e")
                        (("" (replace -3 :hide? t)
                          ((""
                            (lemma "finite_set_ind_modified[below(S)]")
                            ((""
                              (inst -
                               "LAMBDA (ee: finite_set[below(S)]): sum(bag_to_set(u_filter(make_bag(ee, f), f(s!1))),
                                LAMBDA (t: T): u_filter(make_bag(ee, f), f(s!1))(t))
                             = card(filter(leq)(ee)(f)(s!1))")
                              ((""
                                (split)
                                (("1" (inst?) nil)
                                 ("2"
                                  (hide 3)
                                  (("2"
                                    (expand "filter")
                                    (("2"
                                      (lemma "card_empty?[below(S)]")
                                      (("2"
                                        (inst?)
                                        (("1"
                                          (case
                                           "empty?[below(S)]
                                                                                                                  (LAMBDA (j: below(S)): emptyset(j) AND leq(f(j), f(s!1)))")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -2 :hide? t)
                                              (("1"
                                                (expand "bag_to_set")
                                                (("1"
                                                  (expand "make_bag")
                                                  (("1"
                                                    (expand "u_filter")
                                                    (("1"
                                                      (case
                                                       "{t: T |
                                                                                                                                      IF leq(f(s!1), t)
                                                                                                                                        THEN card({s: below(S) | emptyset(s) AND f(s) = t})
                                                                                                                                      ELSE 0
                                                                                                                                      ENDIF
                                                                                                                                       > 0} = emptyset[T]")
                                                      (("1"
                                                        (replace

                                                         -1
                                                         :hide?

                                                         t)
                                                        (("1"
                                                          (use
                                                           "sum_emptyset[T,real,0,+]")
                                                          (("1"
                                                            (skosimp*)
                                                            (("1"
                                                              (use
                                                               "finite_empty")
                                                              nil)))))))
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (decompose-equality
                                                           +)
                                                          (("1"
                                                            (grind)
                                                            (("1"
                                                              (use
                                                               "card_emptyset[below(S)]")
                                                              (("1"
                                                                (expand
                                                                 "emptyset")
                                                                (("1"
                                                                  (assert)
                                                                  nil)))))))
                                                           ("2"
                                                            (skosimp*)
                                                            (("2"
                                                              (use
                                                               "finite_empty")
                                                              nil)))))))
                                                       ("3"
                                                        (skosimp*)
                                                        (("3"
                                                          (use
                                                           "finite_empty")
                                                          nil)))))))))))))))
                                           ("2"
                                            (hide 2 -1)
                                            (("2" (grind) nil)))))
                                         ("2"
                                          (use "finite_empty")
                                          nil)))))))))
                                 ("3"
                                  (skosimp*)
                                  (("3"
                                    (hide 4)
                                    (("3"
                                      (case "leq(f(e!1),f(s!1))")
                                      (("1"
                                        (case-replace
                                         "card(filter(leq)(add(e!1, S!1))(f)(s!1)) = card(filter(leq)(S!1)(f)(s!1)) + 1")
                                        (("1"
                                          (replace -3 :dir rl :hide? t)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (case
                                               "bag_to_set(u_filter(make_bag(S!1, f), f(s!1)))(f(e!1))")
                                              (("1"
                                                (case
                                                 "u_filter(make_bag(add(e!1, S!1), f), f(s!1))(f(e!1)) = u_filter(make_bag(S!1, f), f(s!1))(f(e!1)) + 1")
                                                (("1"
                                                  (lemma
                                                   "sum_x[T,real,0,+]")
                                                  (("1"
                                                    (inst-cp
                                                     -
                                                     "bag_to_set(u_filter(make_bag(add(e!1, S!1), f), f(s!1)))"
                                                     "LAMBDA (t: T): u_filter(make_bag(add(e!1, S!1), f), f(s!1))(t)"
                                                     "f(e!1)")
                                                    (("1"
                                                      (inst
                                                       -
                                                       "bag_to_set(u_filter(make_bag(S!1, f), f(s!1)))"
                                                       "LAMBDA (t: T): u_filter(make_bag(S!1, f), f(s!1))(t)"
                                                       "f(e!1)")
                                                      (("1"
                                                        (replace*)
                                                        (("1"
                                                          (hide
                                                           -1
                                                           -2
                                                           -3)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (lemma
                                                               "sum_particular2[T,real,0,+]")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "remove(f(e!1),
                                                                                                                                                   bag_to_set(u_filter(make_bag(add(e!1, S!1), f), f(s!1))))"
                                                                 "LAMBDA (t: T): u_filter(make_bag(add(e!1, S!1), f), f(s!1))(t)"
                                                                 "f(e!1)")
                                                                (("1"
                                                                  (replace

                                                                   -
                                                                   :hide?

                                                                   t)
                                                                  (("1"
                                                                    (lift-if)
                                                                    (("1"
                                                                      (split)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (hide-all-but
                                                                           -1)
                                                                          (("1"
                                                                            (grind)
                                                                            nil)))))
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (hide
                                                                           1)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (name-replace
                                                                               "g"
                                                                               "LAMBDA (t: T): u_filter(make_bag(add(e!1, S!1), f), f(s!1))(t)")
                                                                              (("2"
                                                                                (case-replace
                                                                                 "remove(f(e!1),
                                                                                                                                                                     bag_to_set(u_filter(make_bag(add(e!1, S!1), f), f(s!1)))) = remove(f(e!1), bag_to_set(u_filter(make_bag(S!1, f), f(s!1))))")
                                                                                (("1"
                                                                                  (hide
                                                                                   -1)
                                                                                  (("1"
                                                                                    (use
                                                                                     "sum_f_g[T,real,0,+]")
                                                                                    (("1"
                                                                                      (split)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil)
                                                                                       ("2"
                                                                                        (skosimp*)
                                                                                        (("2"
                                                                                          (hide
                                                                                           2)
                                                                                          (("2"
                                                                                            (lift-if)
                                                                                            (("2"
                                                                                              (typepred!
                                                                                               "x!1")
                                                                                              (("2"
                                                                                                (split)
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (grind)
                                                                                                    nil)))
                                                                                                 ("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (hide
                                                                                                     -4
                                                                                                     -5
                                                                                                     4)
                                                                                                    (("2"
                                                                                                      (grind)
                                                                                                      (("2"
                                                                                                        (case-replace
                                                                                                         "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1} = {s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                                        (("2"
                                                                                                          (hide
                                                                                                           3)
                                                                                                          (("2"
                                                                                                            (decompose-equality
                                                                                                             +)
                                                                                                            (("2"
                                                                                                              (grind)
                                                                                                              nil)))))))))))))))))))))))))))))
                                                                                 ("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (decompose-equality
                                                                                     +)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "remove")
                                                                                      (("2"
                                                                                        (iff)
                                                                                        (("2"
                                                                                          (prop)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "member")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "bag_to_set")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "u_filter")
                                                                                                (("1"
                                                                                                  (lift-if)
                                                                                                  (("1"
                                                                                                    (prop)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "make_bag")
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "nonempty_card[below(S)]")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "{s: below(S) | S!1(s) AND f(s) = f(e!1)}")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "nonempty?")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "empty?")
                                                                                                                (("1"
                                                                                                                  (skosimp*)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "member")
                                                                                                                    (("1"
                                                                                                                      (flatten)
                                                                                                                      (("1"
                                                                                                                        (lemma
                                                                                                                         "nonempty_card[below(S)]")
                                                                                                                        (("1"
                                                                                                                          (inst?)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "nonempty?")
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "empty?")
                                                                                                                                (("1"
                                                                                                                                  (skosimp*)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "member")
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "add")
                                                                                                                                      (("1"
                                                                                                                                        (flatten)
                                                                                                                                        (("1"
                                                                                                                                          (split)
                                                                                                                                          (("1"
                                                                                                                                            (lemma
                                                                                                                                             "nonempty_card[below(S)]")
                                                                                                                                            (("1"
                                                                                                                                              (inst
                                                                                                                                               -
                                                                                                                                               "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (use
                                                                                                                                                 "finite_intersect")
                                                                                                                                                nil)))))
                                                                                                                                           ("2"
                                                                                                                                            (expand
                                                                                                                                             "member")
                                                                                                                                            (("2"
                                                                                                                                              (lemma
                                                                                                                                               "nonempty_card[below(S)]")
                                                                                                                                              (("2"
                                                                                                                                                (inst
                                                                                                                                                 -
                                                                                                                                                 "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (grind)
                                                                                                                                                    nil)))
                                                                                                                                                 ("2"
                                                                                                                                                  (use
                                                                                                                                                   "finite_intersect")
                                                                                                                                                  nil)))))))))))))))))))))))
                                                                                                                           ("2"
                                                                                                                            (use
                                                                                                                             "finite_add")
                                                                                                                            nil)))))))))))))))))
                                                                                                           ("2"
                                                                                                            (use
                                                                                                             "finite_intersect")
                                                                                                            nil)))))))))))))))))
                                                                                           ("2"
                                                                                            (grind)
                                                                                            (("2"
                                                                                              (lemma
                                                                                               "nonempty_card[below(S)]")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -
                                                                                                 "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (skosimp*)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "nonempty_card[below(S)]")
                                                                                                      (("1"
                                                                                                        (inst?)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (inst?)
                                                                                                            (("1"
                                                                                                              (prop)
                                                                                                              nil)))))
                                                                                                         ("2"
                                                                                                          (hide-all-but
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (use
                                                                                                             "finite_add")
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "LAMBDA (s: below(S)): f(s) = x!1"
                                                                                                               "S!1"
                                                                                                               "e!1")
                                                                                                              (("2"
                                                                                                                (grind)
                                                                                                                nil)))))))))))))))
                                                                                                 ("2"
                                                                                                  (hide-all-but
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (use
                                                                                                     "finite_intersect")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "LAMBDA (s: below(S)): f(s) = x!1"
                                                                                                       "S!1")
                                                                                                      (("2"
                                                                                                        (grind)
                                                                                                        nil)))))))))))))))))))))))))))))))))))))))))))))))))))
                                                     ("2"
                                                      (hide -1 3)
                                                      (("2"
                                                        (expand
                                                         "bag_to_set")
                                                        (("2"
                                                          (expand
                                                           "u_filter")
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (prop)
                                                              (("2"
                                                                (expand
                                                                 "make_bag")
                                                                (("2"
                                                                  (lemma
                                                                   "nonempty_card[below(S)]")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "{s: below(S) | S!1(s) AND f(s) = f(e!1)}")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "nonempty?")
                                                                        (("1"
                                                                          (expand
                                                                           "empty?")
                                                                          (("1"
                                                                            (skosimp*)
                                                                            (("1"
                                                                              (expand
                                                                               "member")
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "nonempty_card[below(S)]")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "{s: below(S) | add[below(S)](e!1, S!1)(s) AND f(s) = f(e!1)}")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "nonempty?")
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil)))))
                                                                                     ("2"
                                                                                      (use
                                                                                       "finite_add")
                                                                                      nil)))))))))))))))))
                                                                     ("2"
                                                                      (use
                                                                       "finite_intersect")
                                                                      nil)))))))))))))))))))))
                                                 ("2"
                                                  (hide 3)
                                                  (("2"
                                                    (expand "u_filter")
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (split)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (expand
                                                             "make_bag")
                                                            (("1"
                                                              (case-replace
                                                               "{s: below(S) | add(e!1, S!1)(s) AND f(s) = f(e!1)} = add(e!1, {s: below(S) | S!1(s) AND f(s) = f(e!1)})")
                                                              (("1"
                                                                (lemma
                                                                 "card_add[below(S)]")
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "{s: below(S) | S!1(s) AND f(s) = f(e!1)}"
                                                                   "e!1")
                                                                  (("1"
                                                                    (replace

                                                                     -1)
                                                                    (("1"
                                                                      (assert)
                                                                      nil)))
                                                                   ("2"
                                                                    (use
                                                                     "finite_intersect")
                                                                    nil)))))
                                                               ("2"
                                                                (hide
                                                                 -2
                                                                 2)
                                                                (("2"
                                                                  (decompose-equality
                                                                   +)
                                                                  (("2"
                                                                    (grind)
                                                                    nil)))))))))))
                                                         ("2"
                                                          (flatten)
                                                          nil)))))))))))
                                               ("2"
                                                (lemma
                                                 "sum_x[T,real,0,+]")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (inst - "f(e!1)")
                                                    (("1"
                                                      (replace

                                                       -
                                                       :hide?

                                                       t)
                                                      (("1"
                                                        (case-replace
                                                         "remove(f(e!1),
                                                                                                                    bag_to_set(u_filter(make_bag(add(e!1, S!1), f),
                                                                                                                                        f(s!1)))) = bag_to_set(u_filter(make_bag(S!1, f), f(s!1)))")
                                                        (("1"
                                                          (lemma
                                                           "sum_particular2[T,real,0,+]")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (replace

                                                                 -1
                                                                 :hide?

                                                                 t)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case
                                                                     "u_filter(make_bag(add(e!1, S!1), f), f(s!1))(f(e!1)) = 1")
                                                                    (("1"
                                                                      (replace

                                                                       -
                                                                       :hide?

                                                                       t)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (case-replace
                                                                           "(LAMBDA (t_1: T):
                                                                                        IF t_1 = f(e!1) THEN 0
                                                                                        ELSE u_filter(make_bag(add(e!1, S!1), f), f(s!1))(t_1)
                                                                                        ENDIF) = LAMBDA (t: T): u_filter(make_bag(S!1, f), f(s!1))(t)")
                                                                          (("1"
                                                                            (hide
                                                                             4)
                                                                            (("1"
                                                                              (decompose-equality
                                                                               +)
                                                                              (("1"
                                                                                (lift-if)
                                                                                (("1"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "bag_to_set")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil)))))
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (hide
                                                                                       -1)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "bag_to_set")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "u_filter")
                                                                                          (("2"
                                                                                            (lift-if)
                                                                                            (("2"
                                                                                              (split)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "make_bag")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "add")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "member")
                                                                                                      (("1"
                                                                                                        (case-replace
                                                                                                         "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1} = {s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           2)
                                                                                                          (("1"
                                                                                                            (decompose-equality
                                                                                                             +)
                                                                                                            (("1"
                                                                                                              (grind)
                                                                                                              nil)))))))))))))))
                                                                                               ("2"
                                                                                                (propax)
                                                                                                nil)))))))))))))))))))))))))))
                                                                     ("2"
                                                                      (hide
                                                                       -1
                                                                       4)
                                                                      (("2"
                                                                        (expand
                                                                         "bag_to_set")
                                                                        (("2"
                                                                          (expand
                                                                           "u_filter")
                                                                          (("2"
                                                                            (expand
                                                                             "make_bag")
                                                                            (("2"
                                                                              (lemma
                                                                               "nonempty_card[below(S)]")
                                                                              (("2"
                                                                                (inst
                                                                                 -
                                                                                 "{s: below(S) | S!1(s) AND f(s) = f(e!1)}")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "nonempty?")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "empty?")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "member")
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "card_one[below(S)]")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -
                                                                                             "{s: below(S) | add(e!1, S!1)(s) AND f(s) = f(e!1)}")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (inst?)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "singleton")
                                                                                                  (("1"
                                                                                                    (decompose-equality
                                                                                                     +)
                                                                                                    (("1"
                                                                                                      (grind)
                                                                                                      nil)))))))))
                                                                                             ("2"
                                                                                              (use
                                                                                               "finite_add")
                                                                                              nil)))))))))))))
                                                                                 ("2"
                                                                                  (use
                                                                                   "finite_intersect")
                                                                                  nil)))))))))))))))))))))))))
                                                         ("2"
                                                          (hide 4)
                                                          (("2"
                                                            (decompose-equality
                                                             +)
                                                            (("2"
                                                              (iff)
                                                              (("2"
                                                                (grind)
                                                                (("1"
                                                                  (lemma
                                                                   "nonempty_card[below(S)]")
                                                                  (("1"
                                                                    (inst-cp
                                                                     -
                                                                     "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1}")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (skosimp*)
                                                                        (("1"
                                                                          (split)
                                                                          (("1"
                                                                            (replace*)
                                                                            nil)
                                                                           ("2"
                                                                            (inst
                                                                             -
                                                                             "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil)
                                                                                   ("2"
                                                                                    (propax)
                                                                                    nil)))))))
                                                                             ("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (use
                                                                                 "finite_intersect")
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "LAMBDA (s: below(S)): f(s) = x!1"
                                                                                   "S!1")
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil)))))))))))))))
                                                                     ("2"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("2"
                                                                        (use
                                                                         "finite_add")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "LAMBDA (s: below(S)): f(s) = x!1"
                                                                           "S!1"
                                                                           "e!1")
                                                                          (("2"
                                                                            (grind)
                                                                            nil)))))))))))
                                                                 ("2"
                                                                  (lemma
                                                                   "nonempty_card[below(S)]")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (skosimp*)
                                                                        (("1"
                                                                          (lemma
                                                                           "nonempty_card[below(S)]")
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1}")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (prop)
                                                                                  nil)))))
                                                                             ("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (use
                                                                                 "finite_add")
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "LAMBDA (s: below(S)): f(s) = x!1"
                                                                                   "S!1"
                                                                                   "e!1")
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil)))))))))))))))
                                                                     ("2"
                                                                      (use
                                                                       "finite_intersect")
                                                                      (("2"
                                                                        (grind)
                                                                        nil)))))))))))))))))))
                                                     ("2"
                                                      (hide 4)
                                                      (("2"
                                                        (grind)
                                                        (("2"
                                                          (lemma
                                                           "nonempty_card[below(S)]")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = f(e!1)}")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst?)
                                                                nil)))
                                                             ("2"
                                                              (hide-all-but
                                                               1)
                                                              (("2"
                                                                (use
                                                                 "finite_add")
                                                                (("2"
                                                                  (grind)
                                                                  nil)))))))))))))))))))))))))
                                         ("2"
                                          (hide -2 3)
                                          (("2"
                                            (expand "filter")
                                            (("2"
                                              (expand "add")
                                              (("2"
                                                (expand "member")
                                                (("2"
                                                  (case-replace
                                                   "(LAMBDA (j: below(S)): (e!1 = j OR S!1(j)) AND leq(f(j), f(s!1))) = add(e!1, LAMBDA (j: below(S)): S!1(j) AND leq(f(j), f(s!1)))")
                                                  (("1"
                                                    (lemma
                                                     "card_add[below(S)]")
                                                    (("1"
                                                      (inst
                                                       -
                                                       "LAMBDA (j: below(S)): S!1(j) AND leq(f(j), f(s!1))"
                                                       "e!1")
                                                      (("1"
                                                        (replace -)
                                                        (("1"
                                                          (assert)
                                                          nil)))
                                                       ("2"
                                                        (use
                                                         "finite_intersect")
                                                        nil)))))
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (decompose-equality
                                                       +)
                                                      (("2"
                                                        (grind)
                                                        nil)))))))))))))))))
                                       ("2"
                                        (case-replace
                                         "filter(leq)(add(e!1, S!1))(f)(s!1) = filter(leq)(S!1)(f)(s!1)")
                                        (("1"
                                          (replace -2 :dir rl :hide? t)
                                          (("1"
                                            (case-replace
                                             "bag_to_set(u_filter(make_bag(add(e!1, S!1), f), f(s!1))) = bag_to_set(u_filter(make_bag(S!1, f), f(s!1)))")
                                            (("1"
                                              (lemma
                                               "sum_particular2[T,real,0,+]")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (inst - "f(e!1)")
                                                  (("1"
                                                    (replace

                                                     -1
                                                     :hide?

                                                     t)
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (case-replace
                                                             "u_filter(make_bag(add(e!1, S!1), f), f(s!1))(f(e!1)) = 0")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (hide
                                                                 -2
                                                                 -3
                                                                 -4)
                                                                (("1"
                                                                  (case-replace
                                                                   "(LAMBDA (t_1: T):
                                                                    IF t_1 = f(e!1) THEN 0
                                                                    ELSE u_filter(make_bag(add(e!1, S!1), f), f(s!1))(t_1)
                                                                    ENDIF) = LAMBDA (t: T): u_filter(make_bag(S!1, f), f(s!1))(t)")
                                                                  (("1"
                                                                    (hide
                                                                     2)
                                                                    (("1"
                                                                      (decompose-equality
                                                                       +)
                                                                      (("1"
                                                                        (lift-if)
                                                                        (("1"
                                                                          (split)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (grind)
                                                                              nil)))
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (expand
                                                                               "u_filter")
                                                                              (("2"
                                                                                (lift-if)
                                                                                (("2"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "make_bag")
                                                                                      (("1"
                                                                                        (case-replace
                                                                                         "{s: below(S) | add(e!1, S!1)(s) AND f(s) = x!1} = {s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                        (("1"
                                                                                          (hide
                                                                                           2)
                                                                                          (("1"
                                                                                            (decompose-equality
                                                                                             +)
                                                                                            (("1"
                                                                                              (iff)
                                                                                              (("1"
                                                                                                (grind)
                                                                                                nil)))))))))))))
                                                                                   ("2"
                                                                                    (propax)
                                                                                    nil)))))))))))))))))))))))
                                                             ("2"
                                                              (hide
                                                               -1
                                                               -2
                                                               -3
                                                               2)
                                                              (("2"
                                                                (grind)
                                                                nil)))))))
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (case-replace
                                                               "(LAMBDA (t_1: T):
                                                            IF t_1 = f(e!1) THEN 0
                                                            ELSE u_filter(make_bag(add(e!1, S!1), f), f(s!1))(t_1)
                                                            ENDIF) = LAMBDA (t: T): u_filter(make_bag(S!1, f), f(s!1))(t)")
                                                              (("2"
                                                                (hide
                                                                 3)
                                                                (("2"
                                                                  (decompose-equality
                                                                   +)
                                                                  (("2"
                                                                    (lift-if)
                                                                    (("2"
                                                                      (split)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (expand
                                                                           "bag_to_set")
                                                                          (("1"
                                                                            (assert)
                                                                            nil)))))
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (hide
                                                                           -1
                                                                           -2)
                                                                          (("2"
                                                                            (expand
                                                                             "bag_to_set")
                                                                            (("2"
                                                                              (expand
                                                                               "u_filter")
                                                                              (("2"
                                                                                (lift-if)
                                                                                (("2"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "make_bag")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "add")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "member")
                                                                                          (("1"
                                                                                            (case-replace
                                                                                             "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1} = {s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                            (("1"
                                                                                              (hide
                                                                                               2)
                                                                                              (("1"
                                                                                                (decompose-equality
                                                                                                 +)
                                                                                                (("1"
                                                                                                  (grind)
                                                                                                  nil)))))))))))))))
                                                                                   ("2"
                                                                                    (propax)
                                                                                    nil)))))))))))))))))))))))))))))))))))))))
                                             ("2"
                                              (hide -1 4)
                                              (("2"
                                                (decompose-equality +)
                                                (("2"
                                                  (grind)
                                                  (("1"
                                                    (case
                                                     "x!1 = f(e!1)")
                                                    (("1"
                                                      (hide-all-but
                                                       (-1 -4 2))
                                                      (("1"
                                                        (typepred!
                                                         "leq")
                                                        (("1"
                                                          (grind)
                                                          nil)))))
                                                     ("2"
                                                      (lemma
                                                       "nonempty_card[below(S)]")
                                                      (("2"
                                                        (inst-cp
                                                         -
                                                         "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1}")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (skosimp*)
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (replace*)
                                                                nil)
                                                               ("2"
                                                                (inst
                                                                 -
                                                                 "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      nil)))))
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (use
                                                                     "finite_intersect")
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "LAMBDA (s: below(S)): f(s) = x!1"
                                                                       "S!1")
                                                                      (("2"
                                                                        (grind)
                                                                        nil)))))))))))))))
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (use
                                                             "finite_add")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "LAMBDA (s: below(S)): f(s) = x!1"
                                                               "S!1"
                                                               "e!1")
                                                              (("2"
                                                                (grind)
                                                                nil)))))))))))))
                                                   ("2"
                                                    (lemma
                                                     "nonempty_card[below(S)]")
                                                    (("2"
                                                      (inst-cp
                                                       -
                                                       "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (skosimp*)
                                                          (("1"
                                                            (inst
                                                             -
                                                             "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1}")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (assert)
                                                                  nil)))))
                                                             ("2"
                                                              (hide-all-but
                                                               1)
                                                              (("2"
                                                                (use
                                                                 "finite_add")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "LAMBDA (s: below(S)): f(s) = x!1"
                                                                   "S!1"
                                                                   "e!1")
                                                                  (("2"
                                                                    (grind)
                                                                    nil)))))))))))))
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (use
                                                           "finite_intersect")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "LAMBDA (s: below(S)): f(s) = x!1"
                                                             "S!1")
                                                            (("2"
                                                              (grind)
                                                              nil)))))))))))))))))))))
                                         ("2"
                                          (hide -1 4)
                                          (("2"
                                            (decompose-equality +)
                                            (("2"
                                              (grind)
                                              nil))))))))))))))))))))))))))))))))))))))))))
    nil)
   unfinished nil 2070314 159840 t nil)
  (mid_val_u-4 nil 3287526690 3287526818
   ("" (skolem + ("f" "e" _ "t"))
    (("" (skosimp*)
      (("" (expand "middle_value")
        (("" (flatten)
          (("" (hide -3)
            (("" (use "card_make_bag")
              (("" (replace -1 :hide? t)
                ((""
                  (case-replace
                   "card(u_filter(make_bag(e, f), t)) = card(filter(leq)(e)(f)(s!1))")
                  (("" (hide -2 2)
                    (("" (expand "card")
                      (("" (typepred! "e")
                        (("" (replace -3 :hide? t)
                          ((""
                            (lemma "finite_set_ind_modified[below(S)]")
                            ((""
                              (inst -
                               "LAMBDA (ee: finite_set[below(S)]): sum(bag_to_set(u_filter(make_bag(ee, f), f(s!1))),
                              LAMBDA (t: T): u_filter(make_bag(ee, f), f(s!1))(t))
                           = card(filter(leq)(ee)(f)(s!1))")
                              ((""
                                (split)
                                (("1" (inst?) nil)
                                 ("2"
                                  (hide 3)
                                  (("2"
                                    (expand "filter")
                                    (("2"
                                      (lemma "card_empty?[below(S)]")
                                      (("2"
                                        (inst?)
                                        (("1"
                                          (case
                                           "empty?[below(S)]
                                                                                                       (LAMBDA (j: below(S)): emptyset(j) AND leq(f(j), f(s!1)))")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -2 :hide? t)
                                              (("1"
                                                (expand "bag_to_set")
                                                (("1"
                                                  (expand "make_bag")
                                                  (("1"
                                                    (expand "u_filter")
                                                    (("1"
                                                      (case
                                                       "{t: T |
                                                                                                                         IF leq(f(s!1), t)
                                                                                                                           THEN card({s: below(S) | emptyset(s) AND f(s) = t})
                                                                                                                         ELSE 0
                                                                                                                         ENDIF
                                                                                                                          > 0} = emptyset[T]")
                                                      (("1"
                                                        (replace

                                                         -1
                                                         :hide?

                                                         t)
                                                        (("1"
                                                          (use
                                                           "sum_emptyset[T,real,0,+]")
                                                          (("1"
                                                            (skosimp*)
                                                            (("1"
                                                              (use
                                                               "finite_empty")
                                                              nil)))))))
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (decompose-equality
                                                           +)
                                                          (("1"
                                                            (grind)
                                                            (("1"
                                                              (use
                                                               "card_emptyset[below(S)]")
                                                              (("1"
                                                                (expand
                                                                 "emptyset")
                                                                (("1"
                                                                  (assert)
                                                                  nil)))))))
                                                           ("2"
                                                            (skosimp*)
                                                            (("2"
                                                              (use
                                                               "finite_empty")
                                                              nil)))))))
                                                       ("3"
                                                        (skosimp*)
                                                        (("3"
                                                          (use
                                                           "finite_empty")
                                                          nil)))))))))))))))
                                           ("2"
                                            (hide 2 -1)
                                            (("2" (grind) nil)))))
                                         ("2"
                                          (use "finite_empty")
                                          nil)))))))))
                                 ("3"
                                  (skosimp*)
                                  (("3"
                                    (hide 4)
                                    (("3"
                                      (case "leq(f(s!1),f(e!1))")
                                      (("1"
                                        (case-replace
                                         "card(filter(leq)(add(e!1, S!1))(f)(s!1)) = card(filter(leq)(S!1)(f)(s!1)) + 1")
                                        (("1"
                                          (replace -3 :dir rl :hide? t)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (case
                                               "bag_to_set(u_filter(make_bag(S!1, f), f(s!1)))(f(e!1))")
                                              (("1"
                                                (case
                                                 "u_filter(make_bag(add(e!1, S!1), f), f(s!1))(f(e!1)) = u_filter(make_bag(S!1, f), f(s!1))(f(e!1)) + 1")
                                                (("1"
                                                  (lemma
                                                   "sum_x[T,real,0,+]")
                                                  (("1"
                                                    (inst-cp
                                                     -
                                                     "bag_to_set(u_filter(make_bag(add(e!1, S!1), f), f(s!1)))"
                                                     "LAMBDA (t: T): u_filter(make_bag(add(e!1, S!1), f), f(s!1))(t)"
                                                     "f(e!1)")
                                                    (("1"
                                                      (inst
                                                       -
                                                       "bag_to_set(u_filter(make_bag(S!1, f), f(s!1)))"
                                                       "LAMBDA (t: T): u_filter(make_bag(S!1, f), f(s!1))(t)"
                                                       "f(e!1)")
                                                      (("1"
                                                        (replace*)
                                                        (("1"
                                                          (hide
                                                           -1
                                                           -2
                                                           -3)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (lemma
                                                               "sum_particular2[T,real,0,+]")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "remove(f(e!1),
                                                                                                                                     bag_to_set(u_filter(make_bag(add(e!1, S!1), f), f(s!1))))"
                                                                 "LAMBDA (t: T): u_filter(make_bag(add(e!1, S!1), f), f(s!1))(t)"
                                                                 "f(e!1)")
                                                                (("1"
                                                                  (replace

                                                                   -
                                                                   :hide?

                                                                   t)
                                                                  (("1"
                                                                    (lift-if)
                                                                    (("1"
                                                                      (split)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (hide-all-but
                                                                           -1)
                                                                          (("1"
                                                                            (grind)
                                                                            nil)))))
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (hide
                                                                           1)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (name-replace
                                                                               "g"
                                                                               "LAMBDA (t: T): u_filter(make_bag(add(e!1, S!1), f), f(s!1))(t)")
                                                                              (("2"
                                                                                (case-replace
                                                                                 "remove(f(e!1),
                                                                                                                                                     bag_to_set(u_filter(make_bag(add(e!1, S!1), f), f(s!1)))) = remove(f(e!1), bag_to_set(u_filter(make_bag(S!1, f), f(s!1))))")
                                                                                (("1"
                                                                                  (hide
                                                                                   -1)
                                                                                  (("1"
                                                                                    (use
                                                                                     "sum_f_g[T,real,0,+]")
                                                                                    (("1"
                                                                                      (split)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil)
                                                                                       ("2"
                                                                                        (skosimp*)
                                                                                        (("2"
                                                                                          (hide
                                                                                           2)
                                                                                          (("2"
                                                                                            (lift-if)
                                                                                            (("2"
                                                                                              (typepred!
                                                                                               "x!1")
                                                                                              (("2"
                                                                                                (split)
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (grind)
                                                                                                    nil)))
                                                                                                 ("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (hide
                                                                                                     -4
                                                                                                     -5
                                                                                                     4)
                                                                                                    (("2"
                                                                                                      (grind)
                                                                                                      (("2"
                                                                                                        (case-replace
                                                                                                         "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1} = {s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                                        (("2"
                                                                                                          (hide
                                                                                                           3)
                                                                                                          (("2"
                                                                                                            (decompose-equality
                                                                                                             +)
                                                                                                            (("2"
                                                                                                              (grind)
                                                                                                              nil)))))))))))))))))))))))))))))
                                                                                 ("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (decompose-equality
                                                                                     +)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "remove")
                                                                                      (("2"
                                                                                        (iff)
                                                                                        (("2"
                                                                                          (prop)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "member")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "bag_to_set")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "u_filter")
                                                                                                (("1"
                                                                                                  (lift-if)
                                                                                                  (("1"
                                                                                                    (prop)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "make_bag")
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "nonempty_card[below(S)]")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "{s: below(S) | S!1(s) AND f(s) = f(e!1)}")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "nonempty?")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "empty?")
                                                                                                                (("1"
                                                                                                                  (skosimp*)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "member")
                                                                                                                    (("1"
                                                                                                                      (flatten)
                                                                                                                      (("1"
                                                                                                                        (lemma
                                                                                                                         "nonempty_card[below(S)]")
                                                                                                                        (("1"
                                                                                                                          (inst?)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "nonempty?")
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "empty?")
                                                                                                                                (("1"
                                                                                                                                  (skosimp*)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "member")
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "add")
                                                                                                                                      (("1"
                                                                                                                                        (flatten)
                                                                                                                                        (("1"
                                                                                                                                          (split)
                                                                                                                                          (("1"
                                                                                                                                            (lemma
                                                                                                                                             "nonempty_card[below(S)]")
                                                                                                                                            (("1"
                                                                                                                                              (inst
                                                                                                                                               -
                                                                                                                                               "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (use
                                                                                                                                                 "finite_intersect")
                                                                                                                                                nil)))))
                                                                                                                                           ("2"
                                                                                                                                            (expand
                                                                                                                                             "member")
                                                                                                                                            (("2"
                                                                                                                                              (lemma
                                                                                                                                               "nonempty_card[below(S)]")
                                                                                                                                              (("2"
                                                                                                                                                (inst
                                                                                                                                                 -
                                                                                                                                                 "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (grind)
                                                                                                                                                    nil)))
                                                                                                                                                 ("2"
                                                                                                                                                  (use
                                                                                                                                                   "finite_intersect")
                                                                                                                                                  nil)))))))))))))))))))))))
                                                                                                                           ("2"
                                                                                                                            (use
                                                                                                                             "finite_add")
                                                                                                                            nil)))))))))))))))))
                                                                                                           ("2"
                                                                                                            (use
                                                                                                             "finite_intersect")
                                                                                                            nil)))))))))))))))))
                                                                                           ("2"
                                                                                            (grind)
                                                                                            (("2"
                                                                                              (lemma
                                                                                               "nonempty_card[below(S)]")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -
                                                                                                 "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (skosimp*)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "nonempty_card[below(S)]")
                                                                                                      (("1"
                                                                                                        (inst?)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (inst?)
                                                                                                            (("1"
                                                                                                              (prop)
                                                                                                              nil)))))
                                                                                                         ("2"
                                                                                                          (hide-all-but
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (use
                                                                                                             "finite_add")
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "LAMBDA (s: below(S)): f(s) = x!1"
                                                                                                               "S!1"
                                                                                                               "e!1")
                                                                                                              (("2"
                                                                                                                (grind)
                                                                                                                nil)))))))))))))))
                                                                                                 ("2"
                                                                                                  (hide-all-but
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (use
                                                                                                     "finite_intersect")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "LAMBDA (s: below(S)): f(s) = x!1"
                                                                                                       "S!1")
                                                                                                      (("2"
                                                                                                        (grind)
                                                                                                        nil)))))))))))))))))))))))))))))))))))))))))))))))))))
                                                     ("2"
                                                      (hide -1 3)
                                                      (("2"
                                                        (expand
                                                         "bag_to_set")
                                                        (("2"
                                                          (expand
                                                           "u_filter")
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (prop)
                                                              (("2"
                                                                (expand
                                                                 "make_bag")
                                                                (("2"
                                                                  (lemma
                                                                   "nonempty_card[below(S)]")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "{s: below(S) | S!1(s) AND f(s) = f(e!1)}")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "nonempty?")
                                                                        (("1"
                                                                          (expand
                                                                           "empty?")
                                                                          (("1"
                                                                            (skosimp*)
                                                                            (("1"
                                                                              (expand
                                                                               "member")
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "nonempty_card[below(S)]")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "{s: below(S) | add[below(S)](e!1, S!1)(s) AND f(s) = f(e!1)}")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "nonempty?")
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil)))))
                                                                                     ("2"
                                                                                      (use
                                                                                       "finite_add")
                                                                                      nil)))))))))))))))))
                                                                     ("2"
                                                                      (use
                                                                       "finite_intersect")
                                                                      nil)))))))))))))))))))))
                                                 ("2"
                                                  (hide 3)
                                                  (("2"
                                                    (expand "u_filter")
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (split)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (expand
                                                             "make_bag")
                                                            (("1"
                                                              (case-replace
                                                               "{s: below(S) | add(e!1, S!1)(s) AND f(s) = f(e!1)} = add(e!1, {s: below(S) | S!1(s) AND f(s) = f(e!1)})")
                                                              (("1"
                                                                (lemma
                                                                 "card_add[below(S)]")
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "{s: below(S) | S!1(s) AND f(s) = f(e!1)}"
                                                                   "e!1")
                                                                  (("1"
                                                                    (replace

                                                                     -1)
                                                                    (("1"
                                                                      (assert)
                                                                      nil)))
                                                                   ("2"
                                                                    (use
                                                                     "finite_intersect")
                                                                    nil)))))
                                                               ("2"
                                                                (hide
                                                                 -2
                                                                 2)
                                                                (("2"
                                                                  (decompose-equality
                                                                   +)
                                                                  (("2"
                                                                    (grind)
                                                                    nil)))))))))))
                                                         ("2"
                                                          (flatten)
                                                          nil)))))))))))
                                               ("2"
                                                (lemma
                                                 "sum_x[T,real,0,+]")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (inst - "f(e!1)")
                                                    (("1"
                                                      (replace

                                                       -
                                                       :hide?

                                                       t)
                                                      (("1"
                                                        (case-replace
                                                         "remove(f(e!1),
                                                                                                        bag_to_set(u_filter(make_bag(add(e!1, S!1), f),
                                                                                                                            f(s!1)))) = bag_to_set(u_filter(make_bag(S!1, f), f(s!1)))")
                                                        (("1"
                                                          (lemma
                                                           "sum_particular2[T,real,0,+]")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (replace

                                                                 -1
                                                                 :hide?

                                                                 t)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case
                                                                     "u_filter(make_bag(add(e!1, S!1), f), f(s!1))(f(e!1)) = 1")
                                                                    (("1"
                                                                      (replace

                                                                       -
                                                                       :hide?

                                                                       t)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (case-replace
                                                                           "(LAMBDA (t_1: T):
                                                                        IF t_1 = f(e!1) THEN 0
                                                                        ELSE u_filter(make_bag(add(e!1, S!1), f), f(s!1))(t_1)
                                                                        ENDIF) = LAMBDA (t: T): u_filter(make_bag(S!1, f), f(s!1))(t)")
                                                                          (("1"
                                                                            (hide
                                                                             4)
                                                                            (("1"
                                                                              (decompose-equality
                                                                               +)
                                                                              (("1"
                                                                                (lift-if)
                                                                                (("1"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "bag_to_set")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil)))))
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (hide
                                                                                       -1)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "bag_to_set")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "u_filter")
                                                                                          (("2"
                                                                                            (lift-if)
                                                                                            (("2"
                                                                                              (split)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "make_bag")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "add")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "member")
                                                                                                      (("1"
                                                                                                        (case-replace
                                                                                                         "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1} = {s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           2)
                                                                                                          (("1"
                                                                                                            (decompose-equality
                                                                                                             +)
                                                                                                            (("1"
                                                                                                              (grind)
                                                                                                              nil)))))))))))))))
                                                                                               ("2"
                                                                                                (propax)
                                                                                                nil)))))))))))))))))))))))))))
                                                                     ("2"
                                                                      (hide
                                                                       -1
                                                                       4)
                                                                      (("2"
                                                                        (expand
                                                                         "bag_to_set")
                                                                        (("2"
                                                                          (expand
                                                                           "u_filter")
                                                                          (("2"
                                                                            (expand
                                                                             "make_bag")
                                                                            (("2"
                                                                              (lemma
                                                                               "nonempty_card[below(S)]")
                                                                              (("2"
                                                                                (inst
                                                                                 -
                                                                                 "{s: below(S) | S!1(s) AND f(s) = f(e!1)}")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "nonempty?")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "empty?")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "member")
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "card_one[below(S)]")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -
                                                                                             "{s: below(S) | add(e!1, S!1)(s) AND f(s) = f(e!1)}")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (inst?)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "singleton")
                                                                                                  (("1"
                                                                                                    (decompose-equality
                                                                                                     +)
                                                                                                    (("1"
                                                                                                      (grind)
                                                                                                      nil)))))))))
                                                                                             ("2"
                                                                                              (use
                                                                                               "finite_add")
                                                                                              nil)))))))))))))
                                                                                 ("2"
                                                                                  (use
                                                                                   "finite_intersect")
                                                                                  nil)))))))))))))))))))))))))
                                                         ("2"
                                                          (hide 4)
                                                          (("2"
                                                            (decompose-equality
                                                             +)
                                                            (("2"
                                                              (iff)
                                                              (("2"
                                                                (grind)
                                                                (("1"
                                                                  (lemma
                                                                   "nonempty_card[below(S)]")
                                                                  (("1"
                                                                    (inst-cp
                                                                     -
                                                                     "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1}")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (skosimp*)
                                                                        (("1"
                                                                          (split)
                                                                          (("1"
                                                                            (replace*)
                                                                            nil)
                                                                           ("2"
                                                                            (inst
                                                                             -
                                                                             "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil)
                                                                                   ("2"
                                                                                    (propax)
                                                                                    nil)))))))
                                                                             ("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (use
                                                                                 "finite_intersect")
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "LAMBDA (s: below(S)): f(s) = x!1"
                                                                                   "S!1")
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil)))))))))))))))
                                                                     ("2"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("2"
                                                                        (use
                                                                         "finite_add")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "LAMBDA (s: below(S)): f(s) = x!1"
                                                                           "S!1"
                                                                           "e!1")
                                                                          (("2"
                                                                            (grind)
                                                                            nil)))))))))))
                                                                 ("2"
                                                                  (lemma
                                                                   "nonempty_card[below(S)]")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (skosimp*)
                                                                        (("1"
                                                                          (lemma
                                                                           "nonempty_card[below(S)]")
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1}")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (prop)
                                                                                  nil)))))
                                                                             ("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (use
                                                                                 "finite_add")
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "LAMBDA (s: below(S)): f(s) = x!1"
                                                                                   "S!1"
                                                                                   "e!1")
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil)))))))))))))))
                                                                     ("2"
                                                                      (use
                                                                       "finite_intersect")
                                                                      (("2"
                                                                        (grind)
                                                                        nil)))))))))))))))))))
                                                     ("2"
                                                      (hide 4)
                                                      (("2"
                                                        (grind)
                                                        (("2"
                                                          (lemma
                                                           "nonempty_card[below(S)]")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = f(e!1)}")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst?)
                                                                nil)))
                                                             ("2"
                                                              (hide-all-but
                                                               1)
                                                              (("2"
                                                                (use
                                                                 "finite_add")
                                                                (("2"
                                                                  (grind)
                                                                  nil)))))))))))))))))))))))))
                                         ("2"
                                          (hide -2 3)
                                          (("2"
                                            (expand "filter")
                                            (("2"
                                              (expand "add")
                                              (("2"
                                                (expand "member")
                                                (("2"
                                                  (case-replace
                                                   "(LAMBDA (j: below(S)): (e!1 = j OR S!1(j)) AND leq(f(j), f(s!1))) = add(e!1, LAMBDA (j: below(S)): S!1(j) AND leq(f(j), f(s!1)))")
                                                  (("1"
                                                    (lemma
                                                     "card_add[below(S)]")
                                                    (("1"
                                                      (inst
                                                       -
                                                       "LAMBDA (j: below(S)): S!1(j) AND leq(f(j), f(s!1))"
                                                       "e!1")
                                                      (("1"
                                                        (replace -)
                                                        (("1"
                                                          (assert)
                                                          nil)))
                                                       ("2"
                                                        (use
                                                         "finite_intersect")
                                                        nil)))))
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (decompose-equality
                                                       +)
                                                      (("2"
                                                        (grind)
                                                        nil)))))))))))))))))
                                       ("2"
                                        (case-replace
                                         "filter(leq)(add(e!1, S!1))(f)(s!1) = filter(leq)(S!1)(f)(s!1)")
                                        (("1"
                                          (replace -2 :dir rl :hide? t)
                                          (("1"
                                            (case-replace
                                             "bag_to_set(u_filter(make_bag(add(e!1, S!1), f), f(s!1))) = bag_to_set(u_filter(make_bag(S!1, f), f(s!1)))")
                                            (("1"
                                              (lemma
                                               "sum_particular2[T,real,0,+]")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (inst - "f(e!1)")
                                                  (("1"
                                                    (replace

                                                     -1
                                                     :hide?

                                                     t)
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (case-replace
                                                             "u_filter(make_bag(add(e!1, S!1), f), f(s!1))(f(e!1)) = 0")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (hide
                                                                 -2
                                                                 -3
                                                                 -4)
                                                                (("1"
                                                                  (case-replace
                                                                   "(LAMBDA (t_1: T):
                                                      IF t_1 = f(e!1) THEN 0
                                                      ELSE u_filter(make_bag(add(e!1, S!1), f), f(s!1))(t_1)
                                                      ENDIF) = LAMBDA (t: T): u_filter(make_bag(S!1, f), f(s!1))(t)")
                                                                  (("1"
                                                                    (hide
                                                                     2)
                                                                    (("1"
                                                                      (decompose-equality
                                                                       +)
                                                                      (("1"
                                                                        (lift-if)
                                                                        (("1"
                                                                          (split)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (grind)
                                                                              nil)))
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (expand
                                                                               "u_filter")
                                                                              (("2"
                                                                                (lift-if)
                                                                                (("2"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "make_bag")
                                                                                      (("1"
                                                                                        (case-replace
                                                                                         "{s: below(S) | add(e!1, S!1)(s) AND f(s) = x!1} = {s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                        (("1"
                                                                                          (hide
                                                                                           2)
                                                                                          (("1"
                                                                                            (decompose-equality
                                                                                             +)
                                                                                            (("1"
                                                                                              (iff)
                                                                                              (("1"
                                                                                                (grind)
                                                                                                nil)))))))))))))
                                                                                   ("2"
                                                                                    (propax)
                                                                                    nil)))))))))))))))))))))))
                                                             ("2"
                                                              (hide
                                                               -1
                                                               -2
                                                               -3
                                                               2)
                                                              (("2"
                                                                (grind)
                                                                nil)))))))
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (case-replace
                                                               "(LAMBDA (t_1: T):
                                                IF t_1 = f(e!1) THEN 0
                                                ELSE u_filter(make_bag(add(e!1, S!1), f), f(s!1))(t_1)
                                                ENDIF) = LAMBDA (t: T): u_filter(make_bag(S!1, f), f(s!1))(t)")
                                                              (("2"
                                                                (hide
                                                                 3)
                                                                (("2"
                                                                  (decompose-equality
                                                                   +)
                                                                  (("2"
                                                                    (lift-if)
                                                                    (("2"
                                                                      (split)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (expand
                                                                           "bag_to_set")
                                                                          (("1"
                                                                            (assert)
                                                                            nil)))))
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (hide
                                                                           -1
                                                                           -2)
                                                                          (("2"
                                                                            (expand
                                                                             "bag_to_set")
                                                                            (("2"
                                                                              (expand
                                                                               "u_filter")
                                                                              (("2"
                                                                                (lift-if)
                                                                                (("2"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "make_bag")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "add")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "member")
                                                                                          (("1"
                                                                                            (case-replace
                                                                                             "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1} = {s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                            (("1"
                                                                                              (hide
                                                                                               2)
                                                                                              (("1"
                                                                                                (decompose-equality
                                                                                                 +)
                                                                                                (("1"
                                                                                                  (grind)
                                                                                                  nil)))))))))))))))
                                                                                   ("2"
                                                                                    (propax)
                                                                                    nil)))))))))))))))))))))))))))))))))))))))
                                             ("2"
                                              (hide -1 4)
                                              (("2"
                                                (decompose-equality +)
                                                (("2"
                                                  (grind)
                                                  (("1"
                                                    (case
                                                     "x!1 = f(e!1)")
                                                    (("1"
                                                      (hide-all-but
                                                       (-1 -4 2))
                                                      (("1"
                                                        (typepred!
                                                         "leq")
                                                        (("1"
                                                          (grind)
                                                          nil)))))
                                                     ("2"
                                                      (lemma
                                                       "nonempty_card[below(S)]")
                                                      (("2"
                                                        (inst-cp
                                                         -
                                                         "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1}")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (skosimp*)
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (replace*)
                                                                nil)
                                                               ("2"
                                                                (inst
                                                                 -
                                                                 "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      nil)))))
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (use
                                                                     "finite_intersect")
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "LAMBDA (s: below(S)): f(s) = x!1"
                                                                       "S!1")
                                                                      (("2"
                                                                        (grind)
                                                                        nil)))))))))))))))
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (use
                                                             "finite_add")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "LAMBDA (s: below(S)): f(s) = x!1"
                                                               "S!1"
                                                               "e!1")
                                                              (("2"
                                                                (grind)
                                                                nil)))))))))))))
                                                   ("2"
                                                    (lemma
                                                     "nonempty_card[below(S)]")
                                                    (("2"
                                                      (inst-cp
                                                       -
                                                       "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (skosimp*)
                                                          (("1"
                                                            (inst
                                                             -
                                                             "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1}")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (assert)
                                                                  nil)))))
                                                             ("2"
                                                              (hide-all-but
                                                               1)
                                                              (("2"
                                                                (use
                                                                 "finite_add")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "LAMBDA (s: below(S)): f(s) = x!1"
                                                                   "S!1"
                                                                   "e!1")
                                                                  (("2"
                                                                    (grind)
                                                                    nil)))))))))))))
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (use
                                                           "finite_intersect")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "LAMBDA (s: below(S)): f(s) = x!1"
                                                             "S!1")
                                                            (("2"
                                                              (grind)
                                                              nil)))))))))))))))))))))
                                         ("2"
                                          (hide -1 4)
                                          (("2"
                                            (decompose-equality +)
                                            (("2"
                                              (grind)
                                              nil))))))))))))))))))))))))))))))))))))))))))
    nil)
   unfinished nil 123432 17740 t nil)
  (mid_val_u-3 nil 3287526151 3287526652
   ("" (skolem + ("f" "e" _ "t"))
    (("" (skosimp*)
      (("" (expand "middle_value")
        (("" (flatten)
          (("" (hide -3)
            (("" (use "card_make_bag")
              (("" (replace -1 :hide? t)
                ((""
                  (case-replace
                   "card(u_filter(make_bag(e, f), t)) = card(filter(leq)(e)(f)(s!1))")
                  (("" (hide -2 2)
                    (("" (expand "card")
                      (("" (typepred! "e")
                        (("" (replace -3 :hide? t)
                          ((""
                            (lemma "finite_set_ind_modified[below(S)]")
                            ((""
                              (inst -
                               "LAMBDA (ee: finite_set[below(S)]): sum(bag_to_set(u_filter(make_bag(ee, f), f(s!1))),
                            LAMBDA (t: T): u_filter(make_bag(ee, f), f(s!1))(t))
                         = card(filter(leq)(ee)(f)(s!1))")
                              ((""
                                (split)
                                (("1" (inst?) nil)
                                 ("2"
                                  (hide 3)
                                  (("2"
                                    (expand "filter")
                                    (("2"
                                      (lemma "card_empty?[below(S)]")
                                      (("2"
                                        (inst?)
                                        (("1"
                                          (case
                                           "empty?[below(S)]
                                                                                            (LAMBDA (j: below(S)): emptyset(j) AND leq(f(s!1), f(j)))")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -2 :hide? t)
                                              (("1"
                                                (expand "bag_to_set")
                                                (("1"
                                                  (expand "make_bag")
                                                  (("1"
                                                    (expand "u_filter")
                                                    (("1"
                                                      (case
                                                       "{t: T |
                                                                                                            IF leq(f(s!1), t)
                                                                                                              THEN card({s: below(S) | emptyset(s) AND f(s) = t})
                                                                                                            ELSE 0
                                                                                                            ENDIF
                                                                                                             > 0} = emptyset[T]")
                                                      (("1"
                                                        (replace

                                                         -1
                                                         :hide?

                                                         t)
                                                        (("1"
                                                          (use
                                                           "sum_emptyset[T,real,0,+]")
                                                          (("1"
                                                            (skosimp*)
                                                            (("1"
                                                              (use
                                                               "finite_empty")
                                                              nil)))))))
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (decompose-equality
                                                           +)
                                                          (("1"
                                                            (grind)
                                                            (("1"
                                                              (use
                                                               "card_emptyset[below(S)]")
                                                              (("1"
                                                                (expand
                                                                 "emptyset")
                                                                (("1"
                                                                  (assert)
                                                                  nil)))))))
                                                           ("2"
                                                            (skosimp*)
                                                            (("2"
                                                              (use
                                                               "finite_empty")
                                                              nil)))))))
                                                       ("3"
                                                        (skosimp*)
                                                        (("3"
                                                          (use
                                                           "finite_empty")
                                                          nil)))))))))))))))
                                           ("2"
                                            (hide 2 -1)
                                            (("2" (grind) nil)))))
                                         ("2"
                                          (use "finite_empty")
                                          nil)))))))))
                                 ("3"
                                  (skosimp*)
                                  (("3"
                                    (hide 4)
                                    (("3"
                                      (case "leq(f(s!1),f(e!1))")
                                      (("1"
                                        (case-replace
                                         "card(filter(leq)(add(e!1, S!1))(f)(s!1)) = card(filter(leq)(S!1)(f)(s!1)) + 1")
                                        (("1"
                                          (replace -3 :dir rl :hide? t)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (case
                                               "bag_to_set(u_filter(make_bag(S!1, f), f(s!1)))(f(e!1))")
                                              (("1"
                                                (case
                                                 "u_filter(make_bag(add(e!1, S!1), f), f(s!1))(f(e!1)) = u_filter(make_bag(S!1, f), f(s!1))(f(e!1)) + 1")
                                                (("1"
                                                  (lemma
                                                   "sum_x[T,real,0,+]")
                                                  (("1"
                                                    (inst-cp
                                                     -
                                                     "bag_to_set(u_filter(make_bag(add(e!1, S!1), f), f(s!1)))"
                                                     "LAMBDA (t: T): u_filter(make_bag(add(e!1, S!1), f), f(s!1))(t)"
                                                     "f(e!1)")
                                                    (("1"
                                                      (inst
                                                       -
                                                       "bag_to_set(u_filter(make_bag(S!1, f), f(s!1)))"
                                                       "LAMBDA (t: T): u_filter(make_bag(S!1, f), f(s!1))(t)"
                                                       "f(e!1)")
                                                      (("1"
                                                        (replace*)
                                                        (("1"
                                                          (hide
                                                           -1
                                                           -2
                                                           -3)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (lemma
                                                               "sum_particular2[T,real,0,+]")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "remove(f(e!1),
                                                                                                                       bag_to_set(u_filter(make_bag(add(e!1, S!1), f), f(s!1))))"
                                                                 "LAMBDA (t: T): u_filter(make_bag(add(e!1, S!1), f), f(s!1))(t)"
                                                                 "f(e!1)")
                                                                (("1"
                                                                  (replace

                                                                   -
                                                                   :hide?

                                                                   t)
                                                                  (("1"
                                                                    (lift-if)
                                                                    (("1"
                                                                      (split)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (hide-all-but
                                                                           -1)
                                                                          (("1"
                                                                            (grind)
                                                                            nil)))))
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (hide
                                                                           1)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (name-replace
                                                                               "g"
                                                                               "LAMBDA (t: T): u_filter(make_bag(add(e!1, S!1), f), f(s!1))(t)")
                                                                              (("2"
                                                                                (case-replace
                                                                                 "remove(f(e!1),
                                                                                                                                     bag_to_set(u_filter(make_bag(add(e!1, S!1), f), f(s!1)))) = remove(f(e!1), bag_to_set(u_filter(make_bag(S!1, f), f(s!1))))")
                                                                                (("1"
                                                                                  (hide
                                                                                   -1)
                                                                                  (("1"
                                                                                    (use
                                                                                     "sum_f_g[T,real,0,+]")
                                                                                    (("1"
                                                                                      (split)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil)
                                                                                       ("2"
                                                                                        (skosimp*)
                                                                                        (("2"
                                                                                          (hide
                                                                                           2)
                                                                                          (("2"
                                                                                            (lift-if)
                                                                                            (("2"
                                                                                              (typepred!
                                                                                               "x!1")
                                                                                              (("2"
                                                                                                (split)
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (grind)
                                                                                                    nil)))
                                                                                                 ("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (hide
                                                                                                     -4
                                                                                                     -5
                                                                                                     4)
                                                                                                    (("2"
                                                                                                      (grind)
                                                                                                      (("2"
                                                                                                        (case-replace
                                                                                                         "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1} = {s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                                        (("2"
                                                                                                          (hide
                                                                                                           3)
                                                                                                          (("2"
                                                                                                            (decompose-equality
                                                                                                             +)
                                                                                                            (("2"
                                                                                                              (grind)
                                                                                                              nil)))))))))))))))))))))))))))))
                                                                                 ("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (decompose-equality
                                                                                     +)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "remove")
                                                                                      (("2"
                                                                                        (iff)
                                                                                        (("2"
                                                                                          (prop)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "member")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "bag_to_set")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "u_filter")
                                                                                                (("1"
                                                                                                  (lift-if)
                                                                                                  (("1"
                                                                                                    (prop)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "make_bag")
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "nonempty_card[below(S)]")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "{s: below(S) | S!1(s) AND f(s) = f(e!1)}")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "nonempty?")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "empty?")
                                                                                                                (("1"
                                                                                                                  (skosimp*)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "member")
                                                                                                                    (("1"
                                                                                                                      (flatten)
                                                                                                                      (("1"
                                                                                                                        (lemma
                                                                                                                         "nonempty_card[below(S)]")
                                                                                                                        (("1"
                                                                                                                          (inst?)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "nonempty?")
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "empty?")
                                                                                                                                (("1"
                                                                                                                                  (skosimp*)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "member")
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "add")
                                                                                                                                      (("1"
                                                                                                                                        (flatten)
                                                                                                                                        (("1"
                                                                                                                                          (split)
                                                                                                                                          (("1"
                                                                                                                                            (lemma
                                                                                                                                             "nonempty_card[below(S)]")
                                                                                                                                            (("1"
                                                                                                                                              (inst
                                                                                                                                               -
                                                                                                                                               "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (use
                                                                                                                                                 "finite_intersect")
                                                                                                                                                nil)))))
                                                                                                                                           ("2"
                                                                                                                                            (expand
                                                                                                                                             "member")
                                                                                                                                            (("2"
                                                                                                                                              (lemma
                                                                                                                                               "nonempty_card[below(S)]")
                                                                                                                                              (("2"
                                                                                                                                                (inst
                                                                                                                                                 -
                                                                                                                                                 "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (grind)
                                                                                                                                                    nil)))
                                                                                                                                                 ("2"
                                                                                                                                                  (use
                                                                                                                                                   "finite_intersect")
                                                                                                                                                  nil)))))))))))))))))))))))
                                                                                                                           ("2"
                                                                                                                            (use
                                                                                                                             "finite_add")
                                                                                                                            nil)))))))))))))))))
                                                                                                           ("2"
                                                                                                            (use
                                                                                                             "finite_intersect")
                                                                                                            nil)))))))))))))))))
                                                                                           ("2"
                                                                                            (grind)
                                                                                            (("2"
                                                                                              (lemma
                                                                                               "nonempty_card[below(S)]")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -
                                                                                                 "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (skosimp*)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "nonempty_card[below(S)]")
                                                                                                      (("1"
                                                                                                        (inst?)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (inst?)
                                                                                                            (("1"
                                                                                                              (prop)
                                                                                                              nil)))))
                                                                                                         ("2"
                                                                                                          (hide-all-but
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (use
                                                                                                             "finite_add")
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "LAMBDA (s: below(S)): f(s) = x!1"
                                                                                                               "S!1"
                                                                                                               "e!1")
                                                                                                              (("2"
                                                                                                                (grind)
                                                                                                                nil)))))))))))))))
                                                                                                 ("2"
                                                                                                  (hide-all-but
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (use
                                                                                                     "finite_intersect")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "LAMBDA (s: below(S)): f(s) = x!1"
                                                                                                       "S!1")
                                                                                                      (("2"
                                                                                                        (grind)
                                                                                                        nil)))))))))))))))))))))))))))))))))))))))))))))))))))
                                                     ("2"
                                                      (hide -1 3)
                                                      (("2"
                                                        (expand
                                                         "bag_to_set")
                                                        (("2"
                                                          (expand
                                                           "u_filter")
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (prop)
                                                              (("2"
                                                                (expand
                                                                 "make_bag")
                                                                (("2"
                                                                  (lemma
                                                                   "nonempty_card[below(S)]")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "{s: below(S) | S!1(s) AND f(s) = f(e!1)}")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "nonempty?")
                                                                        (("1"
                                                                          (expand
                                                                           "empty?")
                                                                          (("1"
                                                                            (skosimp*)
                                                                            (("1"
                                                                              (expand
                                                                               "member")
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "nonempty_card[below(S)]")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "{s: below(S) | add[below(S)](e!1, S!1)(s) AND f(s) = f(e!1)}")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "nonempty?")
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil)))))
                                                                                     ("2"
                                                                                      (use
                                                                                       "finite_add")
                                                                                      nil)))))))))))))))))
                                                                     ("2"
                                                                      (use
                                                                       "finite_intersect")
                                                                      nil)))))))))))))))))))))
                                                 ("2"
                                                  (hide 3)
                                                  (("2"
                                                    (expand "u_filter")
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (split)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (expand
                                                             "make_bag")
                                                            (("1"
                                                              (case-replace
                                                               "{s: below(S) | add(e!1, S!1)(s) AND f(s) = f(e!1)} = add(e!1, {s: below(S) | S!1(s) AND f(s) = f(e!1)})")
                                                              (("1"
                                                                (lemma
                                                                 "card_add[below(S)]")
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "{s: below(S) | S!1(s) AND f(s) = f(e!1)}"
                                                                   "e!1")
                                                                  (("1"
                                                                    (replace

                                                                     -1)
                                                                    (("1"
                                                                      (assert)
                                                                      nil)))
                                                                   ("2"
                                                                    (use
                                                                     "finite_intersect")
                                                                    nil)))))
                                                               ("2"
                                                                (hide
                                                                 -2
                                                                 2)
                                                                (("2"
                                                                  (decompose-equality
                                                                   +)
                                                                  (("2"
                                                                    (grind)
                                                                    nil)))))))))))
                                                         ("2"
                                                          (flatten)
                                                          nil)))))))))))
                                               ("2"
                                                (lemma
                                                 "sum_x[T,real,0,+]")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (inst - "f(e!1)")
                                                    (("1"
                                                      (replace

                                                       -
                                                       :hide?

                                                       t)
                                                      (("1"
                                                        (case-replace
                                                         "remove(f(e!1),
                                                                                            bag_to_set(u_filter(make_bag(add(e!1, S!1), f),
                                                                                                                f(s!1)))) = bag_to_set(u_filter(make_bag(S!1, f), f(s!1)))")
                                                        (("1"
                                                          (lemma
                                                           "sum_particular2[T,real,0,+]")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (replace

                                                                 -1
                                                                 :hide?

                                                                 t)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case
                                                                     "u_filter(make_bag(add(e!1, S!1), f), f(s!1))(f(e!1)) = 1")
                                                                    (("1"
                                                                      (replace

                                                                       -
                                                                       :hide?

                                                                       t)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (case-replace
                                                                           "(LAMBDA (t_1: T):
                                                        IF t_1 = f(e!1) THEN 0
                                                        ELSE u_filter(make_bag(add(e!1, S!1), f), f(s!1))(t_1)
                                                        ENDIF) = LAMBDA (t: T): u_filter(make_bag(S!1, f), f(s!1))(t)")
                                                                          (("1"
                                                                            (hide
                                                                             4)
                                                                            (("1"
                                                                              (decompose-equality
                                                                               +)
                                                                              (("1"
                                                                                (lift-if)
                                                                                (("1"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "bag_to_set")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil)))))
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (hide
                                                                                       -1)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "bag_to_set")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "u_filter")
                                                                                          (("2"
                                                                                            (lift-if)
                                                                                            (("2"
                                                                                              (split)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "make_bag")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "add")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "member")
                                                                                                      (("1"
                                                                                                        (case-replace
                                                                                                         "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1} = {s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           2)
                                                                                                          (("1"
                                                                                                            (decompose-equality
                                                                                                             +)
                                                                                                            (("1"
                                                                                                              (grind)
                                                                                                              nil)))))))))))))))
                                                                                               ("2"
                                                                                                (propax)
                                                                                                nil)))))))))))))))))))))))))))
                                                                     ("2"
                                                                      (hide
                                                                       -1
                                                                       4)
                                                                      (("2"
                                                                        (expand
                                                                         "bag_to_set")
                                                                        (("2"
                                                                          (expand
                                                                           "u_filter")
                                                                          (("2"
                                                                            (expand
                                                                             "make_bag")
                                                                            (("2"
                                                                              (lemma
                                                                               "nonempty_card[below(S)]")
                                                                              (("2"
                                                                                (inst
                                                                                 -
                                                                                 "{s: below(S) | S!1(s) AND f(s) = f(e!1)}")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "nonempty?")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "empty?")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "member")
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "card_one[below(S)]")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -
                                                                                             "{s: below(S) | add(e!1, S!1)(s) AND f(s) = f(e!1)}")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (inst?)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "singleton")
                                                                                                  (("1"
                                                                                                    (decompose-equality
                                                                                                     +)
                                                                                                    (("1"
                                                                                                      (grind)
                                                                                                      nil)))))))))
                                                                                             ("2"
                                                                                              (use
                                                                                               "finite_add")
                                                                                              nil)))))))))))))
                                                                                 ("2"
                                                                                  (use
                                                                                   "finite_intersect")
                                                                                  nil)))))))))))))))))))))))))
                                                         ("2"
                                                          (hide 4)
                                                          (("2"
                                                            (decompose-equality
                                                             +)
                                                            (("2"
                                                              (iff)
                                                              (("2"
                                                                (grind)
                                                                (("1"
                                                                  (lemma
                                                                   "nonempty_card[below(S)]")
                                                                  (("1"
                                                                    (inst-cp
                                                                     -
                                                                     "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1}")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (skosimp*)
                                                                        (("1"
                                                                          (split)
                                                                          (("1"
                                                                            (replace*)
                                                                            nil)
                                                                           ("2"
                                                                            (inst
                                                                             -
                                                                             "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil)
                                                                                   ("2"
                                                                                    (propax)
                                                                                    nil)))))))
                                                                             ("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (use
                                                                                 "finite_intersect")
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "LAMBDA (s: below(S)): f(s) = x!1"
                                                                                   "S!1")
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil)))))))))))))))
                                                                     ("2"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("2"
                                                                        (use
                                                                         "finite_add")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "LAMBDA (s: below(S)): f(s) = x!1"
                                                                           "S!1"
                                                                           "e!1")
                                                                          (("2"
                                                                            (grind)
                                                                            nil)))))))))))
                                                                 ("2"
                                                                  (lemma
                                                                   "nonempty_card[below(S)]")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (skosimp*)
                                                                        (("1"
                                                                          (lemma
                                                                           "nonempty_card[below(S)]")
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1}")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (prop)
                                                                                  nil)))))
                                                                             ("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (use
                                                                                 "finite_add")
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "LAMBDA (s: below(S)): f(s) = x!1"
                                                                                   "S!1"
                                                                                   "e!1")
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil)))))))))))))))
                                                                     ("2"
                                                                      (use
                                                                       "finite_intersect")
                                                                      (("2"
                                                                        (grind)
                                                                        nil)))))))))))))))))))
                                                     ("2"
                                                      (hide 4)
                                                      (("2"
                                                        (grind)
                                                        (("2"
                                                          (lemma
                                                           "nonempty_card[below(S)]")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = f(e!1)}")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst?)
                                                                nil)))
                                                             ("2"
                                                              (hide-all-but
                                                               1)
                                                              (("2"
                                                                (use
                                                                 "finite_add")
                                                                (("2"
                                                                  (grind)
                                                                  nil)))))))))))))))))))))))))
                                         ("2"
                                          (hide -2 3)
                                          (("2"
                                            (expand "filter")
                                            (("2"
                                              (expand "add")
                                              (("2"
                                                (expand "member")
                                                (("2"
                                                  (case-replace
                                                   "(LAMBDA (j: below(S)): (e!1 = j OR S!1(j)) AND leq(f(s!1), f(j))) = add(e!1, LAMBDA (j: below(S)): S!1(j) AND leq(f(s!1), f(j)))")
                                                  (("1"
                                                    (lemma
                                                     "card_add[below(S)]")
                                                    (("1"
                                                      (inst
                                                       -
                                                       "LAMBDA (j: below(S)): S!1(j) AND leq(f(s!1), f(j))"
                                                       "e!1")
                                                      (("1"
                                                        (replace -)
                                                        (("1"
                                                          (assert)
                                                          nil)))
                                                       ("2"
                                                        (use
                                                         "finite_intersect")
                                                        nil)))))
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (decompose-equality
                                                       +)
                                                      (("2"
                                                        (grind)
                                                        nil)))))))))))))))))
                                       ("2"
                                        (case-replace
                                         "filter(leq)(add(e!1, S!1))(f)(s!1) = filter(leq)(S!1)(f)(s!1)")
                                        (("1"
                                          (replace -2 :dir rl :hide? t)
                                          (("1"
                                            (case-replace
                                             "bag_to_set(u_filter(make_bag(add(e!1, S!1), f), f(s!1))) = bag_to_set(u_filter(make_bag(S!1, f), f(s!1)))")
                                            (("1"
                                              (lemma
                                               "sum_particular2[T,real,0,+]")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (inst - "f(e!1)")
                                                  (("1"
                                                    (replace

                                                     -1
                                                     :hide?

                                                     t)
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (case-replace
                                                             "u_filter(make_bag(add(e!1, S!1), f), f(s!1))(f(e!1)) = 0")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (hide
                                                                 -2
                                                                 -3
                                                                 -4)
                                                                (("1"
                                                                  (case-replace
                                                                   "(LAMBDA (t_1: T):
                                        IF t_1 = f(e!1) THEN 0
                                        ELSE u_filter(make_bag(add(e!1, S!1), f), f(s!1))(t_1)
                                        ENDIF) = LAMBDA (t: T): u_filter(make_bag(S!1, f), f(s!1))(t)")
                                                                  (("1"
                                                                    (hide
                                                                     2)
                                                                    (("1"
                                                                      (decompose-equality
                                                                       +)
                                                                      (("1"
                                                                        (lift-if)
                                                                        (("1"
                                                                          (split)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (grind)
                                                                              nil)))
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (expand
                                                                               "u_filter")
                                                                              (("2"
                                                                                (lift-if)
                                                                                (("2"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "make_bag")
                                                                                      (("1"
                                                                                        (case-replace
                                                                                         "{s: below(S) | add(e!1, S!1)(s) AND f(s) = x!1} = {s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                        (("1"
                                                                                          (hide
                                                                                           2)
                                                                                          (("1"
                                                                                            (decompose-equality
                                                                                             +)
                                                                                            (("1"
                                                                                              (iff)
                                                                                              (("1"
                                                                                                (grind)
                                                                                                nil)))))))))))))
                                                                                   ("2"
                                                                                    (propax)
                                                                                    nil)))))))))))))))))))))))
                                                             ("2"
                                                              (hide
                                                               -1
                                                               -2
                                                               -3
                                                               2)
                                                              (("2"
                                                                (grind)
                                                                nil)))))))
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (case-replace
                                                               "(LAMBDA (t_1: T):
                                    IF t_1 = f(e!1) THEN 0
                                    ELSE u_filter(make_bag(add(e!1, S!1), f), f(s!1))(t_1)
                                    ENDIF) = LAMBDA (t: T): u_filter(make_bag(S!1, f), f(s!1))(t)")
                                                              (("2"
                                                                (hide
                                                                 3)
                                                                (("2"
                                                                  (decompose-equality
                                                                   +)
                                                                  (("2"
                                                                    (lift-if)
                                                                    (("2"
                                                                      (split)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (expand
                                                                           "bag_to_set")
                                                                          (("1"
                                                                            (assert)
                                                                            nil)))))
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (hide
                                                                           -1
                                                                           -2)
                                                                          (("2"
                                                                            (expand
                                                                             "bag_to_set")
                                                                            (("2"
                                                                              (expand
                                                                               "u_filter")
                                                                              (("2"
                                                                                (lift-if)
                                                                                (("2"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "make_bag")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "add")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "member")
                                                                                          (("1"
                                                                                            (case-replace
                                                                                             "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1} = {s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                            (("1"
                                                                                              (hide
                                                                                               2)
                                                                                              (("1"
                                                                                                (decompose-equality
                                                                                                 +)
                                                                                                (("1"
                                                                                                  (grind)
                                                                                                  nil)))))))))))))))
                                                                                   ("2"
                                                                                    (propax)
                                                                                    nil)))))))))))))))))))))))))))))))))))))))
                                             ("2"
                                              (hide -1 4)
                                              (("2"
                                                (decompose-equality +)
                                                (("2"
                                                  (grind)
                                                  (("1"
                                                    (case
                                                     "x!1 = f(e!1)")
                                                    (("1"
                                                      (hide-all-but
                                                       (-1 -4 2))
                                                      (("1"
                                                        (typepred!
                                                         "leq")
                                                        (("1"
                                                          (grind)
                                                          nil)))))
                                                     ("2"
                                                      (lemma
                                                       "nonempty_card[below(S)]")
                                                      (("2"
                                                        (inst-cp
                                                         -
                                                         "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1}")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (skosimp*)
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (replace*)
                                                                nil)
                                                               ("2"
                                                                (inst
                                                                 -
                                                                 "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      nil)))))
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (use
                                                                     "finite_intersect")
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "LAMBDA (s: below(S)): f(s) = x!1"
                                                                       "S!1")
                                                                      (("2"
                                                                        (grind)
                                                                        nil)))))))))))))))
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (use
                                                             "finite_add")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "LAMBDA (s: below(S)): f(s) = x!1"
                                                               "S!1"
                                                               "e!1")
                                                              (("2"
                                                                (grind)
                                                                nil)))))))))))))
                                                   ("2"
                                                    (lemma
                                                     "nonempty_card[below(S)]")
                                                    (("2"
                                                      (inst-cp
                                                       -
                                                       "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (skosimp*)
                                                          (("1"
                                                            (inst
                                                             -
                                                             "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1}")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (assert)
                                                                  nil)))))
                                                             ("2"
                                                              (hide-all-but
                                                               1)
                                                              (("2"
                                                                (use
                                                                 "finite_add")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "LAMBDA (s: below(S)): f(s) = x!1"
                                                                   "S!1"
                                                                   "e!1")
                                                                  (("2"
                                                                    (grind)
                                                                    nil)))))))))))))
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (use
                                                           "finite_intersect")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "LAMBDA (s: below(S)): f(s) = x!1"
                                                             "S!1")
                                                            (("2"
                                                              (grind)
                                                              nil)))))))))))))))))))))
                                         ("2"
                                          (hide -1 4)
                                          (("2"
                                            (decompose-equality +)
                                            (("2"
                                              (grind)
                                              nil))))))))))))))))))))))))))))))))))))))))))
    nil)
   unfinished nil 264201 16810 t nil)
  (mid_val_u-2 nil 3287525464 3287525732
   ("" (skolem + ("f" "e" _ "t"))
    (("" (skosimp*)
      (("" (expand "middle_value")
        (("" (flatten)
          (("" (hide -3)
            (("" (use "card_make_bag")
              (("" (replace -1 :hide? t)
                ((""
                  (case-replace
                   "card(u_filter(make_bag(e, f), t)) = card(filter(leq)(e)(f)(s!1))")
                  (("" (hide -2 2)
                    (("" (expand "card")
                      (("" (typepred! "e")
                        (("" (replace -3 :hide? t)
                          ((""
                            (lemma "finite_set_ind_modified[below(S)]")
                            ((""
                              (inst -
                               "LAMBDA (ee: finite_set[below(S)]): sum(bag_to_set(u_filter(make_bag(ee, f), f(s!1))),
                          LAMBDA (t: T): u_filter(make_bag(ee, f), f(s!1))(t))
                       = card(filter(leq)(ee)(f)(s!1))")
                              ((""
                                (split)
                                (("1" (inst?) nil)
                                 ("2"
                                  (hide 3)
                                  (("2"
                                    (expand "filter")
                                    (("2"
                                      (lemma "card_empty?[below(S)]")
                                      (("2"
                                        (inst?)
                                        (("1"
                                          (case
                                           "empty?[below(S)]
                                                                                 (LAMBDA (j: below(S)): emptyset(j) AND leq(f(j), f(s!1)))")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -2 :hide? t)
                                              (("1"
                                                (expand "bag_to_set")
                                                (("1"
                                                  (expand "make_bag")
                                                  (("1"
                                                    (expand "u_filter")
                                                    (("1"
                                                      (case
                                                       "{t: T |
                                                                                               IF leq(t, f(s!1))
                                                                                                 THEN card({s: below(S) | emptyset(s) AND f(s) = t})
                                                                                               ELSE 0
                                                                                               ENDIF
                                                                                                > 0} = emptyset[T]")
                                                      (("1"
                                                        (replace

                                                         -1
                                                         :hide?

                                                         t)
                                                        (("1"
                                                          (use
                                                           "sum_emptyset[T,real,0,+]")
                                                          (("1"
                                                            (skosimp*)
                                                            (("1"
                                                              (use
                                                               "finite_empty")
                                                              nil)))))))
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (decompose-equality
                                                           +)
                                                          (("1"
                                                            (grind)
                                                            (("1"
                                                              (use
                                                               "card_emptyset[below(S)]")
                                                              (("1"
                                                                (expand
                                                                 "emptyset")
                                                                (("1"
                                                                  (assert)
                                                                  nil)))))))
                                                           ("2"
                                                            (skosimp*)
                                                            (("2"
                                                              (use
                                                               "finite_empty")
                                                              nil)))))))
                                                       ("3"
                                                        (skosimp*)
                                                        (("3"
                                                          (use
                                                           "finite_empty")
                                                          nil)))))))))))))))
                                           ("2"
                                            (hide 2 -1)
                                            (("2" (grind) nil)))))
                                         ("2"
                                          (use "finite_empty")
                                          nil)))))))))
                                 ("3"
                                  (skosimp*)
                                  (("3"
                                    (hide 4)
                                    (("3"
                                      (case "leq(f(e!1),f(s!1))")
                                      (("1"
                                        (case-replace
                                         "card(filter(leq)(add(e!1, S!1))(f)(s!1)) = card(filter(leq)(S!1)(f)(s!1)) + 1")
                                        (("1"
                                          (replace -3 :dir rl :hide? t)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (case
                                               "bag_to_set(u_filter(make_bag(S!1, f), f(s!1)))(f(e!1))")
                                              (("1"
                                                (case
                                                 "u_filter(make_bag(add(e!1, S!1), f), f(s!1))(f(e!1)) = u_filter(make_bag(S!1, f), f(s!1))(f(e!1)) + 1")
                                                (("1"
                                                  (lemma
                                                   "sum_x[T,real,0,+]")
                                                  (("1"
                                                    (inst-cp
                                                     -
                                                     "bag_to_set(u_filter(make_bag(add(e!1, S!1), f), f(s!1)))"
                                                     "LAMBDA (t: T): u_filter(make_bag(add(e!1, S!1), f), f(s!1))(t)"
                                                     "f(e!1)")
                                                    (("1"
                                                      (inst
                                                       -
                                                       "bag_to_set(u_filter(make_bag(S!1, f), f(s!1)))"
                                                       "LAMBDA (t: T): u_filter(make_bag(S!1, f), f(s!1))(t)"
                                                       "f(e!1)")
                                                      (("1"
                                                        (replace*)
                                                        (("1"
                                                          (hide
                                                           -1
                                                           -2
                                                           -3)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (lemma
                                                               "sum_particular2[T,real,0,+]")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "remove(f(e!1),
                                                                                                         bag_to_set(u_filter(make_bag(add(e!1, S!1), f), f(s!1))))"
                                                                 "LAMBDA (t: T): u_filter(make_bag(add(e!1, S!1), f), f(s!1))(t)"
                                                                 "f(e!1)")
                                                                (("1"
                                                                  (replace

                                                                   -
                                                                   :hide?

                                                                   t)
                                                                  (("1"
                                                                    (lift-if)
                                                                    (("1"
                                                                      (split)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (hide-all-but
                                                                           -1)
                                                                          (("1"
                                                                            (grind)
                                                                            nil)))))
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (hide
                                                                           1)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (name-replace
                                                                               "g"
                                                                               "LAMBDA (t: T): u_filter(make_bag(add(e!1, S!1), f), f(s!1))(t)")
                                                                              (("2"
                                                                                (case-replace
                                                                                 "remove(f(e!1),
                                                                                                                     bag_to_set(u_filter(make_bag(add(e!1, S!1), f), f(s!1)))) = remove(f(e!1), bag_to_set(u_filter(make_bag(S!1, f), f(s!1))))")
                                                                                (("1"
                                                                                  (hide
                                                                                   -1)
                                                                                  (("1"
                                                                                    (use
                                                                                     "sum_f_g[T,real,0,+]")
                                                                                    (("1"
                                                                                      (split)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil)
                                                                                       ("2"
                                                                                        (skosimp*)
                                                                                        (("2"
                                                                                          (hide
                                                                                           2)
                                                                                          (("2"
                                                                                            (lift-if)
                                                                                            (("2"
                                                                                              (typepred!
                                                                                               "x!1")
                                                                                              (("2"
                                                                                                (split)
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (grind)
                                                                                                    nil)))
                                                                                                 ("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (hide
                                                                                                     -4
                                                                                                     -5
                                                                                                     4)
                                                                                                    (("2"
                                                                                                      (grind)
                                                                                                      (("2"
                                                                                                        (case-replace
                                                                                                         "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1} = {s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                                        (("2"
                                                                                                          (hide
                                                                                                           3)
                                                                                                          (("2"
                                                                                                            (decompose-equality
                                                                                                             +)
                                                                                                            (("2"
                                                                                                              (grind)
                                                                                                              nil)))))))))))))))))))))))))))))
                                                                                 ("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (decompose-equality
                                                                                     +)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "remove")
                                                                                      (("2"
                                                                                        (iff)
                                                                                        (("2"
                                                                                          (prop)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "member")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "bag_to_set")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "u_filter")
                                                                                                (("1"
                                                                                                  (lift-if)
                                                                                                  (("1"
                                                                                                    (prop)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "make_bag")
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "nonempty_card[below(S)]")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "{s: below(S) | S!1(s) AND f(s) = f(e!1)}")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "nonempty?")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "empty?")
                                                                                                                (("1"
                                                                                                                  (skosimp*)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "member")
                                                                                                                    (("1"
                                                                                                                      (flatten)
                                                                                                                      (("1"
                                                                                                                        (lemma
                                                                                                                         "nonempty_card[below(S)]")
                                                                                                                        (("1"
                                                                                                                          (inst?)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "nonempty?")
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "empty?")
                                                                                                                                (("1"
                                                                                                                                  (skosimp*)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "member")
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "add")
                                                                                                                                      (("1"
                                                                                                                                        (flatten)
                                                                                                                                        (("1"
                                                                                                                                          (split)
                                                                                                                                          (("1"
                                                                                                                                            (lemma
                                                                                                                                             "nonempty_card[below(S)]")
                                                                                                                                            (("1"
                                                                                                                                              (inst
                                                                                                                                               -
                                                                                                                                               "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (use
                                                                                                                                                 "finite_intersect")
                                                                                                                                                nil)))))
                                                                                                                                           ("2"
                                                                                                                                            (expand
                                                                                                                                             "member")
                                                                                                                                            (("2"
                                                                                                                                              (lemma
                                                                                                                                               "nonempty_card[below(S)]")
                                                                                                                                              (("2"
                                                                                                                                                (inst
                                                                                                                                                 -
                                                                                                                                                 "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (grind)
                                                                                                                                                    nil)))
                                                                                                                                                 ("2"
                                                                                                                                                  (use
                                                                                                                                                   "finite_intersect")
                                                                                                                                                  nil)))))))))))))))))))))))
                                                                                                                           ("2"
                                                                                                                            (use
                                                                                                                             "finite_add")
                                                                                                                            nil)))))))))))))))))
                                                                                                           ("2"
                                                                                                            (use
                                                                                                             "finite_intersect")
                                                                                                            nil)))))))))))))))))
                                                                                           ("2"
                                                                                            (grind)
                                                                                            (("2"
                                                                                              (lemma
                                                                                               "nonempty_card[below(S)]")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -
                                                                                                 "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (skosimp*)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "nonempty_card[below(S)]")
                                                                                                      (("1"
                                                                                                        (inst?)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (inst?)
                                                                                                            (("1"
                                                                                                              (prop)
                                                                                                              nil)))))
                                                                                                         ("2"
                                                                                                          (hide-all-but
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (use
                                                                                                             "finite_add")
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "LAMBDA (s: below(S)): f(s) = x!1"
                                                                                                               "S!1"
                                                                                                               "e!1")
                                                                                                              (("2"
                                                                                                                (grind)
                                                                                                                nil)))))))))))))))
                                                                                                 ("2"
                                                                                                  (hide-all-but
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (use
                                                                                                     "finite_intersect")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "LAMBDA (s: below(S)): f(s) = x!1"
                                                                                                       "S!1")
                                                                                                      (("2"
                                                                                                        (grind)
                                                                                                        nil)))))))))))))))))))))))))))))))))))))))))))))))))))
                                                     ("2"
                                                      (hide -1 3)
                                                      (("2"
                                                        (expand
                                                         "bag_to_set")
                                                        (("2"
                                                          (expand
                                                           "u_filter")
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (prop)
                                                              (("2"
                                                                (expand
                                                                 "make_bag")
                                                                (("2"
                                                                  (lemma
                                                                   "nonempty_card[below(S)]")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "{s: below(S) | S!1(s) AND f(s) = f(e!1)}")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "nonempty?")
                                                                        (("1"
                                                                          (expand
                                                                           "empty?")
                                                                          (("1"
                                                                            (skosimp*)
                                                                            (("1"
                                                                              (expand
                                                                               "member")
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "nonempty_card[below(S)]")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "{s: below(S) | add[below(S)](e!1, S!1)(s) AND f(s) = f(e!1)}")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "nonempty?")
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil)))))
                                                                                     ("2"
                                                                                      (use
                                                                                       "finite_add")
                                                                                      nil)))))))))))))))))
                                                                     ("2"
                                                                      (use
                                                                       "finite_intersect")
                                                                      nil)))))))))))))))))))))
                                                 ("2"
                                                  (hide 3)
                                                  (("2"
                                                    (expand "u_filter")
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (split)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (expand
                                                             "make_bag")
                                                            (("1"
                                                              (case-replace
                                                               "{s: below(S) | add(e!1, S!1)(s) AND f(s) = f(e!1)} = add(e!1, {s: below(S) | S!1(s) AND f(s) = f(e!1)})")
                                                              (("1"
                                                                (lemma
                                                                 "card_add[below(S)]")
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "{s: below(S) | S!1(s) AND f(s) = f(e!1)}"
                                                                   "e!1")
                                                                  (("1"
                                                                    (replace

                                                                     -1)
                                                                    (("1"
                                                                      (assert)
                                                                      nil)))
                                                                   ("2"
                                                                    (use
                                                                     "finite_intersect")
                                                                    nil)))))
                                                               ("2"
                                                                (hide
                                                                 -2
                                                                 2)
                                                                (("2"
                                                                  (decompose-equality
                                                                   +)
                                                                  (("2"
                                                                    (grind)
                                                                    nil)))))))))))
                                                         ("2"
                                                          (flatten)
                                                          nil)))))))))))
                                               ("2"
                                                (lemma
                                                 "sum_x[T,real,0,+]")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (inst - "f(e!1)")
                                                    (("1"
                                                      (replace

                                                       -
                                                       :hide?

                                                       t)
                                                      (("1"
                                                        (case-replace
                                                         "remove(f(e!1),
                                                                                bag_to_set(u_filter(make_bag(add(e!1, S!1), f),
                                                                                                    f(s!1)))) = bag_to_set(u_filter(make_bag(S!1, f), f(s!1)))")
                                                        (("1"
                                                          (lemma
                                                           "sum_particular2[T,real,0,+]")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (replace

                                                                 -1
                                                                 :hide?

                                                                 t)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case
                                                                     "u_filter(make_bag(add(e!1, S!1), f), f(s!1))(f(e!1)) = 1")
                                                                    (("1"
                                                                      (replace

                                                                       -
                                                                       :hide?

                                                                       t)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (case-replace
                                                                           "(LAMBDA (t_1: T):
                                        IF t_1 = f(e!1) THEN 0
                                        ELSE u_filter(make_bag(add(e!1, S!1), f), f(s!1))(t_1)
                                        ENDIF) = LAMBDA (t: T): u_filter(make_bag(S!1, f), f(s!1))(t)")
                                                                          (("1"
                                                                            (hide
                                                                             4)
                                                                            (("1"
                                                                              (decompose-equality
                                                                               +)
                                                                              (("1"
                                                                                (lift-if)
                                                                                (("1"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "bag_to_set")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil)))))
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (hide
                                                                                       -1)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "bag_to_set")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "u_filter")
                                                                                          (("2"
                                                                                            (lift-if)
                                                                                            (("2"
                                                                                              (split)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "make_bag")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "add")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "member")
                                                                                                      (("1"
                                                                                                        (case-replace
                                                                                                         "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1} = {s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           2)
                                                                                                          (("1"
                                                                                                            (decompose-equality
                                                                                                             +)
                                                                                                            (("1"
                                                                                                              (grind)
                                                                                                              nil)))))))))))))))
                                                                                               ("2"
                                                                                                (propax)
                                                                                                nil)))))))))))))))))))))))))))
                                                                     ("2"
                                                                      (hide
                                                                       -1
                                                                       4)
                                                                      (("2"
                                                                        (expand
                                                                         "bag_to_set")
                                                                        (("2"
                                                                          (expand
                                                                           "u_filter")
                                                                          (("2"
                                                                            (expand
                                                                             "make_bag")
                                                                            (("2"
                                                                              (lemma
                                                                               "nonempty_card[below(S)]")
                                                                              (("2"
                                                                                (inst
                                                                                 -
                                                                                 "{s: below(S) | S!1(s) AND f(s) = f(e!1)}")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "nonempty?")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "empty?")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "member")
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "card_one[below(S)]")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -
                                                                                             "{s: below(S) | add(e!1, S!1)(s) AND f(s) = f(e!1)}")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (inst?)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "singleton")
                                                                                                  (("1"
                                                                                                    (decompose-equality
                                                                                                     +)
                                                                                                    (("1"
                                                                                                      (grind)
                                                                                                      nil)))))))))
                                                                                             ("2"
                                                                                              (use
                                                                                               "finite_add")
                                                                                              nil)))))))))))))
                                                                                 ("2"
                                                                                  (use
                                                                                   "finite_intersect")
                                                                                  nil)))))))))))))))))))))))))
                                                         ("2"
                                                          (hide 4)
                                                          (("2"
                                                            (decompose-equality
                                                             +)
                                                            (("2"
                                                              (iff)
                                                              (("2"
                                                                (grind)
                                                                (("1"
                                                                  (lemma
                                                                   "nonempty_card[below(S)]")
                                                                  (("1"
                                                                    (inst-cp
                                                                     -
                                                                     "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1}")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (skosimp*)
                                                                        (("1"
                                                                          (split)
                                                                          (("1"
                                                                            (replace*)
                                                                            nil)
                                                                           ("2"
                                                                            (inst
                                                                             -
                                                                             "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil)
                                                                                   ("2"
                                                                                    (propax)
                                                                                    nil)))))))
                                                                             ("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (use
                                                                                 "finite_intersect")
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "LAMBDA (s: below(S)): f(s) = x!1"
                                                                                   "S!1")
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil)))))))))))))))
                                                                     ("2"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("2"
                                                                        (use
                                                                         "finite_add")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "LAMBDA (s: below(S)): f(s) = x!1"
                                                                           "S!1"
                                                                           "e!1")
                                                                          (("2"
                                                                            (grind)
                                                                            nil)))))))))))
                                                                 ("2"
                                                                  (lemma
                                                                   "nonempty_card[below(S)]")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (skosimp*)
                                                                        (("1"
                                                                          (lemma
                                                                           "nonempty_card[below(S)]")
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1}")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (prop)
                                                                                  nil)))))
                                                                             ("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (use
                                                                                 "finite_add")
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "LAMBDA (s: below(S)): f(s) = x!1"
                                                                                   "S!1"
                                                                                   "e!1")
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil)))))))))))))))
                                                                     ("2"
                                                                      (use
                                                                       "finite_intersect")
                                                                      (("2"
                                                                        (grind)
                                                                        nil)))))))))))))))))))
                                                     ("2"
                                                      (hide 4)
                                                      (("2"
                                                        (grind)
                                                        (("2"
                                                          (lemma
                                                           "nonempty_card[below(S)]")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = f(e!1)}")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst?)
                                                                nil)))
                                                             ("2"
                                                              (hide-all-but
                                                               1)
                                                              (("2"
                                                                (use
                                                                 "finite_add")
                                                                (("2"
                                                                  (grind)
                                                                  nil)))))))))))))))))))))))))
                                         ("2"
                                          (hide -2 3)
                                          (("2"
                                            (expand "filter")
                                            (("2"
                                              (expand "add")
                                              (("2"
                                                (expand "member")
                                                (("2"
                                                  (case-replace
                                                   "(LAMBDA (j: below(S)): (e!1 = j OR S!1(j)) AND leq(f(j), f(s!1))) = add(e!1, LAMBDA (j: below(S)): S!1(j) AND leq(f(j), f(s!1)))")
                                                  (("1"
                                                    (lemma
                                                     "card_add[below(S)]")
                                                    (("1"
                                                      (inst
                                                       -
                                                       "LAMBDA (j: below(S)): S!1(j) AND leq(f(j), f(s!1))"
                                                       "e!1")
                                                      (("1"
                                                        (replace -)
                                                        (("1"
                                                          (assert)
                                                          nil)))
                                                       ("2"
                                                        (use
                                                         "finite_intersect")
                                                        nil)))))
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (decompose-equality
                                                       +)
                                                      (("2"
                                                        (grind)
                                                        nil)))))))))))))))))
                                       ("2"
                                        (case-replace
                                         "filter(leq)(add(e!1, S!1))(f)(s!1) = filter(leq)(S!1)(f)(s!1)")
                                        (("1"
                                          (replace -2 :dir rl :hide? t)
                                          (("1"
                                            (case-replace
                                             "bag_to_set(u_filter(make_bag(add(e!1, S!1), f), f(s!1))) = bag_to_set(u_filter(make_bag(S!1, f), f(s!1)))")
                                            (("1"
                                              (lemma
                                               "sum_particular2[T,real,0,+]")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (inst - "f(e!1)")
                                                  (("1"
                                                    (replace

                                                     -1
                                                     :hide?

                                                     t)
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (case-replace
                                                             "u_filter(make_bag(add(e!1, S!1), f), f(s!1))(f(e!1)) = 0")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (hide
                                                                 -2
                                                                 -3
                                                                 -4)
                                                                (("1"
                                                                  (case-replace
                                                                   "(LAMBDA (t_1: T):
                          IF t_1 = f(e!1) THEN 0
                          ELSE u_filter(make_bag(add(e!1, S!1), f), f(s!1))(t_1)
                          ENDIF) = LAMBDA (t: T): u_filter(make_bag(S!1, f), f(s!1))(t)")
                                                                  (("1"
                                                                    (hide
                                                                     2)
                                                                    (("1"
                                                                      (decompose-equality
                                                                       +)
                                                                      (("1"
                                                                        (lift-if)
                                                                        (("1"
                                                                          (split)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (grind)
                                                                              nil)))
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (expand
                                                                               "u_filter")
                                                                              (("2"
                                                                                (lift-if)
                                                                                (("2"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "make_bag")
                                                                                      (("1"
                                                                                        (case-replace
                                                                                         "{s: below(S) | add(e!1, S!1)(s) AND f(s) = x!1} = {s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                        (("1"
                                                                                          (hide
                                                                                           2)
                                                                                          (("1"
                                                                                            (decompose-equality
                                                                                             +)
                                                                                            (("1"
                                                                                              (iff)
                                                                                              (("1"
                                                                                                (grind)
                                                                                                nil)))))))))))))
                                                                                   ("2"
                                                                                    (propax)
                                                                                    nil)))))))))))))))))))))))
                                                             ("2"
                                                              (hide
                                                               -1
                                                               -2
                                                               -3
                                                               2)
                                                              (("2"
                                                                (grind)
                                                                nil)))))))
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (case-replace
                                                               "(LAMBDA (t_1: T):
                        IF t_1 = f(e!1) THEN 0
                        ELSE u_filter(make_bag(add(e!1, S!1), f), f(s!1))(t_1)
                        ENDIF) = LAMBDA (t: T): u_filter(make_bag(S!1, f), f(s!1))(t)")
                                                              (("2"
                                                                (hide
                                                                 3)
                                                                (("2"
                                                                  (decompose-equality
                                                                   +)
                                                                  (("2"
                                                                    (lift-if)
                                                                    (("2"
                                                                      (split)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (expand
                                                                           "bag_to_set")
                                                                          (("1"
                                                                            (assert)
                                                                            nil)))))
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (hide
                                                                           -1
                                                                           -2)
                                                                          (("2"
                                                                            (expand
                                                                             "bag_to_set")
                                                                            (("2"
                                                                              (expand
                                                                               "u_filter")
                                                                              (("2"
                                                                                (lift-if)
                                                                                (("2"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "make_bag")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "add")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "member")
                                                                                          (("1"
                                                                                            (case-replace
                                                                                             "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1} = {s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                            (("1"
                                                                                              (hide
                                                                                               2)
                                                                                              (("1"
                                                                                                (decompose-equality
                                                                                                 +)
                                                                                                (("1"
                                                                                                  (grind)
                                                                                                  nil)))))))))))))))
                                                                                   ("2"
                                                                                    (propax)
                                                                                    nil)))))))))))))))))))))))))))))))))))))))
                                             ("2"
                                              (hide -1 4)
                                              (("2"
                                                (decompose-equality +)
                                                (("2"
                                                  (grind)
                                                  (("1"
                                                    (case
                                                     "x!1 = f(e!1)")
                                                    (("1"
                                                      (hide-all-but
                                                       (-1 -4 2))
                                                      (("1"
                                                        (typepred!
                                                         "leq")
                                                        (("1"
                                                          (grind)
                                                          nil)))))
                                                     ("2"
                                                      (lemma
                                                       "nonempty_card[below(S)]")
                                                      (("2"
                                                        (inst-cp
                                                         -
                                                         "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1}")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (skosimp*)
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (replace*)
                                                                nil)
                                                               ("2"
                                                                (inst
                                                                 -
                                                                 "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      nil)))))
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (use
                                                                     "finite_intersect")
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "LAMBDA (s: below(S)): f(s) = x!1"
                                                                       "S!1")
                                                                      (("2"
                                                                        (grind)
                                                                        nil)))))))))))))))
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (use
                                                             "finite_add")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "LAMBDA (s: below(S)): f(s) = x!1"
                                                               "S!1"
                                                               "e!1")
                                                              (("2"
                                                                (grind)
                                                                nil)))))))))))))
                                                   ("2"
                                                    (lemma
                                                     "nonempty_card[below(S)]")
                                                    (("2"
                                                      (inst-cp
                                                       -
                                                       "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (skosimp*)
                                                          (("1"
                                                            (inst
                                                             -
                                                             "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1}")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (assert)
                                                                  nil)))))
                                                             ("2"
                                                              (hide-all-but
                                                               1)
                                                              (("2"
                                                                (use
                                                                 "finite_add")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "LAMBDA (s: below(S)): f(s) = x!1"
                                                                   "S!1"
                                                                   "e!1")
                                                                  (("2"
                                                                    (grind)
                                                                    nil)))))))))))))
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (use
                                                           "finite_intersect")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "LAMBDA (s: below(S)): f(s) = x!1"
                                                             "S!1")
                                                            (("2"
                                                              (grind)
                                                              nil)))))))))))))))))))))
                                         ("2"
                                          (hide -1 4)
                                          (("2"
                                            (decompose-equality +)
                                            (("2"
                                              (grind)
                                              nil))))))))))))))))))))))))))))))))))))))))))
    nil)
   unfinished nil 117474 9810 t nil)
  (mid_val_u-1 nil 3287342429 3287511800
   ("" (skolem + ("f" "e" _ "t"))
    (("" (skosimp*)
      (("" (expand "middle_value")
        (("" (flatten)
          (("" (hide -3)
            (("" (use "card_make_bag")
              (("" (replace -1 :hide? t)
                ((""
                  (case-replace
                   "card(u_filter(make_bag(e, f), t)) = card(filter(leq)(e)(f)(s!1))")
                  (("" (hide -2 2)
                    (("" (expand "card")
                      (("" (typepred! "e")
                        (("" (replace -3 :hide? t)
                          ((""
                            (lemma "finite_set_ind_modified[below(S)]")
                            ((""
                              (inst -
                               "LAMBDA (ee: finite_set[below(S)]): sum(bag_to_set(u_filter(make_bag(ee, f), f(s!1))),
                    LAMBDA (t: T): u_filter(make_bag(ee, f), f(s!1))(t))
                 = card(filter(leq)(ee)(f)(s!1))")
                              ((""
                                (split)
                                (("1" (inst?) nil)
                                 ("2"
                                  (hide 3)
                                  (("2"
                                    (expand "filter")
                                    (("2"
                                      (lemma "card_empty?[below(S)]")
                                      (("2"
                                        (inst?)
                                        (("1"
                                          (case
                                           "empty?[below(S)]
                                                (LAMBDA (j: below(S)): emptyset(j) AND leq(f(j), f(s!1)))")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -2 :hide? t)
                                              (("1"
                                                (expand "bag_to_set")
                                                (("1"
                                                  (expand "make_bag")
                                                  (("1"
                                                    (expand "u_filter")
                                                    (("1"
                                                      (case
                                                       "{t: T |
                                                        IF leq(t, f(s!1))
                                                          THEN card({s: below(S) | emptyset(s) AND f(s) = t})
                                                        ELSE 0
                                                        ENDIF
                                                         > 0} = emptyset[T]")
                                                      (("1"
                                                        (replace

                                                         -1
                                                         :hide?

                                                         t)
                                                        (("1"
                                                          (use
                                                           "sum_emptyset[T,real,0,+]")
                                                          (("1"
                                                            (skosimp*)
                                                            (("1"
                                                              (use
                                                               "finite_empty")
                                                              nil)))))))
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (decompose-equality
                                                           +)
                                                          (("1"
                                                            (grind)
                                                            (("1"
                                                              (use
                                                               "card_emptyset[below(S)]")
                                                              (("1"
                                                                (expand
                                                                 "emptyset")
                                                                (("1"
                                                                  (assert)
                                                                  nil)))))))
                                                           ("2"
                                                            (skosimp*)
                                                            (("2"
                                                              (use
                                                               "finite_empty")
                                                              nil)))))))
                                                       ("3"
                                                        (skosimp*)
                                                        (("3"
                                                          (use
                                                           "finite_empty")
                                                          nil)))))))))))))))
                                           ("2"
                                            (hide 2 -1)
                                            (("2" (grind) nil)))))
                                         ("2"
                                          (use "finite_empty")
                                          nil)))))))))
                                 ("3"
                                  (skosimp*)
                                  (("3"
                                    (hide 4)
                                    (("3"
                                      (case "leq(f(e!1),f(s!1))")
                                      (("1"
                                        (case-replace
                                         "card(filter(leq)(add(e!1, S!1))(f)(s!1)) = card(filter(leq)(S!1)(f)(s!1)) + 1")
                                        (("1"
                                          (replace -3 :dir rl :hide? t)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (case
                                               "bag_to_set(u_filter(make_bag(S!1, f), f(s!1)))(f(e!1))")
                                              (("1"
                                                (case
                                                 "u_filter(make_bag(add(e!1, S!1), f), f(s!1))(f(e!1)) = u_filter(make_bag(S!1, f), f(s!1))(f(e!1)) + 1")
                                                (("1"
                                                  (lemma
                                                   "sum_x[T,real,0,+]")
                                                  (("1"
                                                    (inst-cp
                                                     -
                                                     "bag_to_set(u_filter(make_bag(add(e!1, S!1), f), f(s!1)))"
                                                     "LAMBDA (t: T): u_filter(make_bag(add(e!1, S!1), f), f(s!1))(t)"
                                                     "f(e!1)")
                                                    (("1"
                                                      (inst
                                                       -
                                                       "bag_to_set(u_filter(make_bag(S!1, f), f(s!1)))"
                                                       "LAMBDA (t: T): u_filter(make_bag(S!1, f), f(s!1))(t)"
                                                       "f(e!1)")
                                                      (("1"
                                                        (replace*)
                                                        (("1"
                                                          (hide
                                                           -1
                                                           -2
                                                           -3)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (lemma
                                                               "sum_particular[T,real,0,+]")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "remove(f(e!1),
                                                               bag_to_set(u_filter(make_bag(add(e!1, S!1), f), f(s!1))))"
                                                                 "LAMBDA (t: T): u_filter(make_bag(add(e!1, S!1), f), f(s!1))(t)"
                                                                 "f(e!1)")
                                                                (("1"
                                                                  (replace

                                                                   -
                                                                   :hide?

                                                                   t)
                                                                  (("1"
                                                                    (lift-if)
                                                                    (("1"
                                                                      (split)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (hide-all-but
                                                                           -1)
                                                                          (("1"
                                                                            (grind)
                                                                            nil)))))
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (hide
                                                                           1)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (name-replace
                                                                               "g"
                                                                               "LAMBDA (t: T): u_filter(make_bag(add(e!1, S!1), f), f(s!1))(t)")
                                                                              (("2"
                                                                                (case-replace
                                                                                 "remove(f(e!1),
                                                                     bag_to_set(u_filter(make_bag(add(e!1, S!1), f), f(s!1)))) = remove(f(e!1), bag_to_set(u_filter(make_bag(S!1, f), f(s!1))))")
                                                                                (("1"
                                                                                  (postpone)
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (decompose-equality
                                                                                     +)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "remove")
                                                                                      (("2"
                                                                                        (iff)
                                                                                        (("2"
                                                                                          (prop)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "member")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "bag_to_set")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "u_filter")
                                                                                                (("1"
                                                                                                  (lift-if)
                                                                                                  (("1"
                                                                                                    (prop)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "make_bag")
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "nonempty_card[below(S)]")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "{s: below(S) | S!1(s) AND f(s) = f(e!1)}")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "nonempty?")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "empty?")
                                                                                                                (("1"
                                                                                                                  (skosimp*)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "member")
                                                                                                                    (("1"
                                                                                                                      (flatten)
                                                                                                                      (("1"
                                                                                                                        (lemma
                                                                                                                         "nonempty_card[below(S)]")
                                                                                                                        (("1"
                                                                                                                          (inst?)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "nonempty?")
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "empty?")
                                                                                                                                (("1"
                                                                                                                                  (skosimp*)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "member")
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "add")
                                                                                                                                      (("1"
                                                                                                                                        (flatten)
                                                                                                                                        (("1"
                                                                                                                                          (split)
                                                                                                                                          (("1"
                                                                                                                                            (lemma
                                                                                                                                             "nonempty_card[below(S)]")
                                                                                                                                            (("1"
                                                                                                                                              (inst
                                                                                                                                               -
                                                                                                                                               "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (use
                                                                                                                                                 "finite_intersect")
                                                                                                                                                nil)))))
                                                                                                                                           ("2"
                                                                                                                                            (expand
                                                                                                                                             "member")
                                                                                                                                            (("2"
                                                                                                                                              (lemma
                                                                                                                                               "nonempty_card[below(S)]")
                                                                                                                                              (("2"
                                                                                                                                                (inst
                                                                                                                                                 -
                                                                                                                                                 "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (grind)
                                                                                                                                                    nil)))
                                                                                                                                                 ("2"
                                                                                                                                                  (use
                                                                                                                                                   "finite_intersect")
                                                                                                                                                  nil)))))))))))))))))))))))
                                                                                                                           ("2"
                                                                                                                            (use
                                                                                                                             "finite_add")
                                                                                                                            nil)))))))))))))))))
                                                                                                           ("2"
                                                                                                            (use
                                                                                                             "finite_intersect")
                                                                                                            nil)))))))))))))))))
                                                                                           ("2"
                                                                                            (grind)
                                                                                            (("2"
                                                                                              (lemma
                                                                                               "nonempty_card[below(S)]")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -
                                                                                                 "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (skosimp*)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "nonempty_card[below(S)]")
                                                                                                      (("1"
                                                                                                        (inst?)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (inst?)
                                                                                                            (("1"
                                                                                                              (prop)
                                                                                                              nil)))))
                                                                                                         ("2"
                                                                                                          (hide-all-but
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (use
                                                                                                             "finite_add")
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "LAMBDA (s: below(S)): f(s) = x!1"
                                                                                                               "S!1"
                                                                                                               "e!1")
                                                                                                              (("2"
                                                                                                                (grind)
                                                                                                                nil)))))))))))))))
                                                                                                 ("2"
                                                                                                  (hide-all-but
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (use
                                                                                                     "finite_intersect")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "LAMBDA (s: below(S)): f(s) = x!1"
                                                                                                       "S!1")
                                                                                                      (("2"
                                                                                                        (grind)
                                                                                                        nil)))))))))))))))))))))))))))))))))))))))))))))))))))
                                                     ("2"
                                                      (hide -1 3)
                                                      (("2"
                                                        (expand
                                                         "bag_to_set")
                                                        (("2"
                                                          (expand
                                                           "u_filter")
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (prop)
                                                              (("2"
                                                                (expand
                                                                 "make_bag")
                                                                (("2"
                                                                  (lemma
                                                                   "nonempty_card[below(S)]")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "{s: below(S) | S!1(s) AND f(s) = f(e!1)}")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "nonempty?")
                                                                        (("1"
                                                                          (expand
                                                                           "empty?")
                                                                          (("1"
                                                                            (skosimp*)
                                                                            (("1"
                                                                              (expand
                                                                               "member")
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "nonempty_card[below(S)]")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "{s: below(S) | add[below(S)](e!1, S!1)(s) AND f(s) = f(e!1)}")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "nonempty?")
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil)))))
                                                                                     ("2"
                                                                                      (use
                                                                                       "finite_add")
                                                                                      nil)))))))))))))))))
                                                                     ("2"
                                                                      (use
                                                                       "finite_intersect")
                                                                      nil)))))))))))))))))))))
                                                 ("2"
                                                  (hide 3)
                                                  (("2"
                                                    (expand "u_filter")
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (split)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (expand
                                                             "make_bag")
                                                            (("1"
                                                              (case-replace
                                                               "{s: below(S) | add(e!1, S!1)(s) AND f(s) = f(e!1)} = add(e!1, {s: below(S) | S!1(s) AND f(s) = f(e!1)})")
                                                              (("1"
                                                                (lemma
                                                                 "card_add[below(S)]")
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "{s: below(S) | S!1(s) AND f(s) = f(e!1)}"
                                                                   "e!1")
                                                                  (("1"
                                                                    (replace

                                                                     -1)
                                                                    (("1"
                                                                      (assert)
                                                                      nil)))
                                                                   ("2"
                                                                    (use
                                                                     "finite_intersect")
                                                                    nil)))))
                                                               ("2"
                                                                (hide
                                                                 -2
                                                                 2)
                                                                (("2"
                                                                  (decompose-equality
                                                                   +)
                                                                  (("2"
                                                                    (grind)
                                                                    nil)))))))))))
                                                         ("2"
                                                          (flatten)
                                                          nil)))))))))))
                                               ("2"
                                                (lemma
                                                 "sum_x[T,real,0,+]")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (inst - "f(e!1)")
                                                    (("1"
                                                      (replace

                                                       -
                                                       :hide?

                                                       t)
                                                      (("1"
                                                        (case-replace
                                                         "remove(f(e!1),
                                            bag_to_set(u_filter(make_bag(add(e!1, S!1), f),
                                                                f(s!1)))) = bag_to_set(u_filter(make_bag(S!1, f), f(s!1)))")
                                                        (("1"
                                                          (lemma
                                                           "sum_particular[T,real,0,+]")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (replace

                                                                 -1
                                                                 :hide?

                                                                 t)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case
                                                                     "u_filter(make_bag(add(e!1, S!1), f), f(s!1))(f(e!1)) = 1")
                                                                    (("1"
                                                                      (replace

                                                                       -
                                                                       :hide?

                                                                       t)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (postpone)
                                                                          nil)))))
                                                                     ("2"
                                                                      (hide
                                                                       -1
                                                                       4)
                                                                      (("2"
                                                                        (expand
                                                                         "bag_to_set")
                                                                        (("2"
                                                                          (expand
                                                                           "u_filter")
                                                                          (("2"
                                                                            (expand
                                                                             "make_bag")
                                                                            (("2"
                                                                              (lemma
                                                                               "nonempty_card[below(S)]")
                                                                              (("2"
                                                                                (inst
                                                                                 -
                                                                                 "{s: below(S) | S!1(s) AND f(s) = f(e!1)}")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "nonempty?")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "empty?")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "member")
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "card_one[below(S)]")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -
                                                                                             "{s: below(S) | add(e!1, S!1)(s) AND f(s) = f(e!1)}")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (inst?)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "singleton")
                                                                                                  (("1"
                                                                                                    (decompose-equality
                                                                                                     +)
                                                                                                    (("1"
                                                                                                      (grind)
                                                                                                      nil)))))))))
                                                                                             ("2"
                                                                                              (use
                                                                                               "finite_add")
                                                                                              nil)))))))))))))
                                                                                 ("2"
                                                                                  (use
                                                                                   "finite_intersect")
                                                                                  nil)))))))))))))))))))))))))
                                                         ("2"
                                                          (hide 4)
                                                          (("2"
                                                            (decompose-equality
                                                             +)
                                                            (("2"
                                                              (iff)
                                                              (("2"
                                                                (grind)
                                                                (("1"
                                                                  (lemma
                                                                   "nonempty_card[below(S)]")
                                                                  (("1"
                                                                    (inst-cp
                                                                     -
                                                                     "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1}")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (skosimp*)
                                                                        (("1"
                                                                          (split)
                                                                          (("1"
                                                                            (replace*)
                                                                            nil)
                                                                           ("2"
                                                                            (inst
                                                                             -
                                                                             "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil)
                                                                                   ("2"
                                                                                    (propax)
                                                                                    nil)))))))
                                                                             ("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (use
                                                                                 "finite_intersect")
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "LAMBDA (s: below(S)): f(s) = x!1"
                                                                                   "S!1")
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil)))))))))))))))
                                                                     ("2"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("2"
                                                                        (use
                                                                         "finite_add")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "LAMBDA (s: below(S)): f(s) = x!1"
                                                                           "S!1"
                                                                           "e!1")
                                                                          (("2"
                                                                            (grind)
                                                                            nil)))))))))))
                                                                 ("2"
                                                                  (lemma
                                                                   "nonempty_card[below(S)]")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (skosimp*)
                                                                        (("1"
                                                                          (lemma
                                                                           "nonempty_card[below(S)]")
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1}")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (prop)
                                                                                  nil)))))
                                                                             ("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (use
                                                                                 "finite_add")
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "LAMBDA (s: below(S)): f(s) = x!1"
                                                                                   "S!1"
                                                                                   "e!1")
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil)))))))))))))))
                                                                     ("2"
                                                                      (use
                                                                       "finite_intersect")
                                                                      (("2"
                                                                        (grind)
                                                                        nil)))))))))))))))))))
                                                     ("2"
                                                      (hide 4)
                                                      (("2"
                                                        (grind)
                                                        (("2"
                                                          (lemma
                                                           "nonempty_card[below(S)]")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = f(e!1)}")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst?)
                                                                nil)))
                                                             ("2"
                                                              (hide-all-but
                                                               1)
                                                              (("2"
                                                                (use
                                                                 "finite_add")
                                                                (("2"
                                                                  (grind)
                                                                  nil)))))))))))))))))))))))))
                                         ("2"
                                          (hide -2 3)
                                          (("2"
                                            (expand "filter")
                                            (("2"
                                              (expand "add")
                                              (("2"
                                                (expand "member")
                                                (("2"
                                                  (case-replace
                                                   "(LAMBDA (j: below(S)): (e!1 = j OR S!1(j)) AND leq(f(j), f(s!1))) = add(e!1, LAMBDA (j: below(S)): S!1(j) AND leq(f(j), f(s!1)))")
                                                  (("1"
                                                    (lemma
                                                     "card_add[below(S)]")
                                                    (("1"
                                                      (inst
                                                       -
                                                       "LAMBDA (j: below(S)): S!1(j) AND leq(f(j), f(s!1))"
                                                       "e!1")
                                                      (("1"
                                                        (replace -)
                                                        (("1"
                                                          (assert)
                                                          nil)))
                                                       ("2"
                                                        (use
                                                         "finite_intersect")
                                                        nil)))))
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (decompose-equality
                                                       +)
                                                      (("2"
                                                        (grind)
                                                        nil)))))))))))))))))
                                       ("2"
                                        (case-replace
                                         "filter(leq)(add(e!1, S!1))(f)(s!1) = filter(leq)(S!1)(f)(s!1)")
                                        (("1"
                                          (replace -2 :dir rl :hide? t)
                                          (("1"
                                            (case-replace
                                             "bag_to_set(u_filter(make_bag(add(e!1, S!1), f), f(s!1))) = bag_to_set(u_filter(make_bag(S!1, f), f(s!1)))")
                                            (("1"
                                              (lemma
                                               "sum_particular[T,real,0,+]")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (inst - "f(e!1)")
                                                  (("1"
                                                    (replace

                                                     -1
                                                     :hide?

                                                     t)
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (case-replace
                                                             "u_filter(make_bag(add(e!1, S!1), f), f(s!1))(f(e!1)) = 0")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (postpone)
                                                                nil)))
                                                             ("2"
                                                              (hide
                                                               -1
                                                               -2
                                                               -3
                                                               2)
                                                              (("2"
                                                                (grind)
                                                                nil)))))))
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (postpone)
                                                              nil)))))))))))))))))
                                             ("2"
                                              (hide -1 4)
                                              (("2"
                                                (decompose-equality +)
                                                (("2"
                                                  (grind)
                                                  (("1"
                                                    (case
                                                     "x!1 = f(e!1)")
                                                    (("1"
                                                      (hide-all-but
                                                       (-1 -4 2))
                                                      (("1"
                                                        (typepred!
                                                         "leq")
                                                        (("1"
                                                          (grind)
                                                          nil)))))
                                                     ("2"
                                                      (lemma
                                                       "nonempty_card[below(S)]")
                                                      (("2"
                                                        (inst-cp
                                                         -
                                                         "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1}")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (skosimp*)
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (replace*)
                                                                nil)
                                                               ("2"
                                                                (inst
                                                                 -
                                                                 "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      nil)))))
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (use
                                                                     "finite_intersect")
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "LAMBDA (s: below(S)): f(s) = x!1"
                                                                       "S!1")
                                                                      (("2"
                                                                        (grind)
                                                                        nil)))))))))))))))
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (use
                                                             "finite_add")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "LAMBDA (s: below(S)): f(s) = x!1"
                                                               "S!1"
                                                               "e!1")
                                                              (("2"
                                                                (grind)
                                                                nil)))))))))))))
                                                   ("2"
                                                    (lemma
                                                     "nonempty_card[below(S)]")
                                                    (("2"
                                                      (inst-cp
                                                       -
                                                       "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (skosimp*)
                                                          (("1"
                                                            (inst
                                                             -
                                                             "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1}")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (assert)
                                                                  nil)))))
                                                             ("2"
                                                              (hide-all-but
                                                               1)
                                                              (("2"
                                                                (use
                                                                 "finite_add")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "LAMBDA (s: below(S)): f(s) = x!1"
                                                                   "S!1"
                                                                   "e!1")
                                                                  (("2"
                                                                    (grind)
                                                                    nil)))))))))))))
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (use
                                                           "finite_intersect")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "LAMBDA (s: below(S)): f(s) = x!1"
                                                             "S!1")
                                                            (("2"
                                                              (grind)
                                                              nil)))))))))))))))))))))
                                         ("2"
                                          (hide -1 4)
                                          (("2"
                                            (decompose-equality +)
                                            (("2"
                                              (grind)
                                              nil))))))))))))))))))))))))))))))))))))))))))
    nil)
   untried nil 22888 16430 nil nil))
 (exists_mid_val 0
  (exists_mid_val-1 nil 3287311926 3292683161
   ("" (skolem + ("f" "e" "t"))
    (("" (flatten)
      (("" (skosimp*)
        (("" (expand "mid_val?")
          (("" (typepred! "s!1")
            (("" (hide -1)
              (("" (split)
                (("1" (use "mid_val_l") (("1" (assert) nil nil)) nil)
                 ("2" (use "mid_val_u") (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((mid_val? const-decl "bool" middle_value_select "structures/")
    (mid_val_u formula-decl nil mid_val_equiv nil)
    (mid_val_l formula-decl nil mid_val_equiv nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (S formal-const-decl "posnat" mid_val_equiv nil)
    (below type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (T formal-nonempty-type-decl nil mid_val_equiv nil)
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (leq formal-const-decl "(total_order?[T])" mid_val_equiv nil)
    (middle_value const-decl "bool" middle_value_index nil)
    (empty? const-decl "bool" sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil))
   448 390 t shostak))
 (nonempty_choose 0
  (nonempty_choose-1 nil 3287413145 3292683163
   ("" (skosimp*)
    ((""
      (case "NOT empty?(intersection(l_filter(make_bag(eligible_set!1, actual!1), t!1), u_filter(make_bag(eligible_set!1, actual!1), t!1)))")
      (("1" (hide -1 -2)
        (("1" (expand "empty?")
          (("1" (skosimp*)
            (("1" (expand "intersection")
              (("1" (expand "l_filter")
                (("1" (expand "u_filter")
                  (("1" (expand "make_bag")
                    (("1" (lift-if)
                      (("1" (lift-if)
                        (("1" (prop)
                          (("1" (typepred! "leq")
                            (("1" (expand "total_order?")
                              (("1"
                                (expand "partial_order?")
                                (("1"
                                  (expand "preorder?")
                                  (("1"
                                    (expand "antisymmetric?")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace -3)
                                            (("1"
                                              (expand "min")
                                              (("1"
                                                (lemma
                                                 "nonempty_card[below(S)]")
                                                (("1"
                                                  (inst
                                                   -
                                                   "{s: below(S) | eligible_set!1(s) AND actual!1(s) = t!1}")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "nonempty?")
                                                      (("1"
                                                        (expand
                                                         "empty?")
                                                        (("1"
                                                          (skosimp*)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (expand
                                                               "member")
                                                              (("1"
                                                                (flatten)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "member")
                                                              (("2"
                                                                (flatten)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (use
                                                     "finite_intersect")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "min") (("2" (grind) nil nil))
                            nil)
                           ("3" (grind) nil nil)
                           ("4" (expand "min") (("4" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (use "maj_pigeonhole")
        (("2" (assert)
          (("2" (split)
            (("1" (hide -3 -4)
              (("1" (skosimp*)
                (("1" (expand "empty?")
                  (("1" (inst?) (("1" (grind) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (use "l_filter_subbag") nil nil)
             ("3" (use "u_filter_subbag") nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((u_filter const-decl "bag" bag_filters "structures/")
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (make_bag const-decl "finite_bag[T]" make_bag nil)
    (finite_bag type-eq-decl nil finite_bags "structures/")
    (is_finite const-decl "bool" finite_bags "structures/")
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (S formal-const-decl "posnat" mid_val_equiv nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (l_filter const-decl "bag" bag_filters "structures/")
    (leq formal-const-decl "(total_order?[T])" mid_val_equiv nil)
    (total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (intersection const-decl "bag" bags "structures/")
    (empty? const-decl "bool" bags "structures/")
    (bag type-eq-decl nil bags "structures/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-nonempty-type-decl nil mid_val_equiv nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (preorder? const-decl "bool" orders nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (eligible_set!1 skolem-const-decl "non_empty_finite_set[below(S)]"
     mid_val_equiv nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (actual!1 skolem-const-decl "[below(S) -> T]" mid_val_equiv nil)
    (t!1 skolem-const-decl "T" mid_val_equiv nil)
    (nonempty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (x!2 skolem-const-decl "below(S)" mid_val_equiv nil)
    (finite_intersect formula-decl nil make_bag nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (antisymmetric? const-decl "bool" relations nil)
    (partial_order? const-decl "bool" orders nil)
    (x!1 skolem-const-decl "T" mid_val_equiv nil)
    (below type-eq-decl nil nat_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (injective? const-decl "bool" functions nil)
    (u_filter_subbag formula-decl nil bag_filters "structures/")
    (l_filter_subbag formula-decl nil bag_filters "structures/")
    (member const-decl "bool" bags "structures/")
    (x!1 skolem-const-decl "T" mid_val_equiv nil)
    (maj_pigeonhole formula-decl nil bag_filters "structures/"))
   2474 2140 t shostak))
 (filter_l_TCC1 0
  (filter_l_TCC1-1 nil 3287487763 3289836914
   ("" (skosimp*)
    (("" (use "nonempty_choose")
      (("" (assert) (("" (hide -2 -3) (("" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   proved-complete
   ((nonempty_choose formula-decl nil mid_val_equiv nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil mid_val_equiv nil)
    (below type-eq-decl nil naturalnumbers nil)
    (S formal-const-decl "posnat" mid_val_equiv nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   350 340 t shostak))
 (filter_l 0
  (filter_l-4 nil 3287492626 3292683180
   ("" (skolem + ("f!1" "e!1" "t!1"))
    (("" (flatten)
      (("" (use "nonempty_choose")
        (("" (assert)
          (("" (use "card_make_bag")
            (("" (replace -1 :hide? t)
              ((""
                (case-replace
                 "card(l_filter(make_bag(e!1, f!1), t!1)) = card(filter(leq)(e!1)(f!1)(choose({s: (e!1) | f!1(s) = t!1})))")
                (("" (hide -2 -3 2)
                  (("" (expand "card")
                    (("" (lemma "finite_set_ind_modified[below(S)]")
                      ((""
                        (inst -
                         "LAMBDA (ee: finite_set[below(S)]): sum(bag_to_set(l_filter(make_bag(ee, f!1), t!1)),
                      LAMBDA (t: T): l_filter(make_bag(ee, f!1), t!1)(t))
                   = card(filter(leq)(ee)(f!1)(choose({s: (e!1) | f!1(s) = t!1})))")
                        (("" (split)
                          (("1" (inst?) nil nil)
                           ("2" (hide 2)
                            (("2" (expand "sum")
                              (("2"
                                (lift-if)
                                (("2"
                                  (prop)
                                  (("1"
                                    (expand "filter")
                                    (("1"
                                      (expand "emptyset")
                                      (("1"
                                        (expand "empty?")
                                        (("1"
                                          (expand "member")
                                          (("1"
                                            (expand "bag_to_set")
                                            (("1"
                                              (expand "make_bag")
                                              (("1"
                                                (expand "l_filter")
                                                (("1"
                                                  (use
                                                   "empty_card[below(S)]")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "empty?")
                                                      (("1"
                                                        (skosimp*)
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (expand
                                                             "member")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (use
                                                     "finite_empty")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (expand "bag_to_set")
                                      (("2"
                                        (expand "l_filter")
                                        (("2"
                                          (expand "make_bag")
                                          (("2"
                                            (expand "emptyset")
                                            (("2"
                                              (expand "empty?")
                                              (("2"
                                                (skosimp*)
                                                (("2"
                                                  (expand "member")
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (split)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (use
                                                           "empty_card[below(S)]")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "empty?")
                                                              (("1"
                                                                (skosimp*)
                                                                (("1"
                                                                  (expand
                                                                   "member")
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (use
                                                             "finite_empty")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (skosimp*)
                            (("3" (hide 3)
                              (("3"
                                (case "leq(f!1(e!2),t!1)")
                                (("1"
                                  (case-replace
                                   "card(filter(leq)(add(e!2, S!1))(f!1)(choose({s: (e!1) | f!1(s) = t!1}))) = card(filter(leq)(S!1)(f!1)(choose({s: (e!1) | f!1(s) = t!1}))) + 1")
                                  (("1"
                                    (replace -3 :dir rl :hide? t)
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (case
                                         "bag_to_set(l_filter(make_bag(S!1, f!1), t!1))(f!1(e!2))")
                                        (("1"
                                          (case
                                           "l_filter(make_bag(add(e!2, S!1), f!1), t!1)(f!1(e!2)) = l_filter(make_bag(S!1, f!1), t!1)(f!1(e!2)) + 1")
                                          (("1"
                                            (lemma "sum_x[T,real,0,+]")
                                            (("1"
                                              (inst-cp
                                               -
                                               "bag_to_set(l_filter(make_bag(add(e!2, S!1), f!1), t!1))"
                                               "LAMBDA (t: T): l_filter(make_bag(add(e!2, S!1), f!1), t!1)(t)"
                                               "f!1(e!2)")
                                              (("1"
                                                (inst
                                                 -
                                                 "bag_to_set(l_filter(make_bag(S!1, f!1), t!1))"
                                                 "LAMBDA (t: T): l_filter(make_bag(S!1, f!1), t!1)(t)"
                                                 "f!1(e!2)")
                                                (("1"
                                                  (replace*)
                                                  (("1"
                                                    (hide -1 -2 -3)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lemma
                                                         "sum_particular2[T,real,0,+]")
                                                        (("1"
                                                          (inst
                                                           -
                                                           "remove(f!1(e!2),
                                                                                                                                                   bag_to_set(l_filter(make_bag(add(e!2, S!1), f!1), t!1)))"
                                                           "LAMBDA (t: T): l_filter(make_bag(add(e!2, S!1), f!1), t!1)(t)"
                                                           "f!1(e!2)")
                                                          (("1"
                                                            (replace

                                                             -
                                                             :hide?

                                                             t)
                                                            (("1"
                                                              (lift-if)
                                                              (("1"
                                                                (split)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (hide-all-but
                                                                     -1)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (hide
                                                                     1)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (name-replace
                                                                         "g"
                                                                         "LAMBDA (t: T): l_filter(make_bag(add(e!2, S!1), f!1), t!1)(t)")
                                                                        (("2"
                                                                          (case-replace
                                                                           "remove(f!1(e!2),
                                                                                                                                                                     bag_to_set(l_filter(make_bag(add(e!2, S!1), f!1), t!1))) = remove(f!1(e!2), bag_to_set(l_filter(make_bag(S!1, f!1), t!1)))")
                                                                          (("1"
                                                                            (hide
                                                                             -1)
                                                                            (("1"
                                                                              (use
                                                                               "sum_f_g[T,real,0,+]")
                                                                              (("1"
                                                                                (split)
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (skosimp*)
                                                                                  (("2"
                                                                                    (hide
                                                                                     2)
                                                                                    (("2"
                                                                                      (lift-if)
                                                                                      (("2"
                                                                                        (typepred!
                                                                                         "x!1")
                                                                                        (("2"
                                                                                          (split)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (grind)
                                                                                              (("2"
                                                                                                (case-replace
                                                                                                 "{s: below(S) | (e!2 = s OR S!1(s)) AND f!1(s) = x!1} = {s: below(S) | S!1(s) AND f!1(s) = x!1}")
                                                                                                (("2"
                                                                                                  (hide
                                                                                                   3)
                                                                                                  (("2"
                                                                                                    (decompose-equality
                                                                                                     +)
                                                                                                    (("2"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             2)
                                                                            (("2"
                                                                              (decompose-equality
                                                                               +)
                                                                              (("2"
                                                                                (expand
                                                                                 "remove")
                                                                                (("2"
                                                                                  (iff)
                                                                                  (("2"
                                                                                    (prop)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "member")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "bag_to_set")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "l_filter")
                                                                                          (("1"
                                                                                            (lift-if)
                                                                                            (("1"
                                                                                              (prop)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "make_bag")
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "nonempty_card[below(S)]")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "{s: below(S) | S!1(s) AND f!1(s) = f!1(e!2)}")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "nonempty?")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "empty?")
                                                                                                          (("1"
                                                                                                            (skosimp*)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "member")
                                                                                                              (("1"
                                                                                                                (flatten)
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "nonempty_card[below(S)]")
                                                                                                                  (("1"
                                                                                                                    (inst?)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "nonempty?")
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "empty?")
                                                                                                                          (("1"
                                                                                                                            (skosimp*)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "member")
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "add")
                                                                                                                                (("1"
                                                                                                                                  (flatten)
                                                                                                                                  (("1"
                                                                                                                                    (split)
                                                                                                                                    (("1"
                                                                                                                                      (lemma
                                                                                                                                       "nonempty_card[below(S)]")
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         -
                                                                                                                                         "{s: below(S) | S!1(s) AND f!1(s) = x!1}")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (use
                                                                                                                                           "finite_intersect")
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (expand
                                                                                                                                       "member")
                                                                                                                                      (("2"
                                                                                                                                        (lemma
                                                                                                                                         "nonempty_card[below(S)]")
                                                                                                                                        (("2"
                                                                                                                                          (inst
                                                                                                                                           -
                                                                                                                                           "{s: below(S) | S!1(s) AND f!1(s) = x!1}")
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            (("1"
                                                                                                                                              (grind)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (use
                                                                                                                                             "finite_intersect")
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (use
                                                                                                                       "finite_add")
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (use
                                                                                                       "finite_intersect")
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (grind)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "nonempty_card[below(S)]")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -
                                                                                           "{s: below(S) | S!1(s) AND f!1(s) = x!1}")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (skosimp*)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "nonempty_card[below(S)]")
                                                                                                (("1"
                                                                                                  (inst?)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (inst?)
                                                                                                      (("1"
                                                                                                        (prop)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide-all-but
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (use
                                                                                                       "finite_add")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "LAMBDA (s: below(S)): f!1(s) = x!1"
                                                                                                         "S!1"
                                                                                                         "e!2")
                                                                                                        (("2"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide-all-but
                                                                                             1)
                                                                                            (("2"
                                                                                              (use
                                                                                               "finite_intersect")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -
                                                                                                 "LAMBDA (s: below(S)): f!1(s) = x!1"
                                                                                                 "S!1")
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide -1 3)
                                                (("2"
                                                  (expand "bag_to_set")
                                                  (("2"
                                                    (expand "l_filter")
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (prop)
                                                        (("2"
                                                          (expand
                                                           "make_bag")
                                                          (("2"
                                                            (lemma
                                                             "nonempty_card[below(S)]")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "{s: below(S) | S!1(s) AND f!1(s) = f!1(e!2)}")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "nonempty?")
                                                                  (("1"
                                                                    (expand
                                                                     "empty?")
                                                                    (("1"
                                                                      (skosimp*)
                                                                      (("1"
                                                                        (expand
                                                                         "member")
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (lemma
                                                                             "nonempty_card[below(S)]")
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "{s: below(S) | add[below(S)](e!2, S!1)(s) AND f!1(s) = f!1(e!2)}")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "nonempty?")
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (use
                                                                                 "finite_add")
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (use
                                                                 "finite_intersect")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 3)
                                            (("2"
                                              (expand "l_filter")
                                              (("2"
                                                (lift-if)
                                                (("2"
                                                  (split)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (expand
                                                       "make_bag")
                                                      (("1"
                                                        (case-replace
                                                         "{s: below(S) | add(e!2, S!1)(s) AND f!1(s) = f!1(e!2)} = add(e!2, {s: below(S) | S!1(s) AND f!1(s) = f!1(e!2)})")
                                                        (("1"
                                                          (lemma
                                                           "card_add[below(S)]")
                                                          (("1"
                                                            (inst
                                                             -
                                                             "{s: below(S) | S!1(s) AND f!1(s) = f!1(e!2)}"
                                                             "e!2")
                                                            (("1"
                                                              (replace

                                                               -1)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (use
                                                               "finite_intersect")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide -2 2)
                                                          (("2"
                                                            (decompose-equality
                                                             +)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma "sum_x[T,real,0,+]")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (inst - "f!1(e!2)")
                                              (("1"
                                                (replace - :hide? t)
                                                (("1"
                                                  (case-replace
                                                   "remove(f!1(e!2),
                                                                                                                    bag_to_set(l_filter(make_bag(add(e!2, S!1), f!1),
                                                                                                                                        t!1))) = bag_to_set(l_filter(make_bag(S!1, f!1), t!1))")
                                                  (("1"
                                                    (lemma
                                                     "sum_particular2[T,real,0,+]")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (replace

                                                           -1
                                                           :hide?

                                                           t)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (case
                                                               "l_filter(make_bag(add(e!2, S!1), f!1), t!1)(f!1(e!2)) = 1")
                                                              (("1"
                                                                (replace

                                                                 -
                                                                 :hide?

                                                                 t)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case-replace
                                                                     "(LAMBDA (t_1: T):
                                                                                        IF t_1 = f!1(e!2) THEN 0
                                                                                        ELSE l_filter(make_bag(add(e!2, S!1), f!1), t!1)(t_1)
                                                                                        ENDIF) = LAMBDA (t: T): l_filter(make_bag(S!1, f!1), t!1)(t)")
                                                                    (("1"
                                                                      (hide
                                                                       4)
                                                                      (("1"
                                                                        (decompose-equality
                                                                         +)
                                                                        (("1"
                                                                          (lift-if)
                                                                          (("1"
                                                                            (split)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (expand
                                                                                 "bag_to_set")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (hide
                                                                                 -1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "bag_to_set")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "l_filter")
                                                                                    (("2"
                                                                                      (lift-if)
                                                                                      (("2"
                                                                                        (split)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "make_bag")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "add")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "member")
                                                                                                (("1"
                                                                                                  (case-replace
                                                                                                   "{s: below(S) | (e!2 = s OR S!1(s)) AND f!1(s) = x!1} = {s: below(S) | S!1(s) AND f!1(s) = x!1}")
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     2)
                                                                                                    (("1"
                                                                                                      (decompose-equality
                                                                                                       +)
                                                                                                      (("1"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 -1
                                                                 4)
                                                                (("2"
                                                                  (expand
                                                                   "bag_to_set")
                                                                  (("2"
                                                                    (expand
                                                                     "l_filter")
                                                                    (("2"
                                                                      (expand
                                                                       "make_bag")
                                                                      (("2"
                                                                        (lemma
                                                                         "nonempty_card[below(S)]")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "{s: below(S) | S!1(s) AND f!1(s) = f!1(e!2)}")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "nonempty?")
                                                                              (("1"
                                                                                (expand
                                                                                 "empty?")
                                                                                (("1"
                                                                                  (expand
                                                                                   "member")
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "card_one[below(S)]")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "{s: below(S) | add(e!2, S!1)(s) AND f!1(s) = f!1(e!2)}")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (inst?)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "singleton")
                                                                                            (("1"
                                                                                              (decompose-equality
                                                                                               +)
                                                                                              (("1"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (use
                                                                                         "finite_add")
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (use
                                                                             "finite_intersect")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 4)
                                                    (("2"
                                                      (decompose-equality
                                                       +)
                                                      (("2"
                                                        (iff)
                                                        (("2"
                                                          (grind)
                                                          (("1"
                                                            (lemma
                                                             "nonempty_card[below(S)]")
                                                            (("1"
                                                              (inst-cp
                                                               -
                                                               "{s: below(S) | (e!2 = s OR S!1(s)) AND f!1(s) = x!1}")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (skosimp*)
                                                                  (("1"
                                                                    (split)
                                                                    (("1"
                                                                      (replace*)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (inst
                                                                       -
                                                                       "{s: below(S) | S!1(s) AND f!1(s) = x!1}")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (split)
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("2"
                                                                          (use
                                                                           "finite_intersect")
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "LAMBDA (s: below(S)): f!1(s) = x!1"
                                                                             "S!1")
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (use
                                                                   "finite_add")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "LAMBDA (s: below(S)): f!1(s) = x!1"
                                                                     "S!1"
                                                                     "e!2")
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (lemma
                                                             "nonempty_card[below(S)]")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "{s: below(S) | S!1(s) AND f!1(s) = x!1}")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (skosimp*)
                                                                  (("1"
                                                                    (lemma
                                                                     "nonempty_card[below(S)]")
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "{s: below(S) | (e!2 = s OR S!1(s)) AND f!1(s) = x!1}")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (prop)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("2"
                                                                          (use
                                                                           "finite_add")
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "LAMBDA (s: below(S)): f!1(s) = x!1"
                                                                             "S!1"
                                                                             "e!2")
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (use
                                                                 "finite_intersect")
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 4)
                                                (("2"
                                                  (grind)
                                                  (("2"
                                                    (lemma
                                                     "nonempty_card[below(S)]")
                                                    (("2"
                                                      (inst
                                                       -
                                                       "{s: below(S) | (e!2 = s OR S!1(s)) AND f!1(s) = f!1(e!2)}")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst?)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (use
                                                           "finite_add")
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide -2 3)
                                    (("2"
                                      (expand "filter")
                                      (("2"
                                        (expand "add")
                                        (("2"
                                          (expand "member")
                                          (("2"
                                            (case-replace
                                             "(LAMBDA (j: below(S)): (e!2 = j OR S!1(j)) AND leq(f!1(j), f!1(choose({s: (e!1) | f!1(s) = t!1})))) = add(e!2, LAMBDA (j: below(S)): S!1(j) AND leq(f!1(j), f!1(choose({s: (e!1) | f!1(s) = t!1}))))")
                                            (("1"
                                              (lemma
                                               "card_add[below(S)]")
                                              (("1"
                                                (inst
                                                 -
                                                 "LAMBDA (j: below(S)): S!1(j) AND leq(f!1(j), f!1(choose({s: (e!1) | f!1(s) = t!1})))"
                                                 "e!2")
                                                (("1"
                                                  (replace -)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (use
                                                   "finite_intersect")
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (decompose-equality +)
                                                (("2"
                                                  (grind)
                                                  (("2"
                                                    (use
                                                     "epsilon_ax[below(S)]")
                                                    (("1"
                                                      (split)
                                                      (("1"
                                                        (use
                                                         "epsilon_ax[(e!1)]")
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (replace*)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (inst
                                                             +
                                                             "x!2")
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (inst
                                                           +
                                                           "x!2")
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (inst?)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (inst + "0")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (case-replace
                                   "filter(leq)(add(e!2, S!1))(f!1)(choose({s: (e!1) | f!1(s) = t!1})) = filter(leq)(S!1)(f!1)(choose({s: (e!1) | f!1(s) = t!1}))")
                                  (("1"
                                    (replace -2 :dir rl :hide? t)
                                    (("1"
                                      (case-replace
                                       "bag_to_set(l_filter(make_bag(add(e!2, S!1), f!1), t!1)) = bag_to_set(l_filter(make_bag(S!1, f!1), t!1))")
                                      (("1"
                                        (lemma
                                         "sum_particular2[T,real,0,+]")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (inst - "f!1(e!2)")
                                            (("1"
                                              (replace -1 :hide? t)
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (case-replace
                                                       "l_filter(make_bag(add(e!2, S!1), f!1), t!1)(f!1(e!2)) = 0")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide
                                                           -2
                                                           -3
                                                           -4)
                                                          (("1"
                                                            (case-replace
                                                             "(LAMBDA (t_1: T):
                                                                    IF t_1 = f!1(e!2) THEN 0
                                                                    ELSE l_filter(make_bag(add(e!2, S!1), f!1), t!1)(t_1)
                                                                    ENDIF) = LAMBDA (t: T): l_filter(make_bag(S!1, f!1), t!1)(t)")
                                                            (("1"
                                                              (hide 2)
                                                              (("1"
                                                                (decompose-equality
                                                                 +)
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (split)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (expand
                                                                         "l_filter")
                                                                        (("2"
                                                                          (lift-if)
                                                                          (("2"
                                                                            (split)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (expand
                                                                                 "make_bag")
                                                                                (("1"
                                                                                  (case-replace
                                                                                   "{s: below(S) | add(e!2, S!1)(s) AND f!1(s) = x!1} = {s: below(S) | S!1(s) AND f!1(s) = x!1}")
                                                                                  (("1"
                                                                                    (hide
                                                                                     2)
                                                                                    (("1"
                                                                                      (decompose-equality
                                                                                       +)
                                                                                      (("1"
                                                                                        (iff)
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide
                                                         -1
                                                         -2
                                                         -3
                                                         2)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (case-replace
                                                         "(LAMBDA (t_1: T):
                                                            IF t_1 = f!1(e!2) THEN 0
                                                            ELSE l_filter(make_bag(add(e!2, S!1), f!1), t!1)(t_1)
                                                            ENDIF) = LAMBDA (t: T): l_filter(make_bag(S!1, f!1), t!1)(t)")
                                                        (("2"
                                                          (hide 3)
                                                          (("2"
                                                            (decompose-equality
                                                             +)
                                                            (("2"
                                                              (lift-if)
                                                              (("2"
                                                                (split)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (expand
                                                                     "bag_to_set")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (hide
                                                                     -1
                                                                     -2)
                                                                    (("2"
                                                                      (expand
                                                                       "bag_to_set")
                                                                      (("2"
                                                                        (expand
                                                                         "l_filter")
                                                                        (("2"
                                                                          (lift-if)
                                                                          (("2"
                                                                            (split)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (expand
                                                                                 "make_bag")
                                                                                (("1"
                                                                                  (expand
                                                                                   "add")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "member")
                                                                                    (("1"
                                                                                      (case-replace
                                                                                       "{s: below(S) | (e!2 = s OR S!1(s)) AND f!1(s) = x!1} = {s: below(S) | S!1(s) AND f!1(s) = x!1}")
                                                                                      (("1"
                                                                                        (hide
                                                                                         2)
                                                                                        (("1"
                                                                                          (decompose-equality
                                                                                           +)
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -1 4)
                                        (("2"
                                          (decompose-equality +)
                                          (("2"
                                            (grind)
                                            (("1"
                                              (case "x!1 = f!1(e!2)")
                                              (("1"
                                                (hide-all-but
                                                 (-1 -4 2))
                                                (("1"
                                                  (typepred! "leq")
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma
                                                 "nonempty_card[below(S)]")
                                                (("2"
                                                  (inst-cp
                                                   -
                                                   "{s: below(S) | (e!2 = s OR S!1(s)) AND f!1(s) = x!1}")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (skosimp*)
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (replace*)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (inst
                                                           -
                                                           "{s: below(S) | S!1(s) AND f!1(s) = x!1}")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (use
                                                               "finite_intersect")
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "LAMBDA (s: below(S)): f!1(s) = x!1"
                                                                 "S!1")
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (use
                                                       "finite_add")
                                                      (("2"
                                                        (inst
                                                         -
                                                         "LAMBDA (s: below(S)): f!1(s) = x!1"
                                                         "S!1"
                                                         "e!2")
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma
                                               "nonempty_card[below(S)]")
                                              (("2"
                                                (inst-cp
                                                 -
                                                 "{s: below(S) | S!1(s) AND f!1(s) = x!1}")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (skosimp*)
                                                    (("1"
                                                      (inst
                                                       -
                                                       "{s: below(S) | (e!2 = s OR S!1(s)) AND f!1(s) = x!1}")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (use
                                                           "finite_add")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "LAMBDA (s: below(S)): f!1(s) = x!1"
                                                             "S!1"
                                                             "e!2")
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (use
                                                     "finite_intersect")
                                                    (("2"
                                                      (inst
                                                       -
                                                       "LAMBDA (s: below(S)): f!1(s) = x!1"
                                                       "S!1")
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide -1 4)
                                    (("2"
                                      (decompose-equality +)
                                      (("2"
                                        (grind)
                                        (("2"
                                          (use "epsilon_ax[below(S)]")
                                          (("1"
                                            (split)
                                            (("1"
                                              (use "epsilon_ax[(e!1)]")
                                              (("1"
                                                (split)
                                                (("1"
                                                  (replace*)
                                                  nil
                                                  nil)
                                                 ("2" (inst?) nil nil))
                                                nil)
                                               ("2"
                                                (inst + "x!2")
                                                nil
                                                nil))
                                              nil)
                                             ("2" (inst?) nil nil))
                                            nil)
                                           ("2" (inst + "0") nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((finite_set_ind_modified formula-decl nil finite_sets_inductions
     "finite_sets/")
    (emptyset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (empty_card formula-decl nil finite_sets nil)
    (FALSE const-decl "bool" booleans nil)
    (finite_empty formula-decl nil make_bag nil)
    (dichotomous? const-decl "bool" orders nil)
    (partial_order? const-decl "bool" orders nil)
    (antisymmetric? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (reflexive? const-decl "bool" relations nil)
    (x!1 skolem-const-decl "T" mid_val_equiv nil)
    (add const-decl "(nonempty?)" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (card_one formula-decl nil finite_sets nil)
    (/= const-decl "boolean" notequal nil)
    (x!1 skolem-const-decl "T" mid_val_equiv nil)
    (e!2 skolem-const-decl "below(S)" mid_val_equiv nil)
    (S!1 skolem-const-decl "finite_set[below(S)]" mid_val_equiv nil)
    (f!1 skolem-const-decl "[below(S) -> T]" mid_val_equiv nil)
    (t!1 skolem-const-decl "T" mid_val_equiv nil)
    (remove const-decl "set" sets nil)
    (sum_f_g formula-decl nil finite_sets_sum "finite_sets/")
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (injective? const-decl "bool" functions nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (finite_add formula-decl nil make_bag nil)
    (finite_intersect formula-decl nil make_bag nil)
    (x!1 skolem-const-decl "T" mid_val_equiv nil)
    (sum_particular2 formula-decl nil aux nil)
    (sum_x formula-decl nil finite_sets_sum "finite_sets/")
    (card_add formula-decl nil finite_sets nil)
    (epsilon_ax formula-decl nil epsilons nil)
    (TRUE const-decl "bool" booleans nil)
    (e!1 skolem-const-decl "non_empty_finite_set[below(S)]"
     mid_val_equiv nil)
    (bag_to_set const-decl "set[T]" bags_to_sets "structures/")
    (sum def-decl "R" finite_sets_sum "finite_sets/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (filter const-decl "bool" index_filters nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (make_bag const-decl "finite_bag[T]" make_bag nil)
    (l_filter const-decl "bag" bag_filters "structures/")
    (leq formal-const-decl "(total_order?[T])" mid_val_equiv nil)
    (total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (card const-decl "nat" finite_bags "structures/")
    (finite_bag type-eq-decl nil finite_bags "structures/")
    (is_finite const-decl "bool" finite_bags "structures/")
    (bag type-eq-decl nil bags "structures/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (card_make_bag formula-decl nil make_bag nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (S formal-const-decl "posnat" mid_val_equiv nil)
    (below type-eq-decl nil naturalnumbers nil)
    (T formal-nonempty-type-decl nil mid_val_equiv nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (nonempty_choose formula-decl nil mid_val_equiv nil))
   16671 12530 t nil)
  (filter_l-3 nil 3287491310 3287492524
   ("" (skolem + ("f!1" "e!1" "t!1"))
    (("" (flatten)
      (("" (use "nonempty_choose")
        (("" (assert)
          (("" (use "card_make_bag")
            (("" (replace -1 :hide? t)
              ((""
                (case-replace
                 "card(l_filter(make_bag(e!1, f!1), t!1)) = card(filter(leq)(e!1)(f!1)(choose({s: (e!1) | f!1(s) = t!1})))")
                (("" (hide -2 -3 2)
                  (("" (expand "card")
                    (("" (lemma "finite_set_ind_modified[below(S)]")
                      ((""
                        (inst -
                         "LAMBDA (ee: finite_set[below(S)]): sum(bag_to_set(l_filter(make_bag(ee, f!1), t!1)),
                    LAMBDA (t: T): l_filter(make_bag(ee, f!1), t!1)(t))
                 = card(filter(leq)(ee)(f!1)(choose({s: (ee) | f!1(s) = t!1})))")
                        (("" (split)
                          (("1" (inst?) nil)
                           ("2" (hide 2)
                            (("2" (expand "sum")
                              (("2"
                                (lift-if)
                                (("2"
                                  (prop)
                                  (("1"
                                    (expand "filter")
                                    (("1"
                                      (expand "emptyset")
                                      (("1"
                                        (expand "empty?")
                                        (("1"
                                          (expand "member")
                                          (("1"
                                            (expand "bag_to_set")
                                            (("1"
                                              (expand "make_bag")
                                              (("1"
                                                (expand "l_filter")
                                                (("1"
                                                  (use
                                                   "empty_card[below(S)]")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "empty?")
                                                      (("1"
                                                        (skosimp*)
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (expand
                                                             "member")
                                                            (("1"
                                                              (propax)
                                                              nil)))))))))))
                                                   ("2"
                                                    (use
                                                     "finite_empty")
                                                    nil)))))))))))))))))
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (expand "bag_to_set")
                                      (("2"
                                        (expand "l_filter")
                                        (("2"
                                          (expand "make_bag")
                                          (("2"
                                            (expand "emptyset")
                                            (("2"
                                              (expand "empty?")
                                              (("2"
                                                (skosimp*)
                                                (("2"
                                                  (expand "member")
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (split)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (use
                                                           "empty_card[below(S)]")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "empty?")
                                                              (("1"
                                                                (skosimp*)
                                                                (("1"
                                                                  (expand
                                                                   "member")
                                                                  (("1"
                                                                    (propax)
                                                                    nil)))))))))
                                                           ("2"
                                                            (use
                                                             "finite_empty")
                                                            nil)))))
                                                       ("2"
                                                        (assert)
                                                        nil)))))))))))))))))))))))))))))
                           ("3" (skosimp*)
                            (("3" (hide 3)
                              (("3"
                                (case "leq(f!1(e!2),t!1)")
                                (("1"
                                  (case-replace
                                   "card(filter(leq)(add(e!2, S!1))(f!1)(choose({s: (S!1) | f!1(s) = t!1}))) = card(filter(leq)(S!1)(f!1)(choose({s: (S!1) | f!1(s) = t!1}))) + 1")
                                  (("1"
                                    (replace -3 :dir rl :hide? t)
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (case
                                         "bag_to_set(l_filter(make_bag(S!1, f!1), t!1))(f!1(e!2))")
                                        (("1"
                                          (case
                                           "l_filter(make_bag(add(e!2, S!1), f!1), t!1)(f!1(e!2)) = l_filter(make_bag(S!1, f!1), t!1)(f!1(e!2)) + 1")
                                          (("1"
                                            (lemma "sum_x[T,real,0,+]")
                                            (("1"
                                              (inst-cp
                                               -
                                               "bag_to_set(l_filter(make_bag(add(e!2, S!1), f!1), t!1))"
                                               "LAMBDA (t: T): l_filter(make_bag(add(e!2, S!1), f!1), t!1)(t)"
                                               "f!1(e!2)")
                                              (("1"
                                                (inst
                                                 -
                                                 "bag_to_set(l_filter(make_bag(S!1, f!1), t!1))"
                                                 "LAMBDA (t: T): l_filter(make_bag(S!1, f!1), t!1)(t)"
                                                 "f!1(e!2)")
                                                (("1"
                                                  (replace*)
                                                  (("1"
                                                    (hide -1 -2 -3)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lemma
                                                         "sum_particular2[T,real,0,+]")
                                                        (("1"
                                                          (inst
                                                           -
                                                           "remove(f!1(e!2),
                                                                                                                                     bag_to_set(l_filter(make_bag(add(e!2, S!1), f!1), t!1)))"
                                                           "LAMBDA (t: T): l_filter(make_bag(add(e!2, S!1), f!1), t!1)(t)"
                                                           "f!1(e!2)")
                                                          (("1"
                                                            (replace

                                                             -
                                                             :hide?

                                                             t)
                                                            (("1"
                                                              (lift-if)
                                                              (("1"
                                                                (split)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (hide-all-but
                                                                     -1)
                                                                    (("1"
                                                                      (grind)
                                                                      nil)))))
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (hide
                                                                     1)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (name-replace
                                                                         "g"
                                                                         "LAMBDA (t: T): l_filter(make_bag(add(e!2, S!1), f!1), t!1)(t)")
                                                                        (("2"
                                                                          (case-replace
                                                                           "remove(f!1(e!2),
                                                                                                                                                     bag_to_set(l_filter(make_bag(add(e!2, S!1), f!1), t!1))) = remove(f!1(e!2), bag_to_set(l_filter(make_bag(S!1, f!1), t!1)))")
                                                                          (("1"
                                                                            (hide
                                                                             -1)
                                                                            (("1"
                                                                              (use
                                                                               "sum_f_g[T,real,0,+]")
                                                                              (("1"
                                                                                (split)
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil)
                                                                                 ("2"
                                                                                  (skosimp*)
                                                                                  (("2"
                                                                                    (hide
                                                                                     2)
                                                                                    (("2"
                                                                                      (lift-if)
                                                                                      (("2"
                                                                                        (typepred!
                                                                                         "x!1")
                                                                                        (("2"
                                                                                          (split)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (grind)
                                                                                              nil)))
                                                                                           ("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (grind)
                                                                                              (("2"
                                                                                                (case-replace
                                                                                                 "{s: below(S) | (e!2 = s OR S!1(s)) AND f!1(s) = x!1} = {s: below(S) | S!1(s) AND f!1(s) = x!1}")
                                                                                                (("2"
                                                                                                  (hide
                                                                                                   3)
                                                                                                  (("2"
                                                                                                    (decompose-equality
                                                                                                     +)
                                                                                                    (("2"
                                                                                                      (grind)
                                                                                                      nil)))))))))))))))))))))))))))
                                                                           ("2"
                                                                            (hide
                                                                             2)
                                                                            (("2"
                                                                              (decompose-equality
                                                                               +)
                                                                              (("2"
                                                                                (expand
                                                                                 "remove")
                                                                                (("2"
                                                                                  (iff)
                                                                                  (("2"
                                                                                    (prop)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "member")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "bag_to_set")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "l_filter")
                                                                                          (("1"
                                                                                            (lift-if)
                                                                                            (("1"
                                                                                              (prop)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "make_bag")
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "nonempty_card[below(S)]")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "{s: below(S) | S!1(s) AND f!1(s) = f!1(e!2)}")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "nonempty?")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "empty?")
                                                                                                          (("1"
                                                                                                            (skosimp*)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "member")
                                                                                                              (("1"
                                                                                                                (flatten)
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "nonempty_card[below(S)]")
                                                                                                                  (("1"
                                                                                                                    (inst?)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "nonempty?")
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "empty?")
                                                                                                                          (("1"
                                                                                                                            (skosimp*)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "member")
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "add")
                                                                                                                                (("1"
                                                                                                                                  (flatten)
                                                                                                                                  (("1"
                                                                                                                                    (split)
                                                                                                                                    (("1"
                                                                                                                                      (lemma
                                                                                                                                       "nonempty_card[below(S)]")
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         -
                                                                                                                                         "{s: below(S) | S!1(s) AND f!1(s) = x!1}")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (use
                                                                                                                                           "finite_intersect")
                                                                                                                                          nil)))))
                                                                                                                                     ("2"
                                                                                                                                      (expand
                                                                                                                                       "member")
                                                                                                                                      (("2"
                                                                                                                                        (lemma
                                                                                                                                         "nonempty_card[below(S)]")
                                                                                                                                        (("2"
                                                                                                                                          (inst
                                                                                                                                           -
                                                                                                                                           "{s: below(S) | S!1(s) AND f!1(s) = x!1}")
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            (("1"
                                                                                                                                              (grind)
                                                                                                                                              nil)))
                                                                                                                                           ("2"
                                                                                                                                            (use
                                                                                                                                             "finite_intersect")
                                                                                                                                            nil)))))))))))))))))))))))
                                                                                                                     ("2"
                                                                                                                      (use
                                                                                                                       "finite_add")
                                                                                                                      nil)))))))))))))))))
                                                                                                     ("2"
                                                                                                      (use
                                                                                                       "finite_intersect")
                                                                                                      nil)))))))))))))))))
                                                                                     ("2"
                                                                                      (grind)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "nonempty_card[below(S)]")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -
                                                                                           "{s: below(S) | S!1(s) AND f!1(s) = x!1}")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (skosimp*)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "nonempty_card[below(S)]")
                                                                                                (("1"
                                                                                                  (inst?)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (inst?)
                                                                                                      (("1"
                                                                                                        (prop)
                                                                                                        nil)))))
                                                                                                   ("2"
                                                                                                    (hide-all-but
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (use
                                                                                                       "finite_add")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "LAMBDA (s: below(S)): f!1(s) = x!1"
                                                                                                         "S!1"
                                                                                                         "e!2")
                                                                                                        (("2"
                                                                                                          (grind)
                                                                                                          nil)))))))))))))))
                                                                                           ("2"
                                                                                            (hide-all-but
                                                                                             1)
                                                                                            (("2"
                                                                                              (use
                                                                                               "finite_intersect")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -
                                                                                                 "LAMBDA (s: below(S)): f!1(s) = x!1"
                                                                                                 "S!1")
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  nil)))))))))))))))))))))))))))))))))))))))))))))))))))
                                               ("2"
                                                (hide -1 3)
                                                (("2"
                                                  (expand "bag_to_set")
                                                  (("2"
                                                    (expand "l_filter")
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (prop)
                                                        (("2"
                                                          (expand
                                                           "make_bag")
                                                          (("2"
                                                            (lemma
                                                             "nonempty_card[below(S)]")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "{s: below(S) | S!1(s) AND f!1(s) = f!1(e!2)}")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "nonempty?")
                                                                  (("1"
                                                                    (expand
                                                                     "empty?")
                                                                    (("1"
                                                                      (skosimp*)
                                                                      (("1"
                                                                        (expand
                                                                         "member")
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (lemma
                                                                             "nonempty_card[below(S)]")
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "{s: below(S) | add[below(S)](e!2, S!1)(s) AND f!1(s) = f!1(e!2)}")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "nonempty?")
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil)))))
                                                                               ("2"
                                                                                (use
                                                                                 "finite_add")
                                                                                nil)))))))))))))))))
                                                               ("2"
                                                                (use
                                                                 "finite_intersect")
                                                                nil)))))))))))))))))))))
                                           ("2"
                                            (hide 3)
                                            (("2"
                                              (expand "l_filter")
                                              (("2"
                                                (lift-if)
                                                (("2"
                                                  (split)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (expand
                                                       "make_bag")
                                                      (("1"
                                                        (case-replace
                                                         "{s: below(S) | add(e!2, S!1)(s) AND f!1(s) = f!1(e!2)} = add(e!2, {s: below(S) | S!1(s) AND f!1(s) = f!1(e!2)})")
                                                        (("1"
                                                          (lemma
                                                           "card_add[below(S)]")
                                                          (("1"
                                                            (inst
                                                             -
                                                             "{s: below(S) | S!1(s) AND f!1(s) = f!1(e!2)}"
                                                             "e!2")
                                                            (("1"
                                                              (replace

                                                               -1)
                                                              (("1"
                                                                (assert)
                                                                nil)))
                                                             ("2"
                                                              (use
                                                               "finite_intersect")
                                                              nil)))))
                                                         ("2"
                                                          (hide -2 2)
                                                          (("2"
                                                            (decompose-equality
                                                             +)
                                                            (("2"
                                                              (grind)
                                                              nil)))))))))))
                                                   ("2"
                                                    (flatten)
                                                    nil)))))))))))
                                         ("2"
                                          (lemma "sum_x[T,real,0,+]")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (inst - "f!1(e!2)")
                                              (("1"
                                                (replace - :hide? t)
                                                (("1"
                                                  (case-replace
                                                   "remove(f!1(e!2),
                                                                                                        bag_to_set(l_filter(make_bag(add(e!2, S!1), f!1),
                                                                                                                            t!1))) = bag_to_set(l_filter(make_bag(S!1, f!1), t!1))")
                                                  (("1"
                                                    (lemma
                                                     "sum_particular2[T,real,0,+]")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (replace

                                                           -1
                                                           :hide?

                                                           t)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (case
                                                               "l_filter(make_bag(add(e!2, S!1), f!1), t!1)(f!1(e!2)) = 1")
                                                              (("1"
                                                                (replace

                                                                 -
                                                                 :hide?

                                                                 t)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case-replace
                                                                     "(LAMBDA (t_1: T):
                                                                        IF t_1 = f!1(e!2) THEN 0
                                                                        ELSE l_filter(make_bag(add(e!2, S!1), f!1), t!1)(t_1)
                                                                        ENDIF) = LAMBDA (t: T): l_filter(make_bag(S!1, f!1), t!1)(t)")
                                                                    (("1"
                                                                      (hide
                                                                       4)
                                                                      (("1"
                                                                        (decompose-equality
                                                                         +)
                                                                        (("1"
                                                                          (lift-if)
                                                                          (("1"
                                                                            (split)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (expand
                                                                                 "bag_to_set")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil)))))
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (hide
                                                                                 -1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "bag_to_set")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "l_filter")
                                                                                    (("2"
                                                                                      (lift-if)
                                                                                      (("2"
                                                                                        (split)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "make_bag")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "add")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "member")
                                                                                                (("1"
                                                                                                  (case-replace
                                                                                                   "{s: below(S) | (e!2 = s OR S!1(s)) AND f!1(s) = x!1} = {s: below(S) | S!1(s) AND f!1(s) = x!1}")
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     2)
                                                                                                    (("1"
                                                                                                      (decompose-equality
                                                                                                       +)
                                                                                                      (("1"
                                                                                                        (grind)
                                                                                                        nil)))))))))))))))
                                                                                         ("2"
                                                                                          (propax)
                                                                                          nil)))))))))))))))))))))))))))
                                                               ("2"
                                                                (hide
                                                                 -1
                                                                 4)
                                                                (("2"
                                                                  (expand
                                                                   "bag_to_set")
                                                                  (("2"
                                                                    (expand
                                                                     "l_filter")
                                                                    (("2"
                                                                      (expand
                                                                       "make_bag")
                                                                      (("2"
                                                                        (lemma
                                                                         "nonempty_card[below(S)]")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "{s: below(S) | S!1(s) AND f!1(s) = f!1(e!2)}")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "nonempty?")
                                                                              (("1"
                                                                                (expand
                                                                                 "empty?")
                                                                                (("1"
                                                                                  (expand
                                                                                   "member")
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "card_one[below(S)]")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "{s: below(S) | add(e!2, S!1)(s) AND f!1(s) = f!1(e!2)}")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (inst?)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "singleton")
                                                                                            (("1"
                                                                                              (decompose-equality
                                                                                               +)
                                                                                              (("1"
                                                                                                (grind)
                                                                                                nil)))))))))
                                                                                       ("2"
                                                                                        (use
                                                                                         "finite_add")
                                                                                        nil)))))))))))))
                                                                           ("2"
                                                                            (use
                                                                             "finite_intersect")
                                                                            nil)))))))))))))))))))))))))
                                                   ("2"
                                                    (hide 4)
                                                    (("2"
                                                      (decompose-equality
                                                       +)
                                                      (("2"
                                                        (iff)
                                                        (("2"
                                                          (grind)
                                                          (("1"
                                                            (lemma
                                                             "nonempty_card[below(S)]")
                                                            (("1"
                                                              (inst-cp
                                                               -
                                                               "{s: below(S) | (e!2 = s OR S!1(s)) AND f!1(s) = x!1}")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (skosimp*)
                                                                  (("1"
                                                                    (split)
                                                                    (("1"
                                                                      (replace*)
                                                                      nil)
                                                                     ("2"
                                                                      (inst
                                                                       -
                                                                       "{s: below(S) | S!1(s) AND f!1(s) = x!1}")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (split)
                                                                            (("1"
                                                                              (propax)
                                                                              nil)
                                                                             ("2"
                                                                              (propax)
                                                                              nil)))))))
                                                                       ("2"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("2"
                                                                          (use
                                                                           "finite_intersect")
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "LAMBDA (s: below(S)): f!1(s) = x!1"
                                                                             "S!1")
                                                                            (("2"
                                                                              (grind)
                                                                              nil)))))))))))))))
                                                               ("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (use
                                                                   "finite_add")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "LAMBDA (s: below(S)): f!1(s) = x!1"
                                                                     "S!1"
                                                                     "e!2")
                                                                    (("2"
                                                                      (grind)
                                                                      nil)))))))))))
                                                           ("2"
                                                            (lemma
                                                             "nonempty_card[below(S)]")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "{s: below(S) | S!1(s) AND f!1(s) = x!1}")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (skosimp*)
                                                                  (("1"
                                                                    (lemma
                                                                     "nonempty_card[below(S)]")
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "{s: below(S) | (e!2 = s OR S!1(s)) AND f!1(s) = x!1}")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (prop)
                                                                            nil)))))
                                                                       ("2"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("2"
                                                                          (use
                                                                           "finite_add")
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "LAMBDA (s: below(S)): f!1(s) = x!1"
                                                                             "S!1"
                                                                             "e!2")
                                                                            (("2"
                                                                              (grind)
                                                                              nil)))))))))))))))
                                                               ("2"
                                                                (use
                                                                 "finite_intersect")
                                                                (("2"
                                                                  (grind)
                                                                  nil)))))))))))))))))))
                                               ("2"
                                                (hide 4)
                                                (("2"
                                                  (grind)
                                                  (("2"
                                                    (lemma
                                                     "nonempty_card[below(S)]")
                                                    (("2"
                                                      (inst
                                                       -
                                                       "{s: below(S) | (e!2 = s OR S!1(s)) AND f!1(s) = f!1(e!2)}")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst?)
                                                          nil)))
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (use
                                                           "finite_add")
                                                          (("2"
                                                            (grind)
                                                            nil)))))))))))))))))))))))))
                                   ("2"
                                    (hide -2 3)
                                    (("2"
                                      (expand "filter")
                                      (("2"
                                        (expand "add")
                                        (("2"
                                          (expand "member")
                                          (("2"
                                            (case-replace
                                             "(LAMBDA (j: below(S)): (e!2 = j OR S!1(j)) AND leq(f!1(j), f!1(choose({s: (S!1) | f!1(s) = t!1})))) = add(e!2, LAMBDA (j: below(S)): S!1(j) AND leq(f!1(j), f!1(choose({s: (S!1) | f!1(s) = t!1}))))")
                                            (("1"
                                              (lemma
                                               "card_add[below(S)]")
                                              (("1"
                                                (inst
                                                 -
                                                 "LAMBDA (j: below(S)): S!1(j) AND leq(f!1(j), f!1(choose({s: (S!1) | f!1(s) = t!1})))"
                                                 "e!2")
                                                (("1"
                                                  (replace -)
                                                  (("1" (assert) nil)))
                                                 ("2"
                                                  (use
                                                   "finite_intersect")
                                                  nil)))))
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (decompose-equality +)
                                                (("2"
                                                  (grind)
                                                  (("2"
                                                    (use
                                                     "epsilon_ax[below(S)]")
                                                    (("1"
                                                      (split)
                                                      (("1"
                                                        (replace -)
                                                        (("1"
                                                          (propax)
                                                          nil)))
                                                       ("2"
                                                        (inst?)
                                                        nil)))
                                                     ("2"
                                                      (inst + "0")
                                                      nil)))))))))))))))))))))
                                 ("2"
                                  (case-replace
                                   "filter(leq)(add(e!2, S!1))(f!1)(choose({s: (S!1) | f!1(s) = t!1})) = filter(leq)(S!1)(f!1)(choose({s: (S!1) | f!1(s) = t!1}))")
                                  (("1"
                                    (replace -2 :dir rl :hide? t)
                                    (("1"
                                      (case-replace
                                       "bag_to_set(l_filter(make_bag(add(e!2, S!1), f!1), t!1)) = bag_to_set(l_filter(make_bag(S!1, f!1), t!1))")
                                      (("1"
                                        (lemma
                                         "sum_particular2[T,real,0,+]")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (inst - "f!1(e!2)")
                                            (("1"
                                              (replace -1 :hide? t)
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (case-replace
                                                       "l_filter(make_bag(add(e!2, S!1), f!1), t!1)(f!1(e!2)) = 0")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide
                                                           -2
                                                           -3
                                                           -4)
                                                          (("1"
                                                            (case-replace
                                                             "(LAMBDA (t_1: T):
                                                      IF t_1 = f!1(e!2) THEN 0
                                                      ELSE l_filter(make_bag(add(e!2, S!1), f!1), t!1)(t_1)
                                                      ENDIF) = LAMBDA (t: T): l_filter(make_bag(S!1, f!1), t!1)(t)")
                                                            (("1"
                                                              (hide 2)
                                                              (("1"
                                                                (decompose-equality
                                                                 +)
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (split)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (grind)
                                                                        nil)))
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (expand
                                                                         "l_filter")
                                                                        (("2"
                                                                          (lift-if)
                                                                          (("2"
                                                                            (split)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (expand
                                                                                 "make_bag")
                                                                                (("1"
                                                                                  (case-replace
                                                                                   "{s: below(S) | add(e!2, S!1)(s) AND f!1(s) = x!1} = {s: below(S) | S!1(s) AND f!1(s) = x!1}")
                                                                                  (("1"
                                                                                    (hide
                                                                                     2)
                                                                                    (("1"
                                                                                      (decompose-equality
                                                                                       +)
                                                                                      (("1"
                                                                                        (iff)
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil)))))))))))))
                                                                             ("2"
                                                                              (propax)
                                                                              nil)))))))))))))))))))))))
                                                       ("2"
                                                        (hide
                                                         -1
                                                         -2
                                                         -3
                                                         2)
                                                        (("2"
                                                          (grind)
                                                          nil)))))))
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (case-replace
                                                         "(LAMBDA (t_1: T):
                                                IF t_1 = f!1(e!2) THEN 0
                                                ELSE l_filter(make_bag(add(e!2, S!1), f!1), t!1)(t_1)
                                                ENDIF) = LAMBDA (t: T): l_filter(make_bag(S!1, f!1), t!1)(t)")
                                                        (("2"
                                                          (hide 3)
                                                          (("2"
                                                            (decompose-equality
                                                             +)
                                                            (("2"
                                                              (lift-if)
                                                              (("2"
                                                                (split)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (expand
                                                                     "bag_to_set")
                                                                    (("1"
                                                                      (assert)
                                                                      nil)))))
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (hide
                                                                     -1
                                                                     -2)
                                                                    (("2"
                                                                      (expand
                                                                       "bag_to_set")
                                                                      (("2"
                                                                        (expand
                                                                         "l_filter")
                                                                        (("2"
                                                                          (lift-if)
                                                                          (("2"
                                                                            (split)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (expand
                                                                                 "make_bag")
                                                                                (("1"
                                                                                  (expand
                                                                                   "add")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "member")
                                                                                    (("1"
                                                                                      (case-replace
                                                                                       "{s: below(S) | (e!2 = s OR S!1(s)) AND f!1(s) = x!1} = {s: below(S) | S!1(s) AND f!1(s) = x!1}")
                                                                                      (("1"
                                                                                        (hide
                                                                                         2)
                                                                                        (("1"
                                                                                          (decompose-equality
                                                                                           +)
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil)))))))))))))))
                                                                             ("2"
                                                                              (propax)
                                                                              nil)))))))))))))))))))))))))))))))))))))))
                                       ("2"
                                        (hide -1 4)
                                        (("2"
                                          (decompose-equality +)
                                          (("2"
                                            (grind)
                                            (("1"
                                              (case "x!1 = f!1(e!2)")
                                              (("1"
                                                (hide-all-but
                                                 (-1 -4 2))
                                                (("1"
                                                  (typepred! "leq")
                                                  (("1"
                                                    (grind)
                                                    nil)))))
                                               ("2"
                                                (lemma
                                                 "nonempty_card[below(S)]")
                                                (("2"
                                                  (inst-cp
                                                   -
                                                   "{s: below(S) | (e!2 = s OR S!1(s)) AND f!1(s) = x!1}")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (skosimp*)
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (replace*)
                                                          nil)
                                                         ("2"
                                                          (inst
                                                           -
                                                           "{s: below(S) | S!1(s) AND f!1(s) = x!1}")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (assert)
                                                                nil)))))
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (use
                                                               "finite_intersect")
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "LAMBDA (s: below(S)): f!1(s) = x!1"
                                                                 "S!1")
                                                                (("2"
                                                                  (grind)
                                                                  nil)))))))))))))))
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (use
                                                       "finite_add")
                                                      (("2"
                                                        (inst
                                                         -
                                                         "LAMBDA (s: below(S)): f!1(s) = x!1"
                                                         "S!1"
                                                         "e!2")
                                                        (("2"
                                                          (grind)
                                                          nil)))))))))))))
                                             ("2"
                                              (lemma
                                               "nonempty_card[below(S)]")
                                              (("2"
                                                (inst-cp
                                                 -
                                                 "{s: below(S) | S!1(s) AND f!1(s) = x!1}")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (skosimp*)
                                                    (("1"
                                                      (inst
                                                       -
                                                       "{s: below(S) | (e!2 = s OR S!1(s)) AND f!1(s) = x!1}")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            nil)))))
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (use
                                                           "finite_add")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "LAMBDA (s: below(S)): f!1(s) = x!1"
                                                             "S!1"
                                                             "e!2")
                                                            (("2"
                                                              (grind)
                                                              nil)))))))))))))
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (use
                                                     "finite_intersect")
                                                    (("2"
                                                      (inst
                                                       -
                                                       "LAMBDA (s: below(S)): f!1(s) = x!1"
                                                       "S!1")
                                                      (("2"
                                                        (grind)
                                                        nil)))))))))))))))))))))
                                   ("2"
                                    (hide -1 4)
                                    (("2"
                                      (decompose-equality +)
                                      (("2"
                                        (grind)
                                        (("2"
                                          (use "epsilon_ax[below(S)]")
                                          (("1"
                                            (split)
                                            (("1"
                                              (replace -)
                                              (("1" (propax) nil)))
                                             ("2" (inst?) nil)))
                                           ("2"
                                            (inst + "0")
                                            nil))))))))))))))))))))))))))))))))))))))))
    nil)
   unfinished
   ((nonempty_choose formula-decl nil mid_val_equiv nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil mid_val_equiv nil)
    (below type-eq-decl nil naturalnumbers nil)
    (S formal-const-decl "posnat" mid_val_equiv nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (card_make_bag formula-decl nil make_bag nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bag type-eq-decl nil bags "structures/")
    (is_finite const-decl "bool" finite_bags "structures/")
    (finite_bag type-eq-decl nil finite_bags "structures/")
    (card const-decl "nat" finite_bags "structures/")
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (leq formal-const-decl "(total_order?[T])" mid_val_equiv nil)
    (l_filter const-decl "bag" bag_filters "structures/")
    (make_bag const-decl "finite_bag[T]" make_bag nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (filter const-decl "bool" index_filters nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (bag_to_set const-decl "set[T]" bags_to_sets "structures/")
    (sum def-decl "R" finite_sets_sum "finite_sets/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (TRUE const-decl "bool" booleans nil)
    (epsilon_ax formula-decl nil epsilons nil)
    (card_add formula-decl nil finite_sets nil)
    (sum_x formula-decl nil finite_sets_sum "finite_sets/") nil
    (finite_intersect formula-decl nil make_bag nil)
    (finite_add formula-decl nil make_bag nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (injective? const-decl "bool" functions nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (sum_f_g formula-decl nil finite_sets_sum "finite_sets/")
    (remove const-decl "set" sets nil)
    (/= const-decl "boolean" notequal nil)
    (card_one formula-decl nil finite_sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (reflexive? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (antisymmetric? const-decl "bool" relations nil)
    (partial_order? const-decl "bool" orders nil)
    (dichotomous? const-decl "bool" orders nil)
    (finite_empty formula-decl nil make_bag nil)
    (FALSE const-decl "bool" booleans nil)
    (empty_card formula-decl nil finite_sets nil)
    (member const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil)
    (finite_set_ind_modified formula-decl nil finite_sets_inductions
     "finite_sets/"))
   248747 29570 t nil)
  (filter_l-2 nil 3287487721 3287491260
   ("" (skolem + ("f!1" "e!1" "t!1"))
    (("" (flatten)
      (("" (use "nonempty_choose")
        (("" (assert)
          (("" (use "card_make_bag")
            (("" (replace -1 :hide? t)
              ((""
                (case-replace
                 "card(l_filter(make_bag(e!1, f!1), t!1)) = card(filter(leq)(e!1)(f!1)(choose({s: (e!1) | f!1(s) = t!1})))")
                (("" (hide -2 -3 2)
                  (("" (expand "card")
                    (("" (lemma "finite_set_ind_modified[below(S)]")
                      ((""
                        (inst -
                         "LAMBDA (ee: finite_set[below(S)]): sum(bag_to_set(l_filter(make_bag(ee, f!1), t!1)),
                  LAMBDA (t: T): l_filter(make_bag(ee, f!1), t!1)(t))
               = card(filter(leq)(ee)(f!1)(choose({s: (e!1) | f!1(s) = t!1})))")
                        (("" (split)
                          (("1" (inst?) nil)
                           ("2" (hide 2)
                            (("2" (expand "sum")
                              (("2"
                                (lift-if)
                                (("2"
                                  (prop)
                                  (("1"
                                    (expand "filter")
                                    (("1"
                                      (expand "emptyset")
                                      (("1"
                                        (expand "empty?")
                                        (("1"
                                          (expand "member")
                                          (("1"
                                            (expand "bag_to_set")
                                            (("1"
                                              (expand "make_bag")
                                              (("1"
                                                (expand "l_filter")
                                                (("1"
                                                  (use
                                                   "empty_card[below(S)]")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "empty?")
                                                      (("1"
                                                        (skosimp*)
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (expand
                                                             "member")
                                                            (("1"
                                                              (propax)
                                                              nil)))))))))))
                                                   ("2"
                                                    (use
                                                     "finite_empty")
                                                    nil)))))))))))))))))
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (expand "bag_to_set")
                                      (("2"
                                        (expand "l_filter")
                                        (("2"
                                          (expand "make_bag")
                                          (("2"
                                            (expand "emptyset")
                                            (("2"
                                              (expand "empty?")
                                              (("2"
                                                (skosimp*)
                                                (("2"
                                                  (expand "member")
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (split)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (use
                                                           "empty_card[below(S)]")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "empty?")
                                                              (("1"
                                                                (skosimp*)
                                                                (("1"
                                                                  (expand
                                                                   "member")
                                                                  (("1"
                                                                    (propax)
                                                                    nil)))))))))
                                                           ("2"
                                                            (use
                                                             "finite_empty")
                                                            nil)))))
                                                       ("2"
                                                        (assert)
                                                        nil)))))))))))))))))))))))))))))
                           ("3" (skosimp*)
                            (("3" (hide 3)
                              (("3"
                                (case "leq(f!1(e!2),t!1)")
                                (("1"
                                  (case-replace
                                   "card(filter(leq)(add(e!2, S!1))(f!1)(choose({s: (e!1) | f!1(s) = t!1}))) = card(filter(leq)(S!1)(f!1)(choose({s: (e!1) | f!1(s) = t!1}))) + 1")
                                  (("1"
                                    (replace -3 :dir rl :hide? t)
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (case
                                         "bag_to_set(l_filter(make_bag(S!1, f!1), t!1))(f!1(e!2))")
                                        (("1"
                                          (case
                                           "l_filter(make_bag(add(e!2, S!1), f!1), t!1)(f!1(e!2)) = l_filter(make_bag(S!1, f!1), t!1)(f!1(e!2)) + 1")
                                          (("1"
                                            (lemma "sum_x[T,real,0,+]")
                                            (("1"
                                              (inst-cp
                                               -
                                               "bag_to_set(l_filter(make_bag(add(e!2, S!1), f!1), t!1))"
                                               "LAMBDA (t: T): l_filter(make_bag(add(e!2, S!1), f!1), t!1)(t)"
                                               "f!1(e!2)")
                                              (("1"
                                                (inst
                                                 -
                                                 "bag_to_set(l_filter(make_bag(S!1, f!1), t!1))"
                                                 "LAMBDA (t: T): l_filter(make_bag(S!1, f!1), t!1)(t)"
                                                 "f!1(e!2)")
                                                (("1"
                                                  (replace*)
                                                  (("1"
                                                    (hide -1 -2 -3)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lemma
                                                         "sum_particular2[T,real,0,+]")
                                                        (("1"
                                                          (inst
                                                           -
                                                           "remove(f!1(e!2),
                                                                                                                       bag_to_set(l_filter(make_bag(add(e!2, S!1), f!1), t!1)))"
                                                           "LAMBDA (t: T): l_filter(make_bag(add(e!2, S!1), f!1), t!1)(t)"
                                                           "f!1(e!2)")
                                                          (("1"
                                                            (replace

                                                             -
                                                             :hide?

                                                             t)
                                                            (("1"
                                                              (lift-if)
                                                              (("1"
                                                                (split)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (hide-all-but
                                                                     -1)
                                                                    (("1"
                                                                      (grind)
                                                                      nil)))))
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (hide
                                                                     1)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (name-replace
                                                                         "g"
                                                                         "LAMBDA (t: T): l_filter(make_bag(add(e!2, S!1), f!1), t!1)(t)")
                                                                        (("2"
                                                                          (case-replace
                                                                           "remove(f!1(e!2),
                                                                                                                                     bag_to_set(l_filter(make_bag(add(e!2, S!1), f!1), t!1))) = remove(f!1(e!2), bag_to_set(l_filter(make_bag(S!1, f!1), t!1)))")
                                                                          (("1"
                                                                            (hide
                                                                             -1)
                                                                            (("1"
                                                                              (use
                                                                               "sum_f_g[T,real,0,+]")
                                                                              (("1"
                                                                                (split)
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil)
                                                                                 ("2"
                                                                                  (skosimp*)
                                                                                  (("2"
                                                                                    (hide
                                                                                     2)
                                                                                    (("2"
                                                                                      (lift-if)
                                                                                      (("2"
                                                                                        (typepred!
                                                                                         "x!1")
                                                                                        (("2"
                                                                                          (split)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (grind)
                                                                                              nil)))
                                                                                           ("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (grind)
                                                                                              (("2"
                                                                                                (case-replace
                                                                                                 "{s: below(S) | (e!2 = s OR S!1(s)) AND f!1(s) = x!1} = {s: below(S) | S!1(s) AND f!1(s) = x!1}")
                                                                                                (("2"
                                                                                                  (hide
                                                                                                   3)
                                                                                                  (("2"
                                                                                                    (decompose-equality
                                                                                                     +)
                                                                                                    (("2"
                                                                                                      (grind)
                                                                                                      nil)))))))))))))))))))))))))))
                                                                           ("2"
                                                                            (hide
                                                                             2)
                                                                            (("2"
                                                                              (decompose-equality
                                                                               +)
                                                                              (("2"
                                                                                (expand
                                                                                 "remove")
                                                                                (("2"
                                                                                  (iff)
                                                                                  (("2"
                                                                                    (prop)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "member")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "bag_to_set")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "l_filter")
                                                                                          (("1"
                                                                                            (lift-if)
                                                                                            (("1"
                                                                                              (prop)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "make_bag")
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "nonempty_card[below(S)]")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "{s: below(S) | S!1(s) AND f!1(s) = f!1(e!2)}")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "nonempty?")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "empty?")
                                                                                                          (("1"
                                                                                                            (skosimp*)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "member")
                                                                                                              (("1"
                                                                                                                (flatten)
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "nonempty_card[below(S)]")
                                                                                                                  (("1"
                                                                                                                    (inst?)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "nonempty?")
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "empty?")
                                                                                                                          (("1"
                                                                                                                            (skosimp*)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "member")
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "add")
                                                                                                                                (("1"
                                                                                                                                  (flatten)
                                                                                                                                  (("1"
                                                                                                                                    (split)
                                                                                                                                    (("1"
                                                                                                                                      (lemma
                                                                                                                                       "nonempty_card[below(S)]")
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         -
                                                                                                                                         "{s: below(S) | S!1(s) AND f!1(s) = x!1}")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (use
                                                                                                                                           "finite_intersect")
                                                                                                                                          nil)))))
                                                                                                                                     ("2"
                                                                                                                                      (expand
                                                                                                                                       "member")
                                                                                                                                      (("2"
                                                                                                                                        (lemma
                                                                                                                                         "nonempty_card[below(S)]")
                                                                                                                                        (("2"
                                                                                                                                          (inst
                                                                                                                                           -
                                                                                                                                           "{s: below(S) | S!1(s) AND f!1(s) = x!1}")
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            (("1"
                                                                                                                                              (grind)
                                                                                                                                              nil)))
                                                                                                                                           ("2"
                                                                                                                                            (use
                                                                                                                                             "finite_intersect")
                                                                                                                                            nil)))))))))))))))))))))))
                                                                                                                     ("2"
                                                                                                                      (use
                                                                                                                       "finite_add")
                                                                                                                      nil)))))))))))))))))
                                                                                                     ("2"
                                                                                                      (use
                                                                                                       "finite_intersect")
                                                                                                      nil)))))))))))))))))
                                                                                     ("2"
                                                                                      (grind)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "nonempty_card[below(S)]")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -
                                                                                           "{s: below(S) | S!1(s) AND f!1(s) = x!1}")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (skosimp*)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "nonempty_card[below(S)]")
                                                                                                (("1"
                                                                                                  (inst?)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (inst?)
                                                                                                      (("1"
                                                                                                        (prop)
                                                                                                        nil)))))
                                                                                                   ("2"
                                                                                                    (hide-all-but
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (use
                                                                                                       "finite_add")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "LAMBDA (s: below(S)): f!1(s) = x!1"
                                                                                                         "S!1"
                                                                                                         "e!2")
                                                                                                        (("2"
                                                                                                          (grind)
                                                                                                          nil)))))))))))))))
                                                                                           ("2"
                                                                                            (hide-all-but
                                                                                             1)
                                                                                            (("2"
                                                                                              (use
                                                                                               "finite_intersect")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -
                                                                                                 "LAMBDA (s: below(S)): f!1(s) = x!1"
                                                                                                 "S!1")
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  nil)))))))))))))))))))))))))))))))))))))))))))))))))))
                                               ("2"
                                                (hide -1 3)
                                                (("2"
                                                  (expand "bag_to_set")
                                                  (("2"
                                                    (expand "l_filter")
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (prop)
                                                        (("2"
                                                          (expand
                                                           "make_bag")
                                                          (("2"
                                                            (lemma
                                                             "nonempty_card[below(S)]")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "{s: below(S) | S!1(s) AND f!1(s) = f!1(e!2)}")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "nonempty?")
                                                                  (("1"
                                                                    (expand
                                                                     "empty?")
                                                                    (("1"
                                                                      (skosimp*)
                                                                      (("1"
                                                                        (expand
                                                                         "member")
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (lemma
                                                                             "nonempty_card[below(S)]")
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "{s: below(S) | add[below(S)](e!2, S!1)(s) AND f!1(s) = f!1(e!2)}")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "nonempty?")
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil)))))
                                                                               ("2"
                                                                                (use
                                                                                 "finite_add")
                                                                                nil)))))))))))))))))
                                                               ("2"
                                                                (use
                                                                 "finite_intersect")
                                                                nil)))))))))))))))))))))
                                           ("2"
                                            (hide 3)
                                            (("2"
                                              (expand "l_filter")
                                              (("2"
                                                (lift-if)
                                                (("2"
                                                  (split)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (expand
                                                       "make_bag")
                                                      (("1"
                                                        (case-replace
                                                         "{s: below(S) | add(e!2, S!1)(s) AND f!1(s) = f!1(e!2)} = add(e!2, {s: below(S) | S!1(s) AND f!1(s) = f!1(e!2)})")
                                                        (("1"
                                                          (lemma
                                                           "card_add[below(S)]")
                                                          (("1"
                                                            (inst
                                                             -
                                                             "{s: below(S) | S!1(s) AND f!1(s) = f!1(e!2)}"
                                                             "e!2")
                                                            (("1"
                                                              (replace

                                                               -1)
                                                              (("1"
                                                                (assert)
                                                                nil)))
                                                             ("2"
                                                              (use
                                                               "finite_intersect")
                                                              nil)))))
                                                         ("2"
                                                          (hide -2 2)
                                                          (("2"
                                                            (decompose-equality
                                                             +)
                                                            (("2"
                                                              (grind)
                                                              nil)))))))))))
                                                   ("2"
                                                    (flatten)
                                                    nil)))))))))))
                                         ("2"
                                          (lemma "sum_x[T,real,0,+]")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (inst - "f!1(e!2)")
                                              (("1"
                                                (replace - :hide? t)
                                                (("1"
                                                  (case-replace
                                                   "remove(f!1(e!2),
                                                                                            bag_to_set(l_filter(make_bag(add(e!2, S!1), f!1),
                                                                                                                t!1))) = bag_to_set(l_filter(make_bag(S!1, f!1), t!1))")
                                                  (("1"
                                                    (lemma
                                                     "sum_particular2[T,real,0,+]")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (replace

                                                           -1
                                                           :hide?

                                                           t)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (case
                                                               "l_filter(make_bag(add(e!2, S!1), f!1), t!1)(f!1(e!2)) = 1")
                                                              (("1"
                                                                (replace

                                                                 -
                                                                 :hide?

                                                                 t)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case-replace
                                                                     "(LAMBDA (t_1: T):
                                                        IF t_1 = f!1(e!2) THEN 0
                                                        ELSE l_filter(make_bag(add(e!2, S!1), f!1), t!1)(t_1)
                                                        ENDIF) = LAMBDA (t: T): l_filter(make_bag(S!1, f!1), t!1)(t)")
                                                                    (("1"
                                                                      (hide
                                                                       4)
                                                                      (("1"
                                                                        (decompose-equality
                                                                         +)
                                                                        (("1"
                                                                          (lift-if)
                                                                          (("1"
                                                                            (split)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (expand
                                                                                 "bag_to_set")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil)))))
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (hide
                                                                                 -1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "bag_to_set")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "l_filter")
                                                                                    (("2"
                                                                                      (lift-if)
                                                                                      (("2"
                                                                                        (split)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "make_bag")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "add")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "member")
                                                                                                (("1"
                                                                                                  (case-replace
                                                                                                   "{s: below(S) | (e!2 = s OR S!1(s)) AND f!1(s) = x!1} = {s: below(S) | S!1(s) AND f!1(s) = x!1}")
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     2)
                                                                                                    (("1"
                                                                                                      (decompose-equality
                                                                                                       +)
                                                                                                      (("1"
                                                                                                        (grind)
                                                                                                        nil)))))))))))))))
                                                                                         ("2"
                                                                                          (propax)
                                                                                          nil)))))))))))))))))))))))))))
                                                               ("2"
                                                                (hide
                                                                 -1
                                                                 4)
                                                                (("2"
                                                                  (expand
                                                                   "bag_to_set")
                                                                  (("2"
                                                                    (expand
                                                                     "l_filter")
                                                                    (("2"
                                                                      (expand
                                                                       "make_bag")
                                                                      (("2"
                                                                        (lemma
                                                                         "nonempty_card[below(S)]")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "{s: below(S) | S!1(s) AND f!1(s) = f!1(e!2)}")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "nonempty?")
                                                                              (("1"
                                                                                (expand
                                                                                 "empty?")
                                                                                (("1"
                                                                                  (expand
                                                                                   "member")
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "card_one[below(S)]")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "{s: below(S) | add(e!2, S!1)(s) AND f!1(s) = f!1(e!2)}")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (inst?)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "singleton")
                                                                                            (("1"
                                                                                              (decompose-equality
                                                                                               +)
                                                                                              (("1"
                                                                                                (grind)
                                                                                                nil)))))))))
                                                                                       ("2"
                                                                                        (use
                                                                                         "finite_add")
                                                                                        nil)))))))))))))
                                                                           ("2"
                                                                            (use
                                                                             "finite_intersect")
                                                                            nil)))))))))))))))))))))))))
                                                   ("2"
                                                    (hide 4)
                                                    (("2"
                                                      (decompose-equality
                                                       +)
                                                      (("2"
                                                        (iff)
                                                        (("2"
                                                          (grind)
                                                          (("1"
                                                            (lemma
                                                             "nonempty_card[below(S)]")
                                                            (("1"
                                                              (inst-cp
                                                               -
                                                               "{s: below(S) | (e!2 = s OR S!1(s)) AND f!1(s) = x!1}")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (skosimp*)
                                                                  (("1"
                                                                    (split)
                                                                    (("1"
                                                                      (replace*)
                                                                      nil)
                                                                     ("2"
                                                                      (inst
                                                                       -
                                                                       "{s: below(S) | S!1(s) AND f!1(s) = x!1}")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (split)
                                                                            (("1"
                                                                              (propax)
                                                                              nil)
                                                                             ("2"
                                                                              (propax)
                                                                              nil)))))))
                                                                       ("2"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("2"
                                                                          (use
                                                                           "finite_intersect")
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "LAMBDA (s: below(S)): f!1(s) = x!1"
                                                                             "S!1")
                                                                            (("2"
                                                                              (grind)
                                                                              nil)))))))))))))))
                                                               ("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (use
                                                                   "finite_add")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "LAMBDA (s: below(S)): f!1(s) = x!1"
                                                                     "S!1"
                                                                     "e!2")
                                                                    (("2"
                                                                      (grind)
                                                                      nil)))))))))))
                                                           ("2"
                                                            (lemma
                                                             "nonempty_card[below(S)]")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "{s: below(S) | S!1(s) AND f!1(s) = x!1}")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (skosimp*)
                                                                  (("1"
                                                                    (lemma
                                                                     "nonempty_card[below(S)]")
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "{s: below(S) | (e!2 = s OR S!1(s)) AND f!1(s) = x!1}")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (prop)
                                                                            nil)))))
                                                                       ("2"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("2"
                                                                          (use
                                                                           "finite_add")
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "LAMBDA (s: below(S)): f!1(s) = x!1"
                                                                             "S!1"
                                                                             "e!2")
                                                                            (("2"
                                                                              (grind)
                                                                              nil)))))))))))))))
                                                               ("2"
                                                                (use
                                                                 "finite_intersect")
                                                                (("2"
                                                                  (grind)
                                                                  nil)))))))))))))))))))
                                               ("2"
                                                (hide 4)
                                                (("2"
                                                  (grind)
                                                  (("2"
                                                    (lemma
                                                     "nonempty_card[below(S)]")
                                                    (("2"
                                                      (inst
                                                       -
                                                       "{s: below(S) | (e!2 = s OR S!1(s)) AND f!1(s) = f!1(e!2)}")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst?)
                                                          nil)))
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (use
                                                           "finite_add")
                                                          (("2"
                                                            (grind)
                                                            nil)))))))))))))))))))))))))
                                   ("2"
                                    (hide -2 3)
                                    (("2"
                                      (expand "filter")
                                      (("2"
                                        (expand "add")
                                        (("2"
                                          (expand "member")
                                          (("2"
                                            (case-replace
                                             "(LAMBDA (j: below(S)): (e!2 = j OR S!1(j)) AND leq(f!1(j), f!1(choose({s: (e!1) | f!1(s) = t!1})))) = add(e!2, LAMBDA (j: below(S)): S!1(j) AND leq(f!1(j), f!1(choose({s: (e!1) | f!1(s) = t!1}))))")
                                            (("1"
                                              (lemma
                                               "card_add[below(S)]")
                                              (("1"
                                                (inst
                                                 -
                                                 "LAMBDA (j: below(S)): S!1(j) AND leq(f!1(j), f!1(choose({s: (e!1) | f!1(s) = t!1})))"
                                                 "e!2")
                                                (("1"
                                                  (replace -)
                                                  (("1" (assert) nil)))
                                                 ("2"
                                                  (use
                                                   "finite_intersect")
                                                  nil)))))
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (decompose-equality +)
                                                (("2"
                                                  (grind)
                                                  (("2"
                                                    (use
                                                     "epsilon_ax[below(S)]")
                                                    (("1"
                                                      (split)
                                                      (("1"
                                                        (replace -)
                                                        (("1"
                                                          (propax)
                                                          nil)))
                                                       ("2"
                                                        (inst?)
                                                        nil)))
                                                     ("2"
                                                      (inst + "0")
                                                      nil)))))))))))))))))))))
                                 ("2"
                                  (case-replace
                                   "filter(leq)(add(e!2, S!1))(f!1)(choose({s: (e!1) | f!1(s) = t!1})) = filter(leq)(S!1)(f!1)(choose({s: (e!1) | f!1(s) = t!1}))")
                                  (("1"
                                    (replace -2 :dir rl :hide? t)
                                    (("1"
                                      (case-replace
                                       "bag_to_set(l_filter(make_bag(add(e!2, S!1), f!1), t!1)) = bag_to_set(l_filter(make_bag(S!1, f!1), t!1))")
                                      (("1"
                                        (lemma
                                         "sum_particular2[T,real,0,+]")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (inst - "f!1(e!2)")
                                            (("1"
                                              (replace -1 :hide? t)
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (case-replace
                                                       "l_filter(make_bag(add(e!2, S!1), f!1), t!1)(f!1(e!2)) = 0")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide
                                                           -2
                                                           -3
                                                           -4)
                                                          (("1"
                                                            (case-replace
                                                             "(LAMBDA (t_1: T):
                                        IF t_1 = f!1(e!2) THEN 0
                                        ELSE l_filter(make_bag(add(e!2, S!1), f!1), t!1)(t_1)
                                        ENDIF) = LAMBDA (t: T): l_filter(make_bag(S!1, f!1), t!1)(t)")
                                                            (("1"
                                                              (hide 2)
                                                              (("1"
                                                                (decompose-equality
                                                                 +)
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (split)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (grind)
                                                                        nil)))
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (expand
                                                                         "l_filter")
                                                                        (("2"
                                                                          (lift-if)
                                                                          (("2"
                                                                            (split)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (expand
                                                                                 "make_bag")
                                                                                (("1"
                                                                                  (case-replace
                                                                                   "{s: below(S) | add(e!2, S!1)(s) AND f!1(s) = x!1} = {s: below(S) | S!1(s) AND f!1(s) = x!1}")
                                                                                  (("1"
                                                                                    (hide
                                                                                     2)
                                                                                    (("1"
                                                                                      (decompose-equality
                                                                                       +)
                                                                                      (("1"
                                                                                        (iff)
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil)))))))))))))
                                                                             ("2"
                                                                              (propax)
                                                                              nil)))))))))))))))))))))))
                                                       ("2"
                                                        (hide
                                                         -1
                                                         -2
                                                         -3
                                                         2)
                                                        (("2"
                                                          (grind)
                                                          nil)))))))
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (case-replace
                                                         "(LAMBDA (t_1: T):
                                    IF t_1 = f!1(e!2) THEN 0
                                    ELSE l_filter(make_bag(add(e!2, S!1), f!1), t!1)(t_1)
                                    ENDIF) = LAMBDA (t: T): l_filter(make_bag(S!1, f!1), t!1)(t)")
                                                        (("2"
                                                          (hide 3)
                                                          (("2"
                                                            (decompose-equality
                                                             +)
                                                            (("2"
                                                              (lift-if)
                                                              (("2"
                                                                (split)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (expand
                                                                     "bag_to_set")
                                                                    (("1"
                                                                      (assert)
                                                                      nil)))))
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (hide
                                                                     -1
                                                                     -2)
                                                                    (("2"
                                                                      (expand
                                                                       "bag_to_set")
                                                                      (("2"
                                                                        (expand
                                                                         "l_filter")
                                                                        (("2"
                                                                          (lift-if)
                                                                          (("2"
                                                                            (split)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (expand
                                                                                 "make_bag")
                                                                                (("1"
                                                                                  (expand
                                                                                   "add")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "member")
                                                                                    (("1"
                                                                                      (case-replace
                                                                                       "{s: below(S) | (e!2 = s OR S!1(s)) AND f!1(s) = x!1} = {s: below(S) | S!1(s) AND f!1(s) = x!1}")
                                                                                      (("1"
                                                                                        (hide
                                                                                         2)
                                                                                        (("1"
                                                                                          (decompose-equality
                                                                                           +)
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil)))))))))))))))
                                                                             ("2"
                                                                              (propax)
                                                                              nil)))))))))))))))))))))))))))))))))))))))
                                       ("2"
                                        (hide -1 4)
                                        (("2"
                                          (decompose-equality +)
                                          (("2"
                                            (grind)
                                            (("1"
                                              (case "x!1 = f!1(e!2)")
                                              (("1"
                                                (hide-all-but
                                                 (-1 -4 2))
                                                (("1"
                                                  (typepred! "leq")
                                                  (("1"
                                                    (grind)
                                                    nil)))))
                                               ("2"
                                                (lemma
                                                 "nonempty_card[below(S)]")
                                                (("2"
                                                  (inst-cp
                                                   -
                                                   "{s: below(S) | (e!2 = s OR S!1(s)) AND f!1(s) = x!1}")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (skosimp*)
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (replace*)
                                                          nil)
                                                         ("2"
                                                          (inst
                                                           -
                                                           "{s: below(S) | S!1(s) AND f!1(s) = x!1}")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (assert)
                                                                nil)))))
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (use
                                                               "finite_intersect")
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "LAMBDA (s: below(S)): f!1(s) = x!1"
                                                                 "S!1")
                                                                (("2"
                                                                  (grind)
                                                                  nil)))))))))))))))
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (use
                                                       "finite_add")
                                                      (("2"
                                                        (inst
                                                         -
                                                         "LAMBDA (s: below(S)): f!1(s) = x!1"
                                                         "S!1"
                                                         "e!2")
                                                        (("2"
                                                          (grind)
                                                          nil)))))))))))))
                                             ("2"
                                              (lemma
                                               "nonempty_card[below(S)]")
                                              (("2"
                                                (inst-cp
                                                 -
                                                 "{s: below(S) | S!1(s) AND f!1(s) = x!1}")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (skosimp*)
                                                    (("1"
                                                      (inst
                                                       -
                                                       "{s: below(S) | (e!2 = s OR S!1(s)) AND f!1(s) = x!1}")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            nil)))))
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (use
                                                           "finite_add")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "LAMBDA (s: below(S)): f!1(s) = x!1"
                                                             "S!1"
                                                             "e!2")
                                                            (("2"
                                                              (grind)
                                                              nil)))))))))))))
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (use
                                                     "finite_intersect")
                                                    (("2"
                                                      (inst
                                                       -
                                                       "LAMBDA (s: below(S)): f!1(s) = x!1"
                                                       "S!1")
                                                      (("2"
                                                        (grind)
                                                        nil)))))))))))))))))))))
                                   ("2"
                                    (hide -1 4)
                                    (("2"
                                      (decompose-equality +)
                                      (("2"
                                        (grind)
                                        (("2"
                                          (use "epsilon_ax[below(S)]")
                                          (("1"
                                            (split)
                                            (("1"
                                              (replace -)
                                              (("1" (propax) nil)))
                                             ("2" (inst?) nil)))
                                           ("2"
                                            (inst + "0")
                                            nil))))))))))))))))))))))))))))))))))))))))
    nil)
   unfinished nil 83189 3820 t nil)
  (filter_l-1 nil 3287406767 3287426843
   ("" (skolem + ("f!1" "e!1" "t!1"))
    (("" (flatten)
      (("" (use "nonempty_choose")
        (("" (assert)
          (("" (use "card_make_bag")
            (("" (replace -1 :hide? t)
              ((""
                (case-replace
                 "card(l_filter(make_bag(e!1, f!1), t!1)) = card(filter(leq)(e!1)(f!1)(choose({s | f!1(s) = t!1})))")
                (("" (hide -2 -3 2)
                  (("" (expand "card")
                    (("" (lemma "finite_set_ind_modified[below(S)]")
                      ((""
                        (inst -
                         "LAMBDA (ee: finite_set[below(S)]): sum(bag_to_set(l_filter(make_bag(ee, f!1), t!1)),
                LAMBDA (t: T): l_filter(make_bag(ee, f!1), t!1)(t))
             = card(filter(leq)(ee)(f!1)(choose({s | f!1(s) = t!1})))")
                        (("" (split)
                          (("1" (inst?) nil nil)
                           ("2" (hide 2)
                            (("2" (expand "sum")
                              (("2"
                                (lift-if)
                                (("2"
                                  (prop)
                                  (("1"
                                    (expand "filter")
                                    (("1"
                                      (expand "emptyset")
                                      (("1"
                                        (expand "empty?")
                                        (("1"
                                          (expand "member")
                                          (("1"
                                            (expand "bag_to_set")
                                            (("1"
                                              (expand "make_bag")
                                              (("1"
                                                (expand "l_filter")
                                                (("1"
                                                  (use
                                                   "empty_card[below(S)]")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "empty?")
                                                      (("1"
                                                        (skosimp*)
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (expand
                                                             "member")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (use
                                                     "finite_empty")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (expand "bag_to_set")
                                      (("2"
                                        (expand "l_filter")
                                        (("2"
                                          (expand "make_bag")
                                          (("2"
                                            (expand "emptyset")
                                            (("2"
                                              (expand "empty?")
                                              (("2"
                                                (skosimp*)
                                                (("2"
                                                  (expand "member")
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (split)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (use
                                                           "empty_card[below(S)]")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "empty?")
                                                              (("1"
                                                                (skosimp*)
                                                                (("1"
                                                                  (expand
                                                                   "member")
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (use
                                                             "finite_empty")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (skosimp*)
                            (("3" (hide 3)
                              (("3"
                                (case "leq(f!1(e!2),t!1)")
                                (("1"
                                  (case-replace
                                   "card(filter(leq)(add(e!2, S!1))(f!1)(choose({s | f!1(s) = t!1}))) = card(filter(leq)(S!1)(f!1)(choose({s | f!1(s) = t!1}))) + 1")
                                  (("1"
                                    (replace -3 :dir rl :hide? t)
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (case
                                         "bag_to_set(l_filter(make_bag(S!1, f!1), t!1))(f!1(e!2))")
                                        (("1"
                                          (case
                                           "l_filter(make_bag(add(e!2, S!1), f!1), t!1)(f!1(e!2)) = l_filter(make_bag(S!1, f!1), t!1)(f!1(e!2)) + 1")
                                          (("1"
                                            (lemma "sum_x[T,real,0,+]")
                                            (("1"
                                              (inst-cp
                                               -
                                               "bag_to_set(l_filter(make_bag(add(e!2, S!1), f!1), t!1))"
                                               "LAMBDA (t: T): l_filter(make_bag(add(e!2, S!1), f!1), t!1)(t)"
                                               "f!1(e!2)")
                                              (("1"
                                                (inst
                                                 -
                                                 "bag_to_set(l_filter(make_bag(S!1, f!1), t!1))"
                                                 "LAMBDA (t: T): l_filter(make_bag(S!1, f!1), t!1)(t)"
                                                 "f!1(e!2)")
                                                (("1"
                                                  (replace*)
                                                  (("1"
                                                    (hide -1 -2 -3)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lemma
                                                         "sum_particular2[T,real,0,+]")
                                                        (("1"
                                                          (inst
                                                           -
                                                           "remove(f!1(e!2),
                                                                                                         bag_to_set(l_filter(make_bag(add(e!2, S!1), f!1), t!1)))"
                                                           "LAMBDA (t: T): l_filter(make_bag(add(e!2, S!1), f!1), t!1)(t)"
                                                           "f!1(e!2)")
                                                          (("1"
                                                            (replace

                                                             -
                                                             :hide?

                                                             t)
                                                            (("1"
                                                              (lift-if)
                                                              (("1"
                                                                (split)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (hide-all-but
                                                                     -1)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (hide
                                                                     1)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (name-replace
                                                                         "g"
                                                                         "LAMBDA (t: T): l_filter(make_bag(add(e!2, S!1), f!1), t!1)(t)")
                                                                        (("2"
                                                                          (case-replace
                                                                           "remove(f!1(e!2),
                                                                                                                     bag_to_set(l_filter(make_bag(add(e!2, S!1), f!1), t!1))) = remove(f!1(e!2), bag_to_set(l_filter(make_bag(S!1, f!1), t!1)))")
                                                                          (("1"
                                                                            (hide
                                                                             -1)
                                                                            (("1"
                                                                              (use
                                                                               "sum_f_g[T,real,0,+]")
                                                                              (("1"
                                                                                (split)
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (skosimp*)
                                                                                  (("2"
                                                                                    (hide
                                                                                     2)
                                                                                    (("2"
                                                                                      (lift-if)
                                                                                      (("2"
                                                                                        (typepred!
                                                                                         "x!1")
                                                                                        (("2"
                                                                                          (split)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (grind)
                                                                                              (("2"
                                                                                                (case-replace
                                                                                                 "{s: below(S) | (e!2 = s OR S!1(s)) AND f!1(s) = x!1} = {s: below(S) | S!1(s) AND f!1(s) = x!1}")
                                                                                                (("2"
                                                                                                  (hide
                                                                                                   3)
                                                                                                  (("2"
                                                                                                    (decompose-equality
                                                                                                     +)
                                                                                                    (("2"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             2)
                                                                            (("2"
                                                                              (decompose-equality
                                                                               +)
                                                                              (("2"
                                                                                (expand
                                                                                 "remove")
                                                                                (("2"
                                                                                  (iff)
                                                                                  (("2"
                                                                                    (prop)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "member")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "bag_to_set")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "l_filter")
                                                                                          (("1"
                                                                                            (lift-if)
                                                                                            (("1"
                                                                                              (prop)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "make_bag")
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "nonempty_card[below(S)]")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "{s: below(S) | S!1(s) AND f!1(s) = f!1(e!2)}")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "nonempty?")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "empty?")
                                                                                                          (("1"
                                                                                                            (skosimp*)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "member")
                                                                                                              (("1"
                                                                                                                (flatten)
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "nonempty_card[below(S)]")
                                                                                                                  (("1"
                                                                                                                    (inst?)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "nonempty?")
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "empty?")
                                                                                                                          (("1"
                                                                                                                            (skosimp*)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "member")
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "add")
                                                                                                                                (("1"
                                                                                                                                  (flatten)
                                                                                                                                  (("1"
                                                                                                                                    (split)
                                                                                                                                    (("1"
                                                                                                                                      (lemma
                                                                                                                                       "nonempty_card[below(S)]")
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         -
                                                                                                                                         "{s: below(S) | S!1(s) AND f!1(s) = x!1}")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (use
                                                                                                                                           "finite_intersect")
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (expand
                                                                                                                                       "member")
                                                                                                                                      (("2"
                                                                                                                                        (lemma
                                                                                                                                         "nonempty_card[below(S)]")
                                                                                                                                        (("2"
                                                                                                                                          (inst
                                                                                                                                           -
                                                                                                                                           "{s: below(S) | S!1(s) AND f!1(s) = x!1}")
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            (("1"
                                                                                                                                              (grind)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (use
                                                                                                                                             "finite_intersect")
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (use
                                                                                                                       "finite_add")
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (use
                                                                                                       "finite_intersect")
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (grind)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "nonempty_card[below(S)]")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -
                                                                                           "{s: below(S) | S!1(s) AND f!1(s) = x!1}")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (skosimp*)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "nonempty_card[below(S)]")
                                                                                                (("1"
                                                                                                  (inst?)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (inst?)
                                                                                                      (("1"
                                                                                                        (prop)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide-all-but
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (use
                                                                                                       "finite_add")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "LAMBDA (s: below(S)): f!1(s) = x!1"
                                                                                                         "S!1"
                                                                                                         "e!2")
                                                                                                        (("2"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide-all-but
                                                                                             1)
                                                                                            (("2"
                                                                                              (use
                                                                                               "finite_intersect")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -
                                                                                                 "LAMBDA (s: below(S)): f!1(s) = x!1"
                                                                                                 "S!1")
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide -1 3)
                                                (("2"
                                                  (expand "bag_to_set")
                                                  (("2"
                                                    (expand "l_filter")
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (prop)
                                                        (("2"
                                                          (expand
                                                           "make_bag")
                                                          (("2"
                                                            (lemma
                                                             "nonempty_card[below(S)]")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "{s: below(S) | S!1(s) AND f!1(s) = f!1(e!2)}")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "nonempty?")
                                                                  (("1"
                                                                    (expand
                                                                     "empty?")
                                                                    (("1"
                                                                      (skosimp*)
                                                                      (("1"
                                                                        (expand
                                                                         "member")
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (lemma
                                                                             "nonempty_card[below(S)]")
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "{s: below(S) | add[below(S)](e!2, S!1)(s) AND f!1(s) = f!1(e!2)}")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "nonempty?")
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (use
                                                                                 "finite_add")
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (use
                                                                 "finite_intersect")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 3)
                                            (("2"
                                              (expand "l_filter")
                                              (("2"
                                                (lift-if)
                                                (("2"
                                                  (split)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (expand
                                                       "make_bag")
                                                      (("1"
                                                        (case-replace
                                                         "{s: below(S) | add(e!2, S!1)(s) AND f!1(s) = f!1(e!2)} = add(e!2, {s: below(S) | S!1(s) AND f!1(s) = f!1(e!2)})")
                                                        (("1"
                                                          (lemma
                                                           "card_add[below(S)]")
                                                          (("1"
                                                            (inst
                                                             -
                                                             "{s: below(S) | S!1(s) AND f!1(s) = f!1(e!2)}"
                                                             "e!2")
                                                            (("1"
                                                              (replace

                                                               -1)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (use
                                                               "finite_intersect")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide -2 2)
                                                          (("2"
                                                            (decompose-equality
                                                             +)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma "sum_x[T,real,0,+]")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (inst - "f!1(e!2)")
                                              (("1"
                                                (replace - :hide? t)
                                                (("1"
                                                  (case-replace
                                                   "remove(f!1(e!2),
                                                                                bag_to_set(l_filter(make_bag(add(e!2, S!1), f!1),
                                                                                                    t!1))) = bag_to_set(l_filter(make_bag(S!1, f!1), t!1))")
                                                  (("1"
                                                    (lemma
                                                     "sum_particular2[T,real,0,+]")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (replace

                                                           -1
                                                           :hide?

                                                           t)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (case
                                                               "l_filter(make_bag(add(e!2, S!1), f!1), t!1)(f!1(e!2)) = 1")
                                                              (("1"
                                                                (replace

                                                                 -
                                                                 :hide?

                                                                 t)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case-replace
                                                                     "(LAMBDA (t_1: T):
                                        IF t_1 = f!1(e!2) THEN 0
                                        ELSE l_filter(make_bag(add(e!2, S!1), f!1), t!1)(t_1)
                                        ENDIF) = LAMBDA (t: T): l_filter(make_bag(S!1, f!1), t!1)(t)")
                                                                    (("1"
                                                                      (hide
                                                                       4)
                                                                      (("1"
                                                                        (decompose-equality
                                                                         +)
                                                                        (("1"
                                                                          (lift-if)
                                                                          (("1"
                                                                            (split)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (expand
                                                                                 "bag_to_set")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (hide
                                                                                 -1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "bag_to_set")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "l_filter")
                                                                                    (("2"
                                                                                      (lift-if)
                                                                                      (("2"
                                                                                        (split)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "make_bag")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "add")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "member")
                                                                                                (("1"
                                                                                                  (case-replace
                                                                                                   "{s: below(S) | (e!2 = s OR S!1(s)) AND f!1(s) = x!1} = {s: below(S) | S!1(s) AND f!1(s) = x!1}")
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     2)
                                                                                                    (("1"
                                                                                                      (decompose-equality
                                                                                                       +)
                                                                                                      (("1"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 -1
                                                                 4)
                                                                (("2"
                                                                  (expand
                                                                   "bag_to_set")
                                                                  (("2"
                                                                    (expand
                                                                     "l_filter")
                                                                    (("2"
                                                                      (expand
                                                                       "make_bag")
                                                                      (("2"
                                                                        (lemma
                                                                         "nonempty_card[below(S)]")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "{s: below(S) | S!1(s) AND f!1(s) = f!1(e!2)}")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "nonempty?")
                                                                              (("1"
                                                                                (expand
                                                                                 "empty?")
                                                                                (("1"
                                                                                  (expand
                                                                                   "member")
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "card_one[below(S)]")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "{s: below(S) | add(e!2, S!1)(s) AND f!1(s) = f!1(e!2)}")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (inst?)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "singleton")
                                                                                            (("1"
                                                                                              (decompose-equality
                                                                                               +)
                                                                                              (("1"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (use
                                                                                         "finite_add")
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (use
                                                                             "finite_intersect")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 4)
                                                    (("2"
                                                      (decompose-equality
                                                       +)
                                                      (("2"
                                                        (iff)
                                                        (("2"
                                                          (grind)
                                                          (("1"
                                                            (lemma
                                                             "nonempty_card[below(S)]")
                                                            (("1"
                                                              (inst-cp
                                                               -
                                                               "{s: below(S) | (e!2 = s OR S!1(s)) AND f!1(s) = x!1}")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (skosimp*)
                                                                  (("1"
                                                                    (split)
                                                                    (("1"
                                                                      (replace*)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (inst
                                                                       -
                                                                       "{s: below(S) | S!1(s) AND f!1(s) = x!1}")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (split)
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("2"
                                                                          (use
                                                                           "finite_intersect")
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "LAMBDA (s: below(S)): f!1(s) = x!1"
                                                                             "S!1")
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (use
                                                                   "finite_add")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "LAMBDA (s: below(S)): f!1(s) = x!1"
                                                                     "S!1"
                                                                     "e!2")
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (lemma
                                                             "nonempty_card[below(S)]")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "{s: below(S) | S!1(s) AND f!1(s) = x!1}")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (skosimp*)
                                                                  (("1"
                                                                    (lemma
                                                                     "nonempty_card[below(S)]")
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "{s: below(S) | (e!2 = s OR S!1(s)) AND f!1(s) = x!1}")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (prop)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("2"
                                                                          (use
                                                                           "finite_add")
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "LAMBDA (s: below(S)): f!1(s) = x!1"
                                                                             "S!1"
                                                                             "e!2")
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (use
                                                                 "finite_intersect")
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 4)
                                                (("2"
                                                  (grind)
                                                  (("2"
                                                    (lemma
                                                     "nonempty_card[below(S)]")
                                                    (("2"
                                                      (inst
                                                       -
                                                       "{s: below(S) | (e!2 = s OR S!1(s)) AND f!1(s) = f!1(e!2)}")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst?)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (use
                                                           "finite_add")
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide -2 3)
                                    (("2"
                                      (expand "filter")
                                      (("2"
                                        (expand "add")
                                        (("2"
                                          (expand "member")
                                          (("2"
                                            (case-replace
                                             "(LAMBDA (j: below(S)): (e!2 = j OR S!1(j)) AND leq(f!1(j), f!1(choose({s | f!1(s) = t!1})))) = add(e!2, LAMBDA (j: below(S)): S!1(j) AND leq(f!1(j), f!1(choose({s | f!1(s) = t!1}))))")
                                            (("1"
                                              (lemma
                                               "card_add[below(S)]")
                                              (("1"
                                                (inst
                                                 -
                                                 "LAMBDA (j: below(S)): S!1(j) AND leq(f!1(j), f!1(choose({s | f!1(s) = t!1})))"
                                                 "e!2")
                                                (("1"
                                                  (replace -)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (use
                                                   "finite_intersect")
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (decompose-equality +)
                                                (("2"
                                                  (grind)
                                                  (("2"
                                                    (use
                                                     "epsilon_ax[below(S)]")
                                                    (("1"
                                                      (split)
                                                      (("1"
                                                        (replace -)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (inst?)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (inst + "0")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (case-replace
                                   "filter(leq)(add(e!2, S!1))(f!1)(choose({s | f!1(s) = t!1})) = filter(leq)(S!1)(f!1)(choose({s | f!1(s) = t!1}))")
                                  (("1"
                                    (replace -2 :dir rl :hide? t)
                                    (("1"
                                      (case-replace
                                       "bag_to_set(l_filter(make_bag(add(e!2, S!1), f!1), t!1)) = bag_to_set(l_filter(make_bag(S!1, f!1), t!1))")
                                      (("1"
                                        (lemma
                                         "sum_particular2[T,real,0,+]")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (inst - "f!1(e!2)")
                                            (("1"
                                              (replace -1 :hide? t)
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (case-replace
                                                       "l_filter(make_bag(add(e!2, S!1), f!1), t!1)(f!1(e!2)) = 0")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide
                                                           -2
                                                           -3
                                                           -4)
                                                          (("1"
                                                            (case-replace
                                                             "(LAMBDA (t_1: T):
                          IF t_1 = f!1(e!2) THEN 0
                          ELSE l_filter(make_bag(add(e!2, S!1), f!1), t!1)(t_1)
                          ENDIF) = LAMBDA (t: T): l_filter(make_bag(S!1, f!1), t!1)(t)")
                                                            (("1"
                                                              (hide 2)
                                                              (("1"
                                                                (decompose-equality
                                                                 +)
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (split)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (expand
                                                                         "l_filter")
                                                                        (("2"
                                                                          (lift-if)
                                                                          (("2"
                                                                            (split)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (expand
                                                                                 "make_bag")
                                                                                (("1"
                                                                                  (case-replace
                                                                                   "{s: below(S) | add(e!2, S!1)(s) AND f!1(s) = x!1} = {s: below(S) | S!1(s) AND f!1(s) = x!1}")
                                                                                  (("1"
                                                                                    (hide
                                                                                     2)
                                                                                    (("1"
                                                                                      (decompose-equality
                                                                                       +)
                                                                                      (("1"
                                                                                        (iff)
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide
                                                         -1
                                                         -2
                                                         -3
                                                         2)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (case-replace
                                                         "(LAMBDA (t_1: T):
                        IF t_1 = f!1(e!2) THEN 0
                        ELSE l_filter(make_bag(add(e!2, S!1), f!1), t!1)(t_1)
                        ENDIF) = LAMBDA (t: T): l_filter(make_bag(S!1, f!1), t!1)(t)")
                                                        (("2"
                                                          (hide 3)
                                                          (("2"
                                                            (decompose-equality
                                                             +)
                                                            (("2"
                                                              (lift-if)
                                                              (("2"
                                                                (split)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (expand
                                                                     "bag_to_set")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (hide
                                                                     -1
                                                                     -2)
                                                                    (("2"
                                                                      (expand
                                                                       "bag_to_set")
                                                                      (("2"
                                                                        (expand
                                                                         "l_filter")
                                                                        (("2"
                                                                          (lift-if)
                                                                          (("2"
                                                                            (split)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (expand
                                                                                 "make_bag")
                                                                                (("1"
                                                                                  (expand
                                                                                   "add")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "member")
                                                                                    (("1"
                                                                                      (case-replace
                                                                                       "{s: below(S) | (e!2 = s OR S!1(s)) AND f!1(s) = x!1} = {s: below(S) | S!1(s) AND f!1(s) = x!1}")
                                                                                      (("1"
                                                                                        (hide
                                                                                         2)
                                                                                        (("1"
                                                                                          (decompose-equality
                                                                                           +)
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -1 4)
                                        (("2"
                                          (decompose-equality +)
                                          (("2"
                                            (grind)
                                            (("1"
                                              (case "x!1 = f!1(e!2)")
                                              (("1"
                                                (hide-all-but
                                                 (-1 -4 2))
                                                (("1"
                                                  (typepred! "leq")
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma
                                                 "nonempty_card[below(S)]")
                                                (("2"
                                                  (inst-cp
                                                   -
                                                   "{s: below(S) | (e!2 = s OR S!1(s)) AND f!1(s) = x!1}")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (skosimp*)
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (replace*)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (inst
                                                           -
                                                           "{s: below(S) | S!1(s) AND f!1(s) = x!1}")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (use
                                                               "finite_intersect")
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "LAMBDA (s: below(S)): f!1(s) = x!1"
                                                                 "S!1")
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (use
                                                       "finite_add")
                                                      (("2"
                                                        (inst
                                                         -
                                                         "LAMBDA (s: below(S)): f!1(s) = x!1"
                                                         "S!1"
                                                         "e!2")
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma
                                               "nonempty_card[below(S)]")
                                              (("2"
                                                (inst-cp
                                                 -
                                                 "{s: below(S) | S!1(s) AND f!1(s) = x!1}")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (skosimp*)
                                                    (("1"
                                                      (inst
                                                       -
                                                       "{s: below(S) | (e!2 = s OR S!1(s)) AND f!1(s) = x!1}")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (use
                                                           "finite_add")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "LAMBDA (s: below(S)): f!1(s) = x!1"
                                                             "S!1"
                                                             "e!2")
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (use
                                                     "finite_intersect")
                                                    (("2"
                                                      (inst
                                                       -
                                                       "LAMBDA (s: below(S)): f!1(s) = x!1"
                                                       "S!1")
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide -1 4)
                                    (("2"
                                      (decompose-equality +)
                                      (("2"
                                        (grind)
                                        (("2"
                                          (use "epsilon_ax[below(S)]")
                                          (("1"
                                            (split)
                                            (("1"
                                              (replace -)
                                              (("1" (propax) nil nil))
                                              nil)
                                             ("2" (inst?) nil nil))
                                            nil)
                                           ("2" (inst + "0") nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((finite_set_ind_modified formula-decl nil finite_sets_inductions
     "finite_sets/")
    (emptyset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (empty_card formula-decl nil finite_sets nil)
    (FALSE const-decl "bool" booleans nil)
    (finite_empty formula-decl nil make_bag nil)
    (dichotomous? const-decl "bool" orders nil)
    (partial_order? const-decl "bool" orders nil)
    (antisymmetric? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (reflexive? const-decl "bool" relations nil)
    (add const-decl "(nonempty?)" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (card_one formula-decl nil finite_sets nil)
    (/= const-decl "boolean" notequal nil)
    (remove const-decl "set" sets nil)
    (sum_f_g formula-decl nil finite_sets_sum "finite_sets/")
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (injective? const-decl "bool" functions nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (finite_add formula-decl nil make_bag nil)
    (finite_intersect formula-decl nil make_bag nil) nil
    (sum_x formula-decl nil finite_sets_sum "finite_sets/")
    (card_add formula-decl nil finite_sets nil)
    (epsilon_ax formula-decl nil epsilons nil)
    (TRUE const-decl "bool" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sum def-decl "R" finite_sets_sum "finite_sets/")
    (bag_to_set const-decl "set[T]" bags_to_sets "structures/")
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (filter const-decl "bool" index_filters nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (make_bag const-decl "finite_bag[T]" make_bag nil)
    (l_filter const-decl "bag" bag_filters "structures/")
    (leq formal-const-decl "(total_order?[T])" mid_val_equiv nil)
    (total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (card const-decl "nat" finite_bags "structures/")
    (finite_bag type-eq-decl nil finite_bags "structures/")
    (is_finite const-decl "bool" finite_bags "structures/")
    (bag type-eq-decl nil bags "structures/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (card_make_bag formula-decl nil make_bag nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (S formal-const-decl "posnat" mid_val_equiv nil)
    (below type-eq-decl nil naturalnumbers nil)
    (T formal-nonempty-type-decl nil mid_val_equiv nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (nonempty_choose formula-decl nil mid_val_equiv nil))
   2760942 125930 t shostak))
 (filter_u 0
  (filter_u-2 nil 3287757611 3292683194
   ("" (skolem + ("f!1" "e!1" "t!1"))
    (("" (flatten)
      (("" (use "nonempty_choose")
        (("" (assert)
          (("" (use "card_make_bag")
            (("" (replace -1 :hide? t)
              ((""
                (case-replace
                 "card(u_filter(make_bag(e!1, f!1), t!1)) = card(filter(geq)(e!1)(f!1)(choose({s: (e!1) | f!1(s) = t!1})))")
                (("" (hide -2 -3 2)
                  (("" (expand "card")
                    (("" (lemma "finite_set_ind_modified[below(S)]")
                      ((""
                        (inst -
                         "LAMBDA (ee: finite_set[below(S)]): sum(bag_to_set(u_filter(make_bag(ee, f!1), t!1)),
                          LAMBDA (t: T): u_filter(make_bag(ee, f!1), t!1)(t))
                       = card(filter(geq)(ee)(f!1)(choose({s: (e!1) | f!1(s) = t!1})))")
                        (("" (split)
                          (("1" (inst?) nil nil)
                           ("2" (hide 2)
                            (("2" (expand "sum")
                              (("2"
                                (lift-if)
                                (("2"
                                  (prop)
                                  (("1"
                                    (expand "filter")
                                    (("1"
                                      (expand "emptyset")
                                      (("1"
                                        (expand "empty?")
                                        (("1"
                                          (expand "member")
                                          (("1"
                                            (expand "bag_to_set")
                                            (("1"
                                              (expand "make_bag")
                                              (("1"
                                                (expand "u_filter")
                                                (("1"
                                                  (use
                                                   "empty_card[below(S)]")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "empty?")
                                                      (("1"
                                                        (skosimp*)
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (expand
                                                             "member")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (use
                                                     "finite_empty")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (expand "bag_to_set")
                                      (("2"
                                        (expand "u_filter")
                                        (("2"
                                          (expand "make_bag")
                                          (("2"
                                            (expand "emptyset")
                                            (("2"
                                              (expand "empty?")
                                              (("2"
                                                (skosimp*)
                                                (("2"
                                                  (expand "member")
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (split)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (use
                                                           "empty_card[below(S)]")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "empty?")
                                                              (("1"
                                                                (skosimp*)
                                                                (("1"
                                                                  (expand
                                                                   "member")
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (use
                                                             "finite_empty")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (skosimp*)
                            (("3" (hide 3)
                              (("3"
                                (case "geq(f!1(e!2),t!1)")
                                (("1"
                                  (case-replace
                                   "card(filter(geq)(add(e!2, S!1))(f!1)(choose({s: (e!1) | f!1(s) = t!1}))) = card(filter(geq)(S!1)(f!1)(choose({s: (e!1) | f!1(s) = t!1}))) + 1")
                                  (("1"
                                    (replace -3 :dir rl :hide? t)
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (case
                                         "bag_to_set(u_filter(make_bag(S!1, f!1), t!1))(f!1(e!2))")
                                        (("1"
                                          (case
                                           "u_filter(make_bag(add(e!2, S!1), f!1), t!1)(f!1(e!2)) = u_filter(make_bag(S!1, f!1), t!1)(f!1(e!2)) + 1")
                                          (("1"
                                            (lemma "sum_x[T,real,0,+]")
                                            (("1"
                                              (inst-cp
                                               -
                                               "bag_to_set(u_filter(make_bag(add(e!2, S!1), f!1), t!1))"
                                               "LAMBDA (t: T): u_filter(make_bag(add(e!2, S!1), f!1), t!1)(t)"
                                               "f!1(e!2)")
                                              (("1"
                                                (inst
                                                 -
                                                 "bag_to_set(u_filter(make_bag(S!1, f!1), t!1))"
                                                 "LAMBDA (t: T): u_filter(make_bag(S!1, f!1), t!1)(t)"
                                                 "f!1(e!2)")
                                                (("1"
                                                  (replace*)
                                                  (("1"
                                                    (hide -1 -2 -3)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lemma
                                                         "sum_particular2[T,real,0,+]")
                                                        (("1"
                                                          (inst
                                                           -
                                                           "remove(f!1(e!2),
                                                                                                                                                                               bag_to_set(u_filter(make_bag(add(e!2, S!1), f!1), t!1)))"
                                                           "LAMBDA (t: T): u_filter(make_bag(add(e!2, S!1), f!1), t!1)(t)"
                                                           "f!1(e!2)")
                                                          (("1"
                                                            (replace

                                                             -
                                                             :hide?

                                                             t)
                                                            (("1"
                                                              (lift-if)
                                                              (("1"
                                                                (split)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (hide-all-but
                                                                     -1)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (hide
                                                                     1)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (name-replace
                                                                         "g"
                                                                         "LAMBDA (t: T): u_filter(make_bag(add(e!2, S!1), f!1), t!1)(t)")
                                                                        (("2"
                                                                          (case-replace
                                                                           "remove(f!1(e!2),
                                                                                                                                                                                                     bag_to_set(u_filter(make_bag(add(e!2, S!1), f!1), t!1))) = remove(f!1(e!2), bag_to_set(u_filter(make_bag(S!1, f!1), t!1)))")
                                                                          (("1"
                                                                            (hide
                                                                             -1)
                                                                            (("1"
                                                                              (use
                                                                               "sum_f_g[T,real,0,+]")
                                                                              (("1"
                                                                                (split)
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (skosimp*)
                                                                                  (("2"
                                                                                    (hide
                                                                                     2)
                                                                                    (("2"
                                                                                      (lift-if)
                                                                                      (("2"
                                                                                        (typepred!
                                                                                         "x!1")
                                                                                        (("2"
                                                                                          (split)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (grind)
                                                                                              (("2"
                                                                                                (case-replace
                                                                                                 "{s: below(S) | (e!2 = s OR S!1(s)) AND f!1(s) = x!1} = {s: below(S) | S!1(s) AND f!1(s) = x!1}")
                                                                                                (("2"
                                                                                                  (hide
                                                                                                   3)
                                                                                                  (("2"
                                                                                                    (decompose-equality
                                                                                                     +)
                                                                                                    (("2"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             2)
                                                                            (("2"
                                                                              (decompose-equality
                                                                               +)
                                                                              (("2"
                                                                                (expand
                                                                                 "remove")
                                                                                (("2"
                                                                                  (iff)
                                                                                  (("2"
                                                                                    (prop)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "member")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "bag_to_set")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "u_filter")
                                                                                          (("1"
                                                                                            (lift-if)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "geq")
                                                                                              (("1"
                                                                                                (prop)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "make_bag")
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "nonempty_card[below(S)]")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "{s: below(S) | add(e!2, S!1)(s) AND f!1(s) = x!1}")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "nonempty?")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "empty?")
                                                                                                            (("1"
                                                                                                              (skosimp*)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "member")
                                                                                                                (("1"
                                                                                                                  (flatten)
                                                                                                                  (("1"
                                                                                                                    (lemma
                                                                                                                     "nonempty_card[below(S)]")
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -
                                                                                                                       "{s: below(S) | S!1(s) AND f!1(s) = x!1}")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "nonempty?")
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "empty?")
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -
                                                                                                                               "x!2")
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "member")
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "add")
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "member")
                                                                                                                                    (("1"
                                                                                                                                      (propax)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (use
                                                                                                                         "finite_intersect")
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (use
                                                                                                         "finite_add")
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (grind)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "nonempty_card[below(S)]")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -
                                                                                           "{s: below(S) | S!1(s) AND f!1(s) = x!1}")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (skosimp*)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "nonempty_card[below(S)]")
                                                                                                (("1"
                                                                                                  (inst?)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (inst?)
                                                                                                      (("1"
                                                                                                        (prop)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide-all-but
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (use
                                                                                                       "finite_add")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "LAMBDA (s: below(S)): f!1(s) = x!1"
                                                                                                         "S!1"
                                                                                                         "e!2")
                                                                                                        (("2"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide-all-but
                                                                                             1)
                                                                                            (("2"
                                                                                              (use
                                                                                               "finite_intersect")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -
                                                                                                 "LAMBDA (s: below(S)): f!1(s) = x!1"
                                                                                                 "S!1")
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide -1 3)
                                                (("2"
                                                  (expand "bag_to_set")
                                                  (("2"
                                                    (expand "u_filter")
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (prop)
                                                        (("2"
                                                          (expand
                                                           "make_bag")
                                                          (("2"
                                                            (lemma
                                                             "nonempty_card[below(S)]")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "{s: below(S) | S!1(s) AND f!1(s) = f!1(e!2)}")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "nonempty?")
                                                                  (("1"
                                                                    (expand
                                                                     "empty?")
                                                                    (("1"
                                                                      (skosimp*)
                                                                      (("1"
                                                                        (expand
                                                                         "member")
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (lemma
                                                                             "nonempty_card[below(S)]")
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "{s: below(S) | add[below(S)](e!2, S!1)(s) AND f!1(s) = f!1(e!2)}")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "nonempty?")
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (use
                                                                                 "finite_add")
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (use
                                                                 "finite_intersect")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 3)
                                            (("2"
                                              (expand "u_filter")
                                              (("2"
                                                (lift-if)
                                                (("2"
                                                  (split)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (expand
                                                       "make_bag")
                                                      (("1"
                                                        (case-replace
                                                         "{s: below(S) | add(e!2, S!1)(s) AND f!1(s) = f!1(e!2)} = add(e!2, {s: below(S) | S!1(s) AND f!1(s) = f!1(e!2)})")
                                                        (("1"
                                                          (lemma
                                                           "card_add[below(S)]")
                                                          (("1"
                                                            (inst
                                                             -
                                                             "{s: below(S) | S!1(s) AND f!1(s) = f!1(e!2)}"
                                                             "e!2")
                                                            (("1"
                                                              (replace

                                                               -1)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (use
                                                               "finite_intersect")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide -2 2)
                                                          (("2"
                                                            (decompose-equality
                                                             +)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (expand "geq")
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma "sum_x[T,real,0,+]")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (inst - "f!1(e!2)")
                                              (("1"
                                                (replace - :hide? t)
                                                (("1"
                                                  (case-replace
                                                   "remove(f!1(e!2),
                                                                                                                                            bag_to_set(u_filter(make_bag(add(e!2, S!1), f!1),
                                                                                                                                                                t!1))) = bag_to_set(u_filter(make_bag(S!1, f!1), t!1))")
                                                  (("1"
                                                    (lemma
                                                     "sum_particular2[T,real,0,+]")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (replace

                                                           -1
                                                           :hide?

                                                           t)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (case
                                                               "u_filter(make_bag(add(e!2, S!1), f!1), t!1)(f!1(e!2)) = 1")
                                                              (("1"
                                                                (replace

                                                                 -
                                                                 :hide?

                                                                 t)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case-replace
                                                                     "(LAMBDA (t_1: T):
                                                                                                                        IF t_1 = f!1(e!2) THEN 0
                                                                                                                        ELSE u_filter(make_bag(add(e!2, S!1), f!1), t!1)(t_1)
                                                                                                                        ENDIF) = LAMBDA (t: T): u_filter(make_bag(S!1, f!1), t!1)(t)")
                                                                    (("1"
                                                                      (hide
                                                                       4)
                                                                      (("1"
                                                                        (decompose-equality
                                                                         +)
                                                                        (("1"
                                                                          (lift-if)
                                                                          (("1"
                                                                            (split)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (expand
                                                                                 "bag_to_set")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (hide
                                                                                 -1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "bag_to_set")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "u_filter")
                                                                                    (("2"
                                                                                      (lift-if)
                                                                                      (("2"
                                                                                        (split)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "make_bag")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "add")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "member")
                                                                                                (("1"
                                                                                                  (case-replace
                                                                                                   "{s: below(S) | (e!2 = s OR S!1(s)) AND f!1(s) = x!1} = {s: below(S) | S!1(s) AND f!1(s) = x!1}")
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     2)
                                                                                                    (("1"
                                                                                                      (decompose-equality
                                                                                                       +)
                                                                                                      (("1"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 -1
                                                                 4)
                                                                (("2"
                                                                  (expand
                                                                   "bag_to_set")
                                                                  (("2"
                                                                    (expand
                                                                     "u_filter")
                                                                    (("2"
                                                                      (expand
                                                                       "make_bag")
                                                                      (("2"
                                                                        (lemma
                                                                         "nonempty_card[below(S)]")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "{s: below(S) | S!1(s) AND f!1(s) = f!1(e!2)}")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "nonempty?")
                                                                              (("1"
                                                                                (expand
                                                                                 "empty?")
                                                                                (("1"
                                                                                  (expand
                                                                                   "member")
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "card_one[below(S)]")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "geq")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "{s: below(S) | add(e!2, S!1)(s) AND f!1(s) = f!1(e!2)}")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (inst?)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "singleton")
                                                                                                (("1"
                                                                                                  (decompose-equality
                                                                                                   +)
                                                                                                  (("1"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (use
                                                                                             "finite_add")
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (use
                                                                             "finite_intersect")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 4)
                                                    (("2"
                                                      (decompose-equality
                                                       +)
                                                      (("2"
                                                        (iff)
                                                        (("2"
                                                          (grind)
                                                          (("1"
                                                            (lemma
                                                             "nonempty_card[below(S)]")
                                                            (("1"
                                                              (inst-cp
                                                               -
                                                               "{s: below(S) | (e!2 = s OR S!1(s)) AND f!1(s) = x!1}")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (skosimp*)
                                                                  (("1"
                                                                    (split)
                                                                    (("1"
                                                                      (replace*)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (inst
                                                                       -
                                                                       "{s: below(S) | S!1(s) AND f!1(s) = x!1}")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (split)
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("2"
                                                                          (use
                                                                           "finite_intersect")
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "LAMBDA (s: below(S)): f!1(s) = x!1"
                                                                             "S!1")
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (use
                                                                   "finite_add")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "LAMBDA (s: below(S)): f!1(s) = x!1"
                                                                     "S!1"
                                                                     "e!2")
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (lemma
                                                             "nonempty_card[below(S)]")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "{s: below(S) | S!1(s) AND f!1(s) = x!1}")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (skosimp*)
                                                                  (("1"
                                                                    (lemma
                                                                     "nonempty_card[below(S)]")
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "{s: below(S) | (e!2 = s OR S!1(s)) AND f!1(s) = x!1}")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (prop)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("2"
                                                                          (use
                                                                           "finite_add")
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "LAMBDA (s: below(S)): f!1(s) = x!1"
                                                                             "S!1"
                                                                             "e!2")
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (use
                                                                 "finite_intersect")
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 4)
                                                (("2"
                                                  (grind)
                                                  (("2"
                                                    (lemma
                                                     "nonempty_card[below(S)]")
                                                    (("2"
                                                      (inst
                                                       -
                                                       "{s: below(S) | (e!2 = s OR S!1(s)) AND f!1(s) = f!1(e!2)}")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst?)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (use
                                                           "finite_add")
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide -2 3)
                                    (("2"
                                      (expand "filter")
                                      (("2"
                                        (expand "add")
                                        (("2"
                                          (expand "member")
                                          (("2"
                                            (expand "geq")
                                            (("2"
                                              (case-replace
                                               "(LAMBDA (j: below(S)): (e!2 = j OR S!1(j)) AND leq(f!1(choose({s: (e!1) | f!1(s) = t!1})), f!1(j))) = add(e!2, LAMBDA (j: below(S)): S!1(j) AND leq(f!1(choose({s: (e!1) | f!1(s) = t!1})), f!1(j)))")
                                              (("1"
                                                (lemma
                                                 "card_add[below(S)]")
                                                (("1"
                                                  (inst
                                                   -
                                                   "LAMBDA (j: below(S)): S!1(j) AND leq(f!1(choose({s: (e!1) | f!1(s) = t!1})), f!1(j))"
                                                   "e!2")
                                                  (("1"
                                                    (replace -)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (use
                                                     "finite_intersect")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (decompose-equality
                                                   +)
                                                  (("2"
                                                    (grind)
                                                    (("2"
                                                      (use
                                                       "epsilon_ax[below(S)]")
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (use
                                                           "epsilon_ax[(e!1)]")
                                                          (("1"
                                                            (split)
                                                            (("1"
                                                              (replace*)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (inst
                                                               +
                                                               "x!2")
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (inst
                                                             +
                                                             "x!2")
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (inst?)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (inst + "0")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (case-replace
                                   "filter(geq)(add(e!2, S!1))(f!1)(choose({s: (e!1) | f!1(s) = t!1})) = filter(geq)(S!1)(f!1)(choose({s: (e!1) | f!1(s) = t!1}))")
                                  (("1"
                                    (replace -2 :dir rl :hide? t)
                                    (("1"
                                      (case-replace
                                       "bag_to_set(u_filter(make_bag(add(e!2, S!1), f!1), t!1)) = bag_to_set(u_filter(make_bag(S!1, f!1), t!1))")
                                      (("1"
                                        (lemma
                                         "sum_particular2[T,real,0,+]")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (inst - "f!1(e!2)")
                                            (("1"
                                              (replace -1 :hide? t)
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (case-replace
                                                       "u_filter(make_bag(add(e!2, S!1), f!1), t!1)(f!1(e!2)) = 0")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide
                                                           -2
                                                           -3
                                                           -4)
                                                          (("1"
                                                            (case-replace
                                                             "(LAMBDA (t_1: T):
                                                                                                IF t_1 = f!1(e!2) THEN 0
                                                                                                ELSE u_filter(make_bag(add(e!2, S!1), f!1), t!1)(t_1)
                                                                                                ENDIF) = LAMBDA (t: T): u_filter(make_bag(S!1, f!1), t!1)(t)")
                                                            (("1"
                                                              (hide 2)
                                                              (("1"
                                                                (decompose-equality
                                                                 +)
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (split)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (expand
                                                                         "u_filter")
                                                                        (("2"
                                                                          (lift-if)
                                                                          (("2"
                                                                            (split)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (expand
                                                                                 "make_bag")
                                                                                (("1"
                                                                                  (case-replace
                                                                                   "{s: below(S) | add(e!2, S!1)(s) AND f!1(s) = x!1} = {s: below(S) | S!1(s) AND f!1(s) = x!1}")
                                                                                  (("1"
                                                                                    (hide
                                                                                     2)
                                                                                    (("1"
                                                                                      (decompose-equality
                                                                                       +)
                                                                                      (("1"
                                                                                        (iff)
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide
                                                         -1
                                                         -2
                                                         -3
                                                         2)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (case-replace
                                                         "(LAMBDA (t_1: T):
                                                                                    IF t_1 = f!1(e!2) THEN 0
                                                                                    ELSE u_filter(make_bag(add(e!2, S!1), f!1), t!1)(t_1)
                                                                                    ENDIF) = LAMBDA (t: T): u_filter(make_bag(S!1, f!1), t!1)(t)")
                                                        (("2"
                                                          (hide 3)
                                                          (("2"
                                                            (decompose-equality
                                                             +)
                                                            (("2"
                                                              (lift-if)
                                                              (("2"
                                                                (split)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (expand
                                                                     "bag_to_set")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (hide
                                                                     -1
                                                                     -2)
                                                                    (("2"
                                                                      (expand
                                                                       "bag_to_set")
                                                                      (("2"
                                                                        (expand
                                                                         "u_filter")
                                                                        (("2"
                                                                          (lift-if)
                                                                          (("2"
                                                                            (split)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (expand
                                                                                 "make_bag")
                                                                                (("1"
                                                                                  (expand
                                                                                   "add")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "member")
                                                                                    (("1"
                                                                                      (case-replace
                                                                                       "{s: below(S) | (e!2 = s OR S!1(s)) AND f!1(s) = x!1} = {s: below(S) | S!1(s) AND f!1(s) = x!1}")
                                                                                      (("1"
                                                                                        (hide
                                                                                         2)
                                                                                        (("1"
                                                                                          (decompose-equality
                                                                                           +)
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -1 4)
                                        (("2"
                                          (decompose-equality +)
                                          (("2"
                                            (grind)
                                            (("1"
                                              (case "x!1 = f!1(e!2)")
                                              (("1"
                                                (hide-all-but
                                                 (-1 -4 2))
                                                (("1"
                                                  (typepred! "leq")
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma
                                                 "nonempty_card[below(S)]")
                                                (("2"
                                                  (inst-cp
                                                   -
                                                   "{s: below(S) | (e!2 = s OR S!1(s)) AND f!1(s) = x!1}")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (skosimp*)
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (replace*)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (inst
                                                           -
                                                           "{s: below(S) | S!1(s) AND f!1(s) = x!1}")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (use
                                                               "finite_intersect")
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "LAMBDA (s: below(S)): f!1(s) = x!1"
                                                                 "S!1")
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (use
                                                       "finite_add")
                                                      (("2"
                                                        (inst
                                                         -
                                                         "LAMBDA (s: below(S)): f!1(s) = x!1"
                                                         "S!1"
                                                         "e!2")
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma
                                               "nonempty_card[below(S)]")
                                              (("2"
                                                (inst-cp
                                                 -
                                                 "{s: below(S) | S!1(s) AND f!1(s) = x!1}")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (skosimp*)
                                                    (("1"
                                                      (inst
                                                       -
                                                       "{s: below(S) | (e!2 = s OR S!1(s)) AND f!1(s) = x!1}")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (use
                                                           "finite_add")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "LAMBDA (s: below(S)): f!1(s) = x!1"
                                                             "S!1"
                                                             "e!2")
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (use
                                                     "finite_intersect")
                                                    (("2"
                                                      (inst
                                                       -
                                                       "LAMBDA (s: below(S)): f!1(s) = x!1"
                                                       "S!1")
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide -1 4)
                                    (("2"
                                      (decompose-equality +)
                                      (("2"
                                        (grind)
                                        (("2"
                                          (use "epsilon_ax[below(S)]")
                                          (("1"
                                            (split)
                                            (("1"
                                              (use "epsilon_ax[(e!1)]")
                                              (("1"
                                                (split)
                                                (("1"
                                                  (replace*)
                                                  nil
                                                  nil)
                                                 ("2" (inst?) nil nil))
                                                nil)
                                               ("2"
                                                (inst + "x!2")
                                                nil
                                                nil))
                                              nil)
                                             ("2" (inst?) nil nil))
                                            nil)
                                           ("2" (inst + "0") nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((finite_set_ind_modified formula-decl nil finite_sets_inductions
     "finite_sets/")
    (emptyset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (empty_card formula-decl nil finite_sets nil)
    (FALSE const-decl "bool" booleans nil)
    (finite_empty formula-decl nil make_bag nil)
    (dichotomous? const-decl "bool" orders nil)
    (partial_order? const-decl "bool" orders nil)
    (antisymmetric? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (reflexive? const-decl "bool" relations nil)
    (x!1 skolem-const-decl "T" mid_val_equiv nil)
    (add const-decl "(nonempty?)" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (card_one formula-decl nil finite_sets nil)
    (/= const-decl "boolean" notequal nil)
    (x!1 skolem-const-decl "T" mid_val_equiv nil)
    (e!2 skolem-const-decl "below(S)" mid_val_equiv nil)
    (S!1 skolem-const-decl "finite_set[below(S)]" mid_val_equiv nil)
    (f!1 skolem-const-decl "[below(S) -> T]" mid_val_equiv nil)
    (t!1 skolem-const-decl "T" mid_val_equiv nil)
    (remove const-decl "set" sets nil)
    (sum_f_g formula-decl nil finite_sets_sum "finite_sets/")
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (injective? const-decl "bool" functions nil)
    (x!1 skolem-const-decl "T" mid_val_equiv nil)
    (finite_intersect formula-decl nil make_bag nil)
    (finite_add formula-decl nil make_bag nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (sum_particular2 formula-decl nil aux nil)
    (sum_x formula-decl nil finite_sets_sum "finite_sets/")
    (card_add formula-decl nil finite_sets nil)
    (e!1 skolem-const-decl "non_empty_finite_set[below(S)]"
     mid_val_equiv nil)
    (TRUE const-decl "bool" booleans nil)
    (epsilon_ax formula-decl nil epsilons nil)
    (bag_to_set const-decl "set[T]" bags_to_sets "structures/")
    (sum def-decl "R" finite_sets_sum "finite_sets/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (geq const-decl "bool" index_select nil)
    (filter const-decl "bool" index_filters nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (make_bag const-decl "finite_bag[T]" make_bag nil)
    (u_filter const-decl "bag" bag_filters "structures/")
    (leq formal-const-decl "(total_order?[T])" mid_val_equiv nil)
    (total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (card const-decl "nat" finite_bags "structures/")
    (finite_bag type-eq-decl nil finite_bags "structures/")
    (is_finite const-decl "bool" finite_bags "structures/")
    (bag type-eq-decl nil bags "structures/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (card_make_bag formula-decl nil make_bag nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (S formal-const-decl "posnat" mid_val_equiv nil)
    (below type-eq-decl nil naturalnumbers nil)
    (T formal-nonempty-type-decl nil mid_val_equiv nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (nonempty_choose formula-decl nil mid_val_equiv nil))
   14364 12640 t nil)
  (filter_u-1 nil 3287754220 3287757485
   ("" (skolem + ("f" "e" "t"))
    (("" (flatten)
      (("" (use "nonempty_choose")
        (("" (assert)
          (("" (use "card_make_bag")
            (("" (replace -1 :hide? t)
              ((""
                (case-replace
                 "card(l_filter(make_bag(e, f), t)) = card(filter(leq)(e)(f)(choose({s: (e) | f!1(s) = t})))")
                (("" (hide -2 -3 2)
                  (("" (expand "card")
                    (("" (lemma "finite_set_ind_modified[below(S)]")
                      ((""
                        (inst -
                         "LAMBDA (ee: finite_set[below(S)]): sum(bag_to_set(u_filter(make_bag(ee, f), f(s!1))),
                                          LAMBDA (t: T): u_filter(make_bag(ee, f), f(s!1))(t))
                                       = card(filter(geq)(ee)(f)(s!1))")
                        (("" (split)
                          (("1" (inst?) nil)
                           ("2" (hide 3)
                            (("2" (expand "filter")
                              (("2"
                                (lemma "card_empty?[below(S)]")
                                (("2"
                                  (inst?)
                                  (("1"
                                    (case
                                     "empty?[below(S)]
                                                                                                                                                                         (LAMBDA (j: below(S)): emptyset(j) AND geq(f(j), f(s!1)))")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -2 :hide? t)
                                        (("1"
                                          (expand "bag_to_set")
                                          (("1"
                                            (expand "make_bag")
                                            (("1"
                                              (expand "u_filter")
                                              (("1"
                                                (case
                                                 "{t: T |
                                                                                                                                                                                                       IF leq(f(s!1), t)
                                                                                                                                                                                                         THEN card({s: below(S) | emptyset(s) AND f(s) = t})
                                                                                                                                                                                                       ELSE 0
                                                                                                                                                                                                       ENDIF
                                                                                                                                                                                                        > 0} = emptyset[T]")
                                                (("1"
                                                  (replace -1 :hide? t)
                                                  (("1"
                                                    (use
                                                     "sum_emptyset[T,real,0,+]")
                                                    (("1"
                                                      (skosimp*)
                                                      (("1"
                                                        (use
                                                         "finite_empty")
                                                        nil)))))))
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (decompose-equality
                                                     +)
                                                    (("1"
                                                      (grind)
                                                      (("1"
                                                        (use
                                                         "card_emptyset[below(S)]")
                                                        (("1"
                                                          (expand
                                                           "emptyset")
                                                          (("1"
                                                            (assert)
                                                            nil)))))))
                                                     ("2"
                                                      (skosimp*)
                                                      (("2"
                                                        (use
                                                         "finite_empty")
                                                        nil)))))))
                                                 ("3"
                                                  (skosimp*)
                                                  (("3"
                                                    (use
                                                     "finite_empty")
                                                    nil)))))))))))))))
                                     ("2"
                                      (hide 2 -1)
                                      (("2" (grind) nil)))))
                                   ("2"
                                    (use "finite_empty")
                                    nil)))))))))
                           ("3" (skosimp*)
                            (("3" (hide 4)
                              (("3"
                                (case "geq(f(e!1), f(s!1))")
                                (("1"
                                  (case-replace
                                   "card(filter(geq)(add(e!1, S!1))(f)(s!1)) = card(filter(geq)(S!1)(f)(s!1)) + 1")
                                  (("1"
                                    (replace -3 :dir rl :hide? t)
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (case
                                         "bag_to_set(u_filter(make_bag(S!1, f), f(s!1)))(f(e!1))")
                                        (("1"
                                          (case
                                           "u_filter(make_bag(add(e!1, S!1), f), f(s!1))(f(e!1)) = u_filter(make_bag(S!1, f), f(s!1))(f(e!1)) + 1")
                                          (("1"
                                            (lemma "sum_x[T,real,0,+]")
                                            (("1"
                                              (inst-cp
                                               -
                                               "bag_to_set(u_filter(make_bag(add(e!1, S!1), f), f(s!1)))"
                                               "LAMBDA (t: T): u_filter(make_bag(add(e!1, S!1), f), f(s!1))(t)"
                                               "f(e!1)")
                                              (("1"
                                                (inst
                                                 -
                                                 "bag_to_set(u_filter(make_bag(S!1, f), f(s!1)))"
                                                 "LAMBDA (t: T): u_filter(make_bag(S!1, f), f(s!1))(t)"
                                                 "f(e!1)")
                                                (("1"
                                                  (replace*)
                                                  (("1"
                                                    (hide -1 -2 -3)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lemma
                                                         "sum_particular2[T,real,0,+]")
                                                        (("1"
                                                          (inst
                                                           -
                                                           "remove(f(e!1),
                                                                                                                                                                                                                         bag_to_set(u_filter(make_bag(add(e!1, S!1), f), f(s!1))))"
                                                           "LAMBDA (t: T): u_filter(make_bag(add(e!1, S!1), f), f(s!1))(t)"
                                                           "f(e!1)")
                                                          (("1"
                                                            (replace

                                                             -
                                                             :hide?

                                                             t)
                                                            (("1"
                                                              (lift-if)
                                                              (("1"
                                                                (split)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (hide-all-but
                                                                     -1)
                                                                    (("1"
                                                                      (grind)
                                                                      nil)))))
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (hide
                                                                     1)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (name-replace
                                                                         "g"
                                                                         "LAMBDA (t: T): u_filter(make_bag(add(e!1, S!1), f), f(s!1))(t)")
                                                                        (("2"
                                                                          (case-replace
                                                                           "remove(f(e!1),
                                                                                                                                                                                                                                                     bag_to_set(u_filter(make_bag(add(e!1, S!1), f), f(s!1)))) = remove(f(e!1), bag_to_set(u_filter(make_bag(S!1, f), f(s!1))))")
                                                                          (("1"
                                                                            (hide
                                                                             -1)
                                                                            (("1"
                                                                              (use
                                                                               "sum_f_g[T,real,0,+]")
                                                                              (("1"
                                                                                (split)
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil)
                                                                                 ("2"
                                                                                  (skosimp*)
                                                                                  (("2"
                                                                                    (hide
                                                                                     2)
                                                                                    (("2"
                                                                                      (lift-if)
                                                                                      (("2"
                                                                                        (typepred!
                                                                                         "x!1")
                                                                                        (("2"
                                                                                          (split)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (grind)
                                                                                              nil)))
                                                                                           ("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (hide
                                                                                               -4
                                                                                               -5
                                                                                               4)
                                                                                              (("2"
                                                                                                (grind)
                                                                                                (("2"
                                                                                                  (case-replace
                                                                                                   "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1} = {s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                                  (("2"
                                                                                                    (hide
                                                                                                     3)
                                                                                                    (("2"
                                                                                                      (decompose-equality
                                                                                                       +)
                                                                                                      (("2"
                                                                                                        (grind)
                                                                                                        nil)))))))))))))))))))))))))))))
                                                                           ("2"
                                                                            (hide
                                                                             2)
                                                                            (("2"
                                                                              (decompose-equality
                                                                               +)
                                                                              (("2"
                                                                                (expand
                                                                                 "remove")
                                                                                (("2"
                                                                                  (iff)
                                                                                  (("2"
                                                                                    (prop)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "member")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "bag_to_set")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "u_filter")
                                                                                          (("1"
                                                                                            (lift-if)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "geq")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (prop)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "make_bag")
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "nonempty_card[below(S)]")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "{s: below(S) | S!1(s) AND f(s) = f(e!1)}")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "nonempty?")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "empty?")
                                                                                                              (("1"
                                                                                                                (skosimp*)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "member")
                                                                                                                  (("1"
                                                                                                                    (flatten)
                                                                                                                    (("1"
                                                                                                                      (lemma
                                                                                                                       "nonempty_card[below(S)]")
                                                                                                                      (("1"
                                                                                                                        (inst?)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "nonempty?")
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "empty?")
                                                                                                                              (("1"
                                                                                                                                (skosimp*)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "member")
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "add")
                                                                                                                                    (("1"
                                                                                                                                      (flatten)
                                                                                                                                      (("1"
                                                                                                                                        (split)
                                                                                                                                        (("1"
                                                                                                                                          (lemma
                                                                                                                                           "nonempty_card[below(S)]")
                                                                                                                                          (("1"
                                                                                                                                            (inst
                                                                                                                                             -
                                                                                                                                             "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (use
                                                                                                                                               "finite_intersect")
                                                                                                                                              nil)))))
                                                                                                                                         ("2"
                                                                                                                                          (expand
                                                                                                                                           "member")
                                                                                                                                          (("2"
                                                                                                                                            (lemma
                                                                                                                                             "nonempty_card[below(S)]")
                                                                                                                                            (("2"
                                                                                                                                              (inst
                                                                                                                                               -
                                                                                                                                               "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (grind)
                                                                                                                                                  nil)))
                                                                                                                                               ("2"
                                                                                                                                                (use
                                                                                                                                                 "finite_intersect")
                                                                                                                                                nil)))))))))))))))))))))))
                                                                                                                         ("2"
                                                                                                                          (use
                                                                                                                           "finite_add")
                                                                                                                          nil)))))))))))))))))
                                                                                                         ("2"
                                                                                                          (use
                                                                                                           "finite_intersect")
                                                                                                          nil)))))))))))))))))))))
                                                                                     ("2"
                                                                                      (grind)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "nonempty_card[below(S)]")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -
                                                                                           "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (skosimp*)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "nonempty_card[below(S)]")
                                                                                                (("1"
                                                                                                  (inst?)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (inst?)
                                                                                                      (("1"
                                                                                                        (prop)
                                                                                                        nil)))))
                                                                                                   ("2"
                                                                                                    (hide-all-but
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (use
                                                                                                       "finite_add")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "LAMBDA (s: below(S)): f(s) = x!1"
                                                                                                         "S!1"
                                                                                                         "e!1")
                                                                                                        (("2"
                                                                                                          (grind)
                                                                                                          nil)))))))))))))))
                                                                                           ("2"
                                                                                            (hide-all-but
                                                                                             1)
                                                                                            (("2"
                                                                                              (use
                                                                                               "finite_intersect")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -
                                                                                                 "LAMBDA (s: below(S)): f(s) = x!1"
                                                                                                 "S!1")
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  nil)))))))))))))))))))))))))))))))))))))))))))))))))))
                                               ("2"
                                                (hide -1 3)
                                                (("2"
                                                  (expand "bag_to_set")
                                                  (("2"
                                                    (expand "u_filter")
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (prop)
                                                        (("2"
                                                          (expand
                                                           "make_bag")
                                                          (("2"
                                                            (lemma
                                                             "nonempty_card[below(S)]")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "{s: below(S) | S!1(s) AND f(s) = f(e!1)}")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "nonempty?")
                                                                  (("1"
                                                                    (expand
                                                                     "empty?")
                                                                    (("1"
                                                                      (skosimp*)
                                                                      (("1"
                                                                        (expand
                                                                         "member")
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (lemma
                                                                             "nonempty_card[below(S)]")
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "{s: below(S) | add[below(S)](e!1, S!1)(s) AND f(s) = f(e!1)}")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "nonempty?")
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil)))))
                                                                               ("2"
                                                                                (use
                                                                                 "finite_add")
                                                                                nil)))))))))))))))))
                                                               ("2"
                                                                (use
                                                                 "finite_intersect")
                                                                nil)))))))))))))))))))))
                                           ("2"
                                            (hide 3)
                                            (("2"
                                              (expand "u_filter")
                                              (("2"
                                                (lift-if)
                                                (("2"
                                                  (split)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (expand
                                                       "make_bag")
                                                      (("1"
                                                        (case-replace
                                                         "{s: below(S) | add(e!1, S!1)(s) AND f(s) = f(e!1)} = add(e!1, {s: below(S) | S!1(s) AND f(s) = f(e!1)})")
                                                        (("1"
                                                          (lemma
                                                           "card_add[below(S)]")
                                                          (("1"
                                                            (inst
                                                             -
                                                             "{s: below(S) | S!1(s) AND f(s) = f(e!1)}"
                                                             "e!1")
                                                            (("1"
                                                              (replace

                                                               -1)
                                                              (("1"
                                                                (assert)
                                                                nil)))
                                                             ("2"
                                                              (use
                                                               "finite_intersect")
                                                              nil)))))
                                                         ("2"
                                                          (hide -2 2)
                                                          (("2"
                                                            (decompose-equality
                                                             +)
                                                            (("2"
                                                              (grind)
                                                              nil)))))))))))
                                                   ("2"
                                                    (expand "geq")
                                                    (("2"
                                                      (flatten)
                                                      nil)))))))))))))
                                         ("2"
                                          (lemma "sum_x[T,real,0,+]")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (inst - "f(e!1)")
                                              (("1"
                                                (replace - :hide? t)
                                                (("1"
                                                  (case-replace
                                                   "remove(f(e!1),
                                                                                                                                                                                bag_to_set(u_filter(make_bag(add(e!1, S!1), f),
                                                                                                                                                                                                    f(s!1)))) = bag_to_set(u_filter(make_bag(S!1, f), f(s!1)))")
                                                  (("1"
                                                    (lemma
                                                     "sum_particular2[T,real,0,+]")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (replace

                                                           -1
                                                           :hide?

                                                           t)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (case
                                                               "u_filter(make_bag(add(e!1, S!1), f), f(s!1))(f(e!1)) = 1")
                                                              (("1"
                                                                (replace

                                                                 -
                                                                 :hide?

                                                                 t)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case-replace
                                                                     "(LAMBDA (t_1: T):
                                                                                                                                                                        IF t_1 = f(e!1) THEN 0
                                                                                                                                                                        ELSE u_filter(make_bag(add(e!1, S!1), f), f(s!1))(t_1)
                                                                                                                                                                        ENDIF) = LAMBDA (t: T): u_filter(make_bag(S!1, f), f(s!1))(t)")
                                                                    (("1"
                                                                      (hide
                                                                       4)
                                                                      (("1"
                                                                        (decompose-equality
                                                                         +)
                                                                        (("1"
                                                                          (lift-if)
                                                                          (("1"
                                                                            (split)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (expand
                                                                                 "bag_to_set")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil)))))
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (hide
                                                                                 -1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "bag_to_set")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "u_filter")
                                                                                    (("2"
                                                                                      (lift-if)
                                                                                      (("2"
                                                                                        (split)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "make_bag")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "add")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "member")
                                                                                                (("1"
                                                                                                  (case-replace
                                                                                                   "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1} = {s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     2)
                                                                                                    (("1"
                                                                                                      (decompose-equality
                                                                                                       +)
                                                                                                      (("1"
                                                                                                        (grind)
                                                                                                        nil)))))))))))))))
                                                                                         ("2"
                                                                                          (propax)
                                                                                          nil)))))))))))))))))))))))))))
                                                               ("2"
                                                                (hide
                                                                 -1
                                                                 4)
                                                                (("2"
                                                                  (expand
                                                                   "bag_to_set")
                                                                  (("2"
                                                                    (expand
                                                                     "u_filter")
                                                                    (("2"
                                                                      (expand
                                                                       "make_bag")
                                                                      (("2"
                                                                        (lemma
                                                                         "nonempty_card[below(S)]")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "{s: below(S) | S!1(s) AND f(s) = f(e!1)}")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "nonempty?")
                                                                              (("1"
                                                                                (expand
                                                                                 "empty?")
                                                                                (("1"
                                                                                  (expand
                                                                                   "member")
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "card_one[below(S)]")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "geq")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "{s: below(S) | add(e!1, S!1)(s) AND f(s) = f(e!1)}")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (inst?)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "singleton")
                                                                                                (("1"
                                                                                                  (decompose-equality
                                                                                                   +)
                                                                                                  (("1"
                                                                                                    (grind)
                                                                                                    nil)))))))))))
                                                                                         ("2"
                                                                                          (use
                                                                                           "finite_add")
                                                                                          nil)))))))))))))))
                                                                           ("2"
                                                                            (use
                                                                             "finite_intersect")
                                                                            nil)))))))))))))))))))))))))
                                                   ("2"
                                                    (hide 4)
                                                    (("2"
                                                      (decompose-equality
                                                       +)
                                                      (("2"
                                                        (iff)
                                                        (("2"
                                                          (grind)
                                                          (("1"
                                                            (lemma
                                                             "nonempty_card[below(S)]")
                                                            (("1"
                                                              (inst-cp
                                                               -
                                                               "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1}")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (skosimp*)
                                                                  (("1"
                                                                    (split)
                                                                    (("1"
                                                                      (replace*)
                                                                      nil)
                                                                     ("2"
                                                                      (inst
                                                                       -
                                                                       "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (split)
                                                                            (("1"
                                                                              (propax)
                                                                              nil)
                                                                             ("2"
                                                                              (propax)
                                                                              nil)))))))
                                                                       ("2"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("2"
                                                                          (use
                                                                           "finite_intersect")
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "LAMBDA (s: below(S)): f(s) = x!1"
                                                                             "S!1")
                                                                            (("2"
                                                                              (grind)
                                                                              nil)))))))))))))))
                                                               ("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (use
                                                                   "finite_add")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "LAMBDA (s: below(S)): f(s) = x!1"
                                                                     "S!1"
                                                                     "e!1")
                                                                    (("2"
                                                                      (grind)
                                                                      nil)))))))))))
                                                           ("2"
                                                            (lemma
                                                             "nonempty_card[below(S)]")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (skosimp*)
                                                                  (("1"
                                                                    (lemma
                                                                     "nonempty_card[below(S)]")
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1}")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (prop)
                                                                            nil)))))
                                                                       ("2"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("2"
                                                                          (use
                                                                           "finite_add")
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "LAMBDA (s: below(S)): f(s) = x!1"
                                                                             "S!1"
                                                                             "e!1")
                                                                            (("2"
                                                                              (grind)
                                                                              nil)))))))))))))))
                                                               ("2"
                                                                (use
                                                                 "finite_intersect")
                                                                (("2"
                                                                  (grind)
                                                                  nil)))))))))))))))))))
                                               ("2"
                                                (hide 4)
                                                (("2"
                                                  (grind)
                                                  (("2"
                                                    (lemma
                                                     "nonempty_card[below(S)]")
                                                    (("2"
                                                      (inst
                                                       -
                                                       "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = f(e!1)}")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst?)
                                                          nil)))
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (use
                                                           "finite_add")
                                                          (("2"
                                                            (grind)
                                                            nil)))))))))))))))))))))))))
                                   ("2"
                                    (hide -2 3)
                                    (("2"
                                      (expand "filter")
                                      (("2"
                                        (expand "add")
                                        (("2"
                                          (expand "member")
                                          (("2"
                                            (expand "geq")
                                            (("2"
                                              (case-replace
                                               "(LAMBDA (j: below(S)): (e!1 = j OR S!1(j)) AND leq(f(s!1), f(j))) = add(e!1, LAMBDA (j: below(S)): S!1(j) AND leq(f(s!1), f(j)))")
                                              (("1"
                                                (lemma
                                                 "card_add[below(S)]")
                                                (("1"
                                                  (inst
                                                   -
                                                   "LAMBDA (j: below(S)): S!1(j) AND leq(f(s!1), f(j))"
                                                   "e!1")
                                                  (("1"
                                                    (replace -)
                                                    (("1"
                                                      (assert)
                                                      nil)))
                                                   ("2"
                                                    (use
                                                     "finite_intersect")
                                                    nil)))))
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (decompose-equality
                                                   +)
                                                  (("2"
                                                    (grind)
                                                    nil)))))))))))))))))))
                                 ("2"
                                  (case-replace
                                   "filter(geq)(add(e!1, S!1))(f)(s!1) = filter(geq)(S!1)(f)(s!1)")
                                  (("1"
                                    (replace -2 :dir rl :hide? t)
                                    (("1"
                                      (case-replace
                                       "bag_to_set(u_filter(make_bag(add(e!1, S!1), f), f(s!1))) = bag_to_set(u_filter(make_bag(S!1, f), f(s!1)))")
                                      (("1"
                                        (lemma
                                         "sum_particular2[T,real,0,+]")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (inst - "f(e!1)")
                                            (("1"
                                              (replace -1 :hide? t)
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (case-replace
                                                       "u_filter(make_bag(add(e!1, S!1), f), f(s!1))(f(e!1)) = 0")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide
                                                           -2
                                                           -3
                                                           -4)
                                                          (("1"
                                                            (case-replace
                                                             "(LAMBDA (t_1: T):
                                                                                                                                          IF t_1 = f(e!1) THEN 0
                                                                                                                                          ELSE u_filter(make_bag(add(e!1, S!1), f), f(s!1))(t_1)
                                                                                                                                          ENDIF) = LAMBDA (t: T): u_filter(make_bag(S!1, f), f(s!1))(t)")
                                                            (("1"
                                                              (hide 2)
                                                              (("1"
                                                                (decompose-equality
                                                                 +)
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (split)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (grind)
                                                                        nil)))
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (expand
                                                                         "u_filter")
                                                                        (("2"
                                                                          (lift-if)
                                                                          (("2"
                                                                            (split)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (expand
                                                                                 "make_bag")
                                                                                (("1"
                                                                                  (case-replace
                                                                                   "{s: below(S) | add(e!1, S!1)(s) AND f(s) = x!1} = {s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                  (("1"
                                                                                    (hide
                                                                                     2)
                                                                                    (("1"
                                                                                      (decompose-equality
                                                                                       +)
                                                                                      (("1"
                                                                                        (iff)
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil)))))))))))))
                                                                             ("2"
                                                                              (propax)
                                                                              nil)))))))))))))))))))))))
                                                       ("2"
                                                        (hide
                                                         -1
                                                         -2
                                                         -3
                                                         2)
                                                        (("2"
                                                          (grind)
                                                          nil)))))))
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (case-replace
                                                         "(LAMBDA (t_1: T):
                                                                                                                        IF t_1 = f(e!1) THEN 0
                                                                                                                        ELSE u_filter(make_bag(add(e!1, S!1), f), f(s!1))(t_1)
                                                                                                                        ENDIF) = LAMBDA (t: T): u_filter(make_bag(S!1, f), f(s!1))(t)")
                                                        (("2"
                                                          (hide 3)
                                                          (("2"
                                                            (decompose-equality
                                                             +)
                                                            (("2"
                                                              (lift-if)
                                                              (("2"
                                                                (split)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (expand
                                                                     "bag_to_set")
                                                                    (("1"
                                                                      (assert)
                                                                      nil)))))
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (hide
                                                                     -1
                                                                     -2)
                                                                    (("2"
                                                                      (expand
                                                                       "bag_to_set")
                                                                      (("2"
                                                                        (expand
                                                                         "u_filter")
                                                                        (("2"
                                                                          (lift-if)
                                                                          (("2"
                                                                            (split)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (expand
                                                                                 "make_bag")
                                                                                (("1"
                                                                                  (expand
                                                                                   "add")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "member")
                                                                                    (("1"
                                                                                      (case-replace
                                                                                       "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1} = {s: below(S) | S!1(s) AND f(s) = x!1}")
                                                                                      (("1"
                                                                                        (hide
                                                                                         2)
                                                                                        (("1"
                                                                                          (decompose-equality
                                                                                           +)
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil)))))))))))))))
                                                                             ("2"
                                                                              (propax)
                                                                              nil)))))))))))))))))))))))))))))))))))))))
                                       ("2"
                                        (hide -1 4)
                                        (("2"
                                          (decompose-equality +)
                                          (("2"
                                            (grind)
                                            (("1"
                                              (case "x!1 = f(e!1)")
                                              (("1"
                                                (hide-all-but
                                                 (-1 -4 2))
                                                (("1"
                                                  (typepred! "leq")
                                                  (("1"
                                                    (grind)
                                                    nil)))))
                                               ("2"
                                                (lemma
                                                 "nonempty_card[below(S)]")
                                                (("2"
                                                  (inst-cp
                                                   -
                                                   "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1}")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (skosimp*)
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (replace*)
                                                          nil)
                                                         ("2"
                                                          (inst
                                                           -
                                                           "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (assert)
                                                                nil)))))
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (use
                                                               "finite_intersect")
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "LAMBDA (s: below(S)): f(s) = x!1"
                                                                 "S!1")
                                                                (("2"
                                                                  (grind)
                                                                  nil)))))))))))))))
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (use
                                                       "finite_add")
                                                      (("2"
                                                        (inst
                                                         -
                                                         "LAMBDA (s: below(S)): f(s) = x!1"
                                                         "S!1"
                                                         "e!1")
                                                        (("2"
                                                          (grind)
                                                          nil)))))))))))))
                                             ("2"
                                              (lemma
                                               "nonempty_card[below(S)]")
                                              (("2"
                                                (inst-cp
                                                 -
                                                 "{s: below(S) | S!1(s) AND f(s) = x!1}")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (skosimp*)
                                                    (("1"
                                                      (inst
                                                       -
                                                       "{s: below(S) | (e!1 = s OR S!1(s)) AND f(s) = x!1}")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            nil)))))
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (use
                                                           "finite_add")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "LAMBDA (s: below(S)): f(s) = x!1"
                                                             "S!1"
                                                             "e!1")
                                                            (("2"
                                                              (grind)
                                                              nil)))))))))))))
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (use
                                                     "finite_intersect")
                                                    (("2"
                                                      (inst
                                                       -
                                                       "LAMBDA (s: below(S)): f(s) = x!1"
                                                       "S!1")
                                                      (("2"
                                                        (grind)
                                                        nil)))))))))))))))))))))
                                   ("2"
                                    (hide -1 4)
                                    (("2"
                                      (decompose-equality +)
                                      (("2"
                                        (grind)
                                        nil))))))))))))))))))))))))))))))))))))
    nil)
   unfinished nil 298870 4410 t nil))
 (choose_eligible 0
  (choose_eligible-1 nil 3287484554 3292683195
   ("" (skosimp*)
    (("" (use "filter_l")
      (("" (use "filter_u") (("" (assert) nil nil)) nil)) nil))
    nil)
   proved
   ((filter_l formula-decl nil mid_val_equiv nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil mid_val_equiv nil)
    (below type-eq-decl nil naturalnumbers nil)
    (S formal-const-decl "posnat" mid_val_equiv nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (filter_u formula-decl nil mid_val_equiv nil))
   660 640 t shostak))
 (mid_val_exists 0
  (mid_val_exists-2 nil 3287920448 3292683196
   ("" (skolem + ("f" "e" "t"))
    (("" (flatten)
      (("" (expand "mid_val?")
        (("" (flatten)
          (("" (inst + "choose({ss: (e) | f(ss) = t})")
            (("1" (hide-all-but 1)
              (("1" (typepred! "choose({ss: (e) | f(ss) = t})")
                (("1" (assert) nil nil)
                 ("2" (reveal -1 -2)
                  (("2" (use "nonempty_choose")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (expand "middle_value")
              (("2" (split)
                (("1" (use "filter_l") (("1" (assert) nil nil)) nil)
                 ("2" (use "filter_u") (("2" (assert) nil nil)) nil))
                nil))
              nil)
             ("3" (use "filter_l")
              (("3" (assert)
                (("3" (use "nonempty_choose") (("3" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((filter_u formula-decl nil mid_val_equiv nil)
    (filter_l formula-decl nil mid_val_equiv nil)
    (nonempty_choose formula-decl nil mid_val_equiv nil)
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (leq formal-const-decl "(total_order?[T])" mid_val_equiv nil)
    (middle_value const-decl "bool" middle_value_index nil)
    (choose const-decl "(p)" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (S formal-const-decl "posnat" mid_val_equiv nil)
    (below type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (e skolem-const-decl "non_empty_finite_set[below(S)]" mid_val_equiv
     nil)
    (nonempty? const-decl "bool" sets nil)
    (T formal-nonempty-type-decl nil mid_val_equiv nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (f skolem-const-decl "[below(S) -> T]" mid_val_equiv nil)
    (t skolem-const-decl "T" mid_val_equiv nil)
    (mid_val? const-decl "bool" middle_value_select "structures/"))
   1527 1390 t nil)
  (mid_val_exists-1 nil 3287312077 3287920437
   ("" (skolem + ("f" "e" "t"))
    (("" (flatten)
      (("" (expand "middle_value?")
        (("" (flatten)
          (("" (inst + "choose({ss: (e) | f(ss) = t})")
            (("1" (hide-all-but 1)
              (("1" (typepred! "choose({ss: (e) | f(ss) = t})")
                (("1" (assert) nil nil)
                 ("2" (reveal -1 -2)
                  (("2" (use "nonempty_choose")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (expand "middle_value")
              (("2" (split)
                (("1" (use "filter_l") (("1" (assert) nil nil)) nil)
                 ("2" (use "filter_u") (("2" (assert) nil nil)) nil))
                nil))
              nil)
             ("3" (use "filter_l")
              (("3" (assert)
                (("3" (use "nonempty_choose")
                  (("3" (assert)
                    (("3" (expand "nonempty?")
                      (("3" (expand "empty?")
                        (("3" (skosimp*)
                          (("3" (inst?)
                            (("1" (expand "member")
                              (("1"
                                (expand "extend")
                                (("1"
                                  (split)
                                  (("1" (flatten) nil nil)
                                   ("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "member")
                              (("2"
                                (expand "extend")
                                (("2"
                                  (split)
                                  (("1" (flatten) nil nil)
                                   ("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((filter_u formula-decl nil mid_val_equiv nil)
    (filter_l formula-decl nil mid_val_equiv nil)
    (nonempty_choose formula-decl nil mid_val_equiv nil)
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (leq formal-const-decl "(total_order?[T])" mid_val_equiv nil)
    (middle_value const-decl "bool" middle_value_index nil)
    (choose const-decl "(p)" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (S formal-const-decl "posnat" mid_val_equiv nil)
    (below type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (nonempty? const-decl "bool" sets nil)
    (T formal-nonempty-type-decl nil mid_val_equiv nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   12758 750 t shostak))
 (restrict_actual 0
  (restrict_actual-1 nil 3287236173 3292683197
   ("" (skolem + ("f" "e"))
    (("" (expand "image")
      (("" (decompose-equality +)
        (("" (iff)
          (("" (prop)
            (("1" (use "exists_mid_val") (("1" (assert) nil nil)) nil)
             ("2" (use "mid_val_exists") (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((image const-decl "set[R]" function_image nil)
    (mid_val_exists formula-decl nil mid_val_equiv nil)
    (exists_mid_val formula-decl nil mid_val_equiv nil)
    (T formal-nonempty-type-decl nil mid_val_equiv nil)
    (boolean nonempty-type-decl nil booleans nil)
    (make_bag const-decl "finite_bag[T]" make_bag nil)
    (mid_val? const-decl "bool" middle_value_select "structures/")
    (finite_bag type-eq-decl nil finite_bags "structures/")
    (is_finite const-decl "bool" finite_bags "structures/")
    (bag type-eq-decl nil bags "structures/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (middle_value const-decl "bool" middle_value_index nil)
    (leq formal-const-decl "(total_order?[T])" mid_val_equiv nil)
    (total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (S formal-const-decl "posnat" mid_val_equiv nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil))
   130 110 t shostak))
 (mid_val_is_middle_value 0
  (mid_val_is_middle_value-2 nil 3287920660 3292683198
   ("" (skolem + ("f" "e"))
    (("" (expand "mid_val")
      (("" (expand "middle_value")
        (("" (use "restrict_actual")
          (("" (use "mid_val_singleton")
            (("" (split)
              (("1" (expand "middle_index")
                (("1" (expand "image")
                  (("1"
                    (case "member(f(choose({i: below(S) | middle_value(e)(f)(i)})), mid_val?(make_bag(e, f)))")
                    (("1" (expand "member")
                      (("1" (expand "singleton?")
                        (("1" (skosimp*)
                          (("1"
                            (inst-cp -
                             "f(choose({i: below(S) | middle_value(e)(f)(i)}))")
                            (("1"
                              (inst -
                               "epsilon(mid_val?(make_bag(e, f)))")
                              (("1" (replace*) nil nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (use "epsilon_ax[T]")
                                  (("2"
                                    (split)
                                    (("1" (propax) nil nil)
                                     ("2"
                                      (inst
                                       +
                                       "(f(choose({i: below(S) | middle_value(e)(f)(i)})))")
                                      (("2"
                                        (hide 2)
                                        (("2"
                                          (hide -1 -2 -3)
                                          (("2"
                                            (use "middle_value_exists")
                                            (("2"
                                              (expand "nonempty?")
                                              (("2"
                                                (expand "empty?")
                                                (("2"
                                                  (skosimp*)
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (expand "member")
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide -1 -2 2)
                              (("2"
                                (use "middle_value_exists")
                                (("2"
                                  (expand "nonempty?")
                                  (("2"
                                    (expand "empty?")
                                    (("2"
                                      (skosimp*)
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (expand "member")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (expand "member")
                        (("2" (use "exists_mid_val")
                          (("1" (split)
                            (("1" (propax) nil nil)
                             ("2" (inst?)
                              (("2"
                                (hide -1 -2 2)
                                (("2"
                                  (use "middle_value_exists")
                                  (("2"
                                    (expand "nonempty?")
                                    (("2"
                                      (skosimp*)
                                      (("2"
                                        (expand "empty?")
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (expand "member")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -1 -2 2)
                            (("2" (use "middle_value_exists")
                              (("2"
                                (expand "nonempty?")
                                (("2"
                                  (expand "empty?")
                                  (("2"
                                    (skosimp*)
                                    (("2"
                                      (inst?)
                                      (("2"
                                        (expand "member")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (hide -1 -2 2)
                      (("3" (use "middle_value_exists")
                        (("3" (expand "nonempty?")
                          (("3" (expand "empty?")
                            (("3" (skosimp*)
                              (("3"
                                (inst?)
                                (("3"
                                  (expand "member")
                                  (("3" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -2 1)
                (("2" (typepred! "e")
                  (("2" (expand "make_bag")
                    (("2" (expand "empty?")
                      (("2" (skosimp*)
                        (("2" (expand "member")
                          (("2" (inst - "f(x!1)")
                            (("2" (lemma "nonempty_card[below(S)]")
                              (("2"
                                (inst
                                 -
                                 "{s: below(S) | e(s) AND f(s) = f(x!1)}")
                                (("1"
                                  (assert)
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (use "finite_intersect")
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((mid_val const-decl "T" middle_value_select "structures/")
    (restrict_actual formula-decl nil mid_val_equiv nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil mid_val_equiv nil)
    (below type-eq-decl nil naturalnumbers nil)
    (S formal-const-decl "posnat" mid_val_equiv nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (image const-decl "set[R]" function_image nil)
    (exists_mid_val formula-decl nil mid_val_equiv nil)
    (epsilon const-decl "T" epsilons nil)
    (epsilon_ax formula-decl nil epsilons nil)
    (middle_value_exists formula-decl nil middle_value_index nil)
    (f skolem-const-decl "[below(S) -> T]" mid_val_equiv nil)
    (e skolem-const-decl "non_empty_finite_set[below(S)]" mid_val_equiv
     nil)
    (singleton? const-decl "bool" sets nil)
    (mid_val? const-decl "bool" middle_value_select "structures/")
    (middle_value const-decl "bool" middle_value_index nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (middle_index const-decl "below(N)" middle_value_index nil)
    (empty? const-decl "bool" bags "structures/")
    (nonempty_card formula-decl nil finite_sets nil)
    (finite_intersect formula-decl nil make_bag nil)
    (injective? const-decl "bool" functions nil)
    (x!1 skolem-const-decl "below(S)" mid_val_equiv nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (make_bag const-decl "finite_bag[T]" make_bag nil)
    (finite_bag type-eq-decl nil finite_bags "structures/")
    (is_finite const-decl "bool" finite_bags "structures/")
    (bag type-eq-decl nil bags "structures/")
    (mid_val_singleton formula-decl nil middle_value_select
     "structures/")
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (leq formal-const-decl "(total_order?[T])" mid_val_equiv nil)
    (middle_value const-decl "T" middle_value_index nil))
   1201 1030 t nil)
  (mid_val_is_middle_value-1 nil 3287146976 3287920510
   ("" (skolem + ("f" "e"))
    (("" (expand "middle_value")
      (("" (use "restrict_actual")
        (("" (use "mid_val_singleton")
          (("" (split)
            (("1" (expand "middle_index")
              (("1" (expand "image")
                (("1"
                  (case "member(f(choose({i: below(S) | middle_value(e)(f)(i)})), middle_value?(make_bag(e, f)))")
                  (("1" (expand "member")
                    (("1" (expand "singleton?")
                      (("1" (skosimp*)
                        (("1"
                          (inst-cp -
                           "f(choose({i: below(S) | middle_value(e)(f)(i)}))")
                          (("1"
                            (inst -
                             "epsilon(middle_value?(make_bag(e, f)))")
                            (("1" (replace*) nil nil)
                             ("2" (hide 2)
                              (("2"
                                (use "epsilon_ax[T]")
                                (("2"
                                  (split)
                                  (("1" (propax) nil nil)
                                   ("2"
                                    (inst
                                     +
                                     "(f(choose({i: below(S) | middle_value(e)(f)(i)})))")
                                    (("2"
                                      (hide 2)
                                      (("2"
                                        (hide -1 -2 -3)
                                        (("2"
                                          (use "middle_value_exists")
                                          (("2"
                                            (expand "nonempty?")
                                            (("2"
                                              (expand "empty?")
                                              (("2"
                                                (skosimp*)
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (expand "member")
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -1 -2 2)
                            (("2" (use "middle_value_exists")
                              (("2"
                                (expand "nonempty?")
                                (("2"
                                  (expand "empty?")
                                  (("2"
                                    (skosimp*)
                                    (("2"
                                      (inst?)
                                      (("2"
                                        (expand "member")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (expand "member")
                      (("2" (use "exists_mid_val")
                        (("1" (split)
                          (("1" (propax) nil nil)
                           ("2" (inst?)
                            (("2" (hide -1 -2 2)
                              (("2"
                                (use "middle_value_exists")
                                (("2"
                                  (expand "nonempty?")
                                  (("2"
                                    (skosimp*)
                                    (("2"
                                      (expand "empty?")
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (expand "member")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide -1 -2 2)
                          (("2" (use "middle_value_exists")
                            (("2" (expand "nonempty?")
                              (("2"
                                (expand "empty?")
                                (("2"
                                  (skosimp*)
                                  (("2"
                                    (inst?)
                                    (("2"
                                      (expand "member")
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (hide -1 -2 2)
                    (("3" (use "middle_value_exists")
                      (("3" (expand "nonempty?")
                        (("3" (expand "empty?")
                          (("3" (skosimp*)
                            (("3" (inst?)
                              (("3"
                                (expand "member")
                                (("3" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -2 1)
              (("2" (typepred! "e")
                (("2" (expand "make_bag")
                  (("2" (expand "empty?")
                    (("2" (skosimp*)
                      (("2" (expand "member")
                        (("2" (inst - "f(x!1)")
                          (("2" (lemma "nonempty_card[below(S)]")
                            (("2"
                              (inst -
                               "{s: below(S) | e(s) AND f(s) = f(x!1)}")
                              (("1"
                                (assert)
                                (("1" (grind) nil nil))
                                nil)
                               ("2" (use "finite_intersect") nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((middle_value const-decl "T" middle_value_index nil)
    (leq formal-const-decl "(total_order?[T])" mid_val_equiv nil)
    (total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (bag type-eq-decl nil bags "structures/")
    (is_finite const-decl "bool" finite_bags "structures/")
    (finite_bag type-eq-decl nil finite_bags "structures/")
    (make_bag const-decl "finite_bag[T]" make_bag nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (injective? const-decl "bool" functions nil)
    (finite_intersect formula-decl nil make_bag nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (empty? const-decl "bool" bags "structures/")
    (middle_index const-decl "below(N)" middle_value_index nil)
    (member const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (middle_value const-decl "bool" middle_value_index nil)
    (singleton? const-decl "bool" sets nil)
    (middle_value_exists formula-decl nil middle_value_index nil)
    (epsilon_ax formula-decl nil epsilons nil)
    (epsilon const-decl "T" epsilons nil)
    (exists_mid_val formula-decl nil mid_val_equiv nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (S formal-const-decl "posnat" mid_val_equiv nil)
    (below type-eq-decl nil naturalnumbers nil)
    (T formal-nonempty-type-decl nil mid_val_equiv nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (restrict_actual formula-decl nil mid_val_equiv nil))
   43893 1240 t shostak)))


$$$index_filters.pvs
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% NASA Langley Formal Methods
% http://shemesh.larc.nasa.gov/fm/spider/fm-now-spider.html
%
% PVS 3.1
%
% Design       : SPIDER Version 2
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

index_filters[N: posnat, T: TYPE]: THEORY

  BEGIN
  
  IMPORTING 
    finite_sets@finite_sets_below[N]

  good, select: var finite_set[below(N)] 

  f: var [below(N) -> T]

  i, j: var below(N)

  rel: VAR [T,T -> bool]

  filter(rel)(select)(f)(i)(j): bool = select(j) AND rel(f(j),f(i))

  filter_finite: JUDGEMENT
    filter(rel)(select)(f)(i) HAS_TYPE finite_set[below(N)]

  subset_filter: LEMMA 
    subset?(filter(rel)(select)(f)(i),select)

  filter_remove: LEMMA
     filter(rel)(remove(j,select))(f)(i) = remove(j,filter(rel)(select)(f)(i))

  END index_filters

$$$index_filters.prf
(index_filters
 (filter_finite 0
  (filter_finite-1 nil 3265035253 nil
   ("" (skosimp*) (("" (rewrite "finite_below") nil nil)) nil)
   proved-complete
   ((finite_below formula-decl nil finite_sets_below "finite_sets/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (filter const-decl "bool" index_filters nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (M formal-const-decl "posnat" index_filters nil))
   nil nil nil nil))
 (subset_filter 0
  (subset_filter-1 nil 3265035253 3265035274
   ("" (skosimp*)
    (("" (expand* "subset?" "filter" "member")
      (("" (skosimp*) nil nil)) nil))
    nil)
   proved
   ((filter const-decl "bool" index_filters nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil))
   355 90 nil nil))
 (filter_remove 0
  (filter_remove-1 nil 3265035285 3265035343
   ("" (auto-rewrite-defs)
    (("" (skosimp*) (("" (apply-extensionality :hide? t) nil nil))
      nil))
    nil)
   proved
   ((below type-eq-decl nil naturalnumbers nil)
    (M formal-const-decl "posnat" index_filters nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (member const-decl "bool" sets nil)
    (remove const-decl "set" sets nil)
    (filter const-decl "bool" index_filters nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil))
   30005 1390 t shostak)))


$$$index_select.pvs
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% NASA Langley Formal Methods
% http://shemesh.larc.nasa.gov/fm/spider/fm-now-spider.html
%
% PVS 3.1
%
% Design       : SPIDER Version 2
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


index_select[N: posnat, T: TYPE, leq: (total_order?[T])]: THEORY

  BEGIN

  IMPORTING 
    index_filters[N, T],
    pigeonhole[below(N)]

  t1, t2: VAR T

  geq(t1,t2): bool = leq(t2, t1)

  good, eligible: var finite_set[below(N)] % subsets of indices

  f, f1, f2 : var [below(N) -> T]

  i, j, k, l : var below(N)

  n: var subrange(1,N)

  index_value(eligible, k ,f)(i): bool = 
    eligible(i) AND
    card(filter(leq)(eligible)(f)(i)) >  k AND
    card(filter(geq)(eligible)(f)(i)) >= card(eligible) - k

  index_min: LEMMA
      index_value(eligible, 0, f)(i) AND 
      eligible(j) 
    IMPLIES
      leq(f(i), f(j))

  index_max: LEMMA
      eligible(j) AND
      index_value(eligible, card(eligible) - 1, f)(i) 
    IMPLIES
      leq(f(j), f(i))

  least_index_exists: LEMMA
      card(eligible) = n 
    IMPLIES
      EXISTS i: 
        index_value(eligible, 0, f)(i)

  index_exists_induct: LEMMA
      card(eligible) = n AND
      k < card(eligible) 
    IMPLIES
      EXISTS i : 
        index_value(eligible, k, f)(i)

  index_exists: LEMMA
      k < card(eligible) 
    IMPLIES
      EXISTS i: 
        index_value(eligible, k, f)(i)

  index_order: LEMMA
      k < l AND
      index_value(eligible, k, f)(i) AND
      index_value(eligible, l, f)(j) 
    IMPLIES
      leq(f(i), f(j))

  index_value_overlap: LEMMA
      index_value(eligible, k, f1)(i) AND
      index_value(eligible, k, f2)(l) 
    IMPLIES
       EXISTS j: eligible(j) AND leq(f1(j), f1(i)) AND leq(f2(l), f2(j))

  END index_select

$$$index_select.prf
(index_select
 (index_min_TCC1 0
  (index_min_TCC1-1 nil 3264854173 3276349873
   ("" (subtype-tcc) nil nil) proved nil 88 90 nil shostak))
 (index_min 0
  (index_min-4 nil 3276341041 3276349873
   ("" (skosimp*)
    (("" (expand "index_value")
      (("" (flatten)
        (("" (hide -2)
          (("" (use "subset_filter")
            (("" (forward-chain "card_subset")
              (("" (use "same_card_subset[below(N)]")
                (("" (assert)
                  (("" (replace -1 :dir rl)
                    (("" (hide-all-but (-6 1))
                      (("" (expand "filter")
                        (("" (expand "geq") (("" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((index_value const-decl "bool" index_select nil)
    (card_subset formula-decl nil finite_sets nil)
    (filter const-decl "bool" index_filters nil)
    (same_card_subset formula-decl nil finite_sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (geq const-decl "bool" index_select nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (T formal-type-decl nil index_select nil)
    (N formal-const-decl "posnat" index_select nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (subset_filter formula-decl nil index_filters nil))
   425 330 t nil)
  (index_min-3 nil 3275837333 3276339186
   ("" (skosimp*)
    (("" (expand "index_value")
      (("" (flatten)
        (("" (hide -2)
          (("" (use "subset_filter")
            (("" (forward-chain "card_subset")
              (("" (use "same_card_subset[below(M)]")
                (("" (assert)
                  (("" (replace -1 :dir rl)
                    (("" (hide-all-but (-6 1))
                      (("" (expand "filter")
                        (("" (expand "geq") (("" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((subset_filter formula-decl nil index_filters nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (T formal-type-decl nil index_select nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (geq const-decl "bool" index_select nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (same_card_subset formula-decl nil finite_sets nil)
    (filter const-decl "bool" index_filters nil)
    (card_subset formula-decl nil finite_sets nil)
    (index_value const-decl "bool" index_select nil))
   140 100 t nil)
  (index_min-2 nil 3264930592 3275837307
   ("" (skosimp*)
    (("" (expand "index_value")
      (("" (flatten)
        (("" (hide -2)
          (("" (use "subset_filter")
            (("" (forward-chain "card_subset")
              (("" (use "same_card_subset[below(M)]")
                (("" (assert)
                  (("" (replace -1 :dir rl)
                    (("" (hide-all-but (-6 1))
                      (("" (expand "filter")
                        (("" (expand ">=") (("" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((index_value const-decl "bool" index_select nil)
    (card_subset formula-decl nil finite_sets nil)
    (filter const-decl "bool" index_filters nil)
    (same_card_subset formula-decl nil finite_sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (T formal-type-decl nil index_select nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (subset_filter formula-decl nil index_filters nil))
   195 170 t nil)
  (index_min-1 nil 3264930563 3264930570 ("" (postpone) nil nil)
   unfinished nil 6645 410 t shostak))
 (index_max_TCC1 0
  (index_max_TCC1-1 nil 3264854173 3276352560
   ("" (skosimp*)
    (("" (use "card_below")
      (("" (assert)
        (("" (use "nonempty_card[below(N)]")
          (("" (assert)
            (("" (expand "nonempty?")
              (("" (expand "empty?")
                (("" (expand "member") (("" (inst?) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((card_below formula-decl nil finite_sets_below "finite_sets/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" index_select nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (nonempty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil))
   23653 4610 t shostak))
 (index_max 0
  (index_max-2 nil 3276341063 3276349874
   ("" (skosimp*)
    (("" (expand "index_value")
      (("" (flatten)
        (("" (hide -4)
          (("" (use "subset_filter")
            (("" (forward-chain "card_subset")
              (("" (use "same_card_subset[below(N)]")
                (("" (assert)
                  (("" (replace -1 :dir rl)
                    (("" (rewrite "filter") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((index_value const-decl "bool" index_select nil)
    (card_subset formula-decl nil finite_sets nil)
    (filter const-decl "bool" index_filters nil)
    (same_card_subset formula-decl nil finite_sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (leq formal-const-decl "(total_order?[T])" index_select nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (T formal-type-decl nil index_select nil)
    (N formal-const-decl "posnat" index_select nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (subset_filter formula-decl nil index_filters nil))
   490 390 t nil)
  (index_max-1 nil 3264852248 3276339187
   ("" (skosimp*)
    (("" (expand "index_value")
      (("" (flatten)
        (("" (hide -4)
          (("" (use "subset_filter")
            (("" (forward-chain "card_subset")
              (("" (use "same_card_subset[below(M)]")
                (("" (assert)
                  (("" (replace -1 :dir rl)
                    (("" (rewrite "filter") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((index_value const-decl "bool" index_select nil)
    (card_subset formula-decl nil finite_sets nil)
    (filter const-decl "bool" index_filters nil)
    (same_card_subset formula-decl nil finite_sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (leq formal-const-decl "(total_order?[T])" index_select nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (T formal-type-decl nil index_select nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (subset_filter formula-decl nil index_filters nil))
   182 130 t shostak))
 (least_index_exists 0
  (least_index_exists-6 nil 3276345315 3276349878
   ("" (induct "n")
    (("1" (skosimp*)
      (("1" (rewrite "card_one")
        (("1" (skosimp*)
          (("1" (replace -1)
            (("1" (expand "index_value")
              (("1" (inst + "x!1")
                (("1" (rewrite "singleton")
                  (("1" (prop)
                    (("1" (use "nonempty_card[below(N)]")
                      (("1" (assert)
                        (("1" (expand "nonempty?")
                          (("1" (expand "empty?")
                            (("1" (expand "member")
                              (("1"
                                (expand "filter")
                                (("1"
                                  (inst?)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "singleton")
                                      (("1"
                                        (typepred! "leq")
                                        (("1"
                                          (expand "total_order?")
                                          (("1"
                                            (expand "partial_order?")
                                            (("1"
                                              (expand "preorder?")
                                              (("1"
                                                (expand "reflexive?")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (inst?)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (swap-rel 1)
                      (("2" (rewrite "card_subset")
                        (("2" (hide 2)
                          (("2" (expand "subset?")
                            (("2" (expand "member")
                              (("2"
                                (skosimp*)
                                (("2"
                                  (expand "filter")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "singleton")
                                      (("2"
                                        (expand "geq")
                                        (("2"
                                          (replace -1)
                                          (("2"
                                            (typepred! "leq")
                                            (("2"
                                              (expand "total_order?")
                                              (("2"
                                                (expand
                                                 "partial_order?")
                                                (("2"
                                                  (expand "preorder?")
                                                  (("2"
                                                    (expand
                                                     "reflexive?")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (inst?)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (use "nonempty_card[below(N)]")
        (("2" (assert)
          (("2" (expand "nonempty?")
            (("2" (expand "empty?")
              (("2" (expand "member")
                (("2" (skosimp*)
                  (("2" (inst - "remove(x!1,eligible!1)" "f!1")
                    (("2" (rewrite "card_remove")
                      (("2" (assert)
                        (("2" (skosimp*)
                          (("2" (case "leq(f!1(x!1), f!1(i!1))")
                            (("1" (inst + "x!1")
                              (("1"
                                (rewrite "index_value" +)
                                (("1"
                                  (prop)
                                  (("1"
                                    (use "nonempty_card[below(N)]")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "nonempty?")
                                        (("1"
                                          (expand "empty?")
                                          (("1"
                                            (expand "member")
                                            (("1"
                                              (inst - "x!1")
                                              (("1"
                                                (rewrite "filter")
                                                (("1"
                                                  (typepred! "leq")
                                                  (("1"
                                                    (expand
                                                     "total_order?")
                                                    (("1"
                                                      (expand
                                                       "partial_order?")
                                                      (("1"
                                                        (expand
                                                         "preorder?")
                                                        (("1"
                                                          (expand
                                                           "reflexive?")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (inst?)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (swap-rel +)
                                    (("2"
                                      (rewrite "card_subset")
                                      (("2"
                                        (expand "subset?")
                                        (("2"
                                          (skosimp*)
                                          (("2"
                                            (expand "member")
                                            (("2"
                                              (rewrite "filter")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (lemma "index_min")
                                                  (("2"
                                                    (inst
                                                     -
                                                     "remove(x!1,eligible!1)"
                                                     "f!1"
                                                     "i!1"
                                                     "x!2")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (rewrite
                                                         "remove")
                                                        (("2"
                                                          (expand
                                                           "member")
                                                          (("2"
                                                            (expand
                                                             "geq")
                                                            (("2"
                                                              (typepred!
                                                               "leq")
                                                              (("2"
                                                                (case
                                                                 "x!1 /= x!2")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "total_order?")
                                                                    (("1"
                                                                      (expand
                                                                       "partial_order?")
                                                                      (("1"
                                                                        (expand
                                                                         "preorder?")
                                                                        (("1"
                                                                          (expand
                                                                           "transitive?")
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (inst
                                                                               -2
                                                                               "f!1(x!1)"
                                                                               "f!1(i!1)"
                                                                               "f!1(x!2)")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (prop)
                                                                  (("1"
                                                                    (replace

                                                                     -2)
                                                                    (("1"
                                                                      (expand
                                                                       "total_order?")
                                                                      (("1"
                                                                        (expand
                                                                         "partial_order?")
                                                                        (("1"
                                                                          (expand
                                                                           "preorder?")
                                                                          (("1"
                                                                            (expand
                                                                             "reflexive?")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (inst?)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (replace

                                                                     -1)
                                                                    (("2"
                                                                      (expand
                                                                       "total_order?")
                                                                      (("2"
                                                                        (expand
                                                                         "partial_order?")
                                                                        (("2"
                                                                          (expand
                                                                           "preorder?")
                                                                          (("2"
                                                                            (expand
                                                                             "reflexive?")
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (inst?)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (inst + "i!1")
                              (("2"
                                (rewrite "index_value" +)
                                (("2"
                                  (prop)
                                  (("1"
                                    (rewrite "index_value")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (rewrite "remove")
                                        (("1"
                                          (expand "member")
                                          (("1" (flatten) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (use "nonempty_card[below(N)]")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "nonempty?")
                                        (("2"
                                          (expand "empty?")
                                          (("2"
                                            (expand "member")
                                            (("2"
                                              (inst - "i!1")
                                              (("2"
                                                (expand "filter")
                                                (("2"
                                                  (expand
                                                   "index_value")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (expand "remove")
                                                      (("2"
                                                        (expand
                                                         "member")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (split 1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (typepred!
                                                               "leq")
                                                              (("2"
                                                                (expand
                                                                 "total_order?")
                                                                (("2"
                                                                  (expand
                                                                   "partial_order?")
                                                                  (("2"
                                                                    (expand
                                                                     "preorder?")
                                                                    (("2"
                                                                      (expand
                                                                       "reflexive?")
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (inst?)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (swap-rel 1)
                                    (("3"
                                      (rewrite "card_subset")
                                      (("3"
                                        (expand "subset?")
                                        (("3"
                                          (expand "member")
                                          (("3"
                                            (skosimp*)
                                            (("3"
                                              (rewrite "filter")
                                              (("3"
                                                (expand "geq")
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (use "index_min")
                                                    (("3"
                                                      (assert)
                                                      (("3"
                                                        (rewrite
                                                         "remove")
                                                        (("3"
                                                          (rewrite
                                                           "member")
                                                          (("3"
                                                            (prop)
                                                            (("3"
                                                              (replace

                                                               -1)
                                                              (("3"
                                                                (typepred!
                                                                 "leq")
                                                                (("3"
                                                                  (expand
                                                                   "total_order?")
                                                                  (("3"
                                                                    (expand
                                                                     "dichotomous?")
                                                                    (("3"
                                                                      (flatten)
                                                                      (("3"
                                                                        (inst?)
                                                                        (("3"
                                                                          (split
                                                                           -2)
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skosimp*)
      (("3" (expand "index_value")
        (("3" (rewrite "filter") (("3" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   proved
   ((card_remove formula-decl nil finite_sets nil)
    (dichotomous? const-decl "bool" orders nil)
    (index_min formula-decl nil index_select nil)
    (transitive? const-decl "bool" relations nil)
    (/= const-decl "boolean" notequal nil)
    (remove const-decl "set" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (geq const-decl "bool" index_select nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (subset? const-decl "bool" sets nil)
    (card_subset formula-decl nil finite_sets nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (filter const-decl "bool" index_filters nil)
    (total_order? const-decl "bool" orders nil)
    (leq formal-const-decl "(total_order?[T])" index_select nil)
    (singleton? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (preorder? const-decl "bool" orders nil)
    (reflexive? const-decl "bool" relations nil)
    (partial_order? const-decl "bool" orders nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (card_one formula-decl nil finite_sets nil)
    (subrange_induction formula-decl nil subrange_inductions nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" index_select nil)
    (index_value const-decl "bool" index_select nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-type-decl nil index_select nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (subrange type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil))
   4184 3240 t nil)
  (least_index_exists-5 nil 3276341220 3276345265
   ("" (induct "n")
    (("1" (skosimp*)
      (("1" (rewrite "card_one")
        (("1" (skosimp*)
          (("1" (replace -1)
            (("1" (expand "index_value")
              (("1" (inst + "x!1")
                (("1" (rewrite "singleton")
                  (("1" (prop)
                    (("1" (use "nonempty_card[below(N)]")
                      (("1" (assert)
                        (("1" (expand "nonempty?")
                          (("1" (expand "empty?")
                            (("1" (expand "member")
                              (("1"
                                (expand "filter")
                                (("1"
                                  (inst?)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "singleton")
                                      (("1"
                                        (typepred! "leq")
                                        (("1"
                                          (expand "total_order?")
                                          (("1"
                                            (expand "partial_order?")
                                            (("1"
                                              (expand "preorder?")
                                              (("1"
                                                (expand "reflexive?")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (inst?)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (swap-rel 1)
                      (("2" (rewrite "card_subset")
                        (("2" (hide 2)
                          (("2" (expand "subset?")
                            (("2" (expand "member")
                              (("2"
                                (skosimp*)
                                (("2"
                                  (expand "filter")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "singleton")
                                      (("2"
                                        (expand "geq")
                                        (("2"
                                          (replace -1)
                                          (("2"
                                            (typepred! "leq")
                                            (("2"
                                              (expand "total_order?")
                                              (("2"
                                                (expand
                                                 "partial_order?")
                                                (("2"
                                                  (expand "preorder?")
                                                  (("2"
                                                    (expand
                                                     "reflexive?")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (inst?)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (use "nonempty_card[below(N)]")
        (("2" (assert)
          (("2" (expand "nonempty?")
            (("2" (expand "empty?")
              (("2" (expand "member")
                (("2" (skosimp*)
                  (("2" (inst - "remove(x!1,eligible!1)" "f!1")
                    (("2" (rewrite "card_remove")
                      (("2" (assert)
                        (("2" (skosimp*)
                          (("2" (case "leq(f!1(x!1), f!1(n1!1))")
                            (("1" (inst + "x!1")
                              (("1"
                                (rewrite "index_value" +)
                                (("1"
                                  (prop)
                                  (("1"
                                    (use "nonempty_card[below(N)]")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "nonempty?")
                                        (("1"
                                          (expand "empty?")
                                          (("1"
                                            (expand "member")
                                            (("1"
                                              (inst - "x!1")
                                              (("1"
                                                (rewrite "filter")
                                                (("1"
                                                  (typepred! "leq")
                                                  (("1"
                                                    (expand
                                                     "total_order?")
                                                    (("1"
                                                      (expand
                                                       "partial_order?")
                                                      (("1"
                                                        (expand
                                                         "preorder?")
                                                        (("1"
                                                          (expand
                                                           "reflexive?")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (inst?)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (swap-rel +)
                                    (("2"
                                      (rewrite "card_subset")
                                      (("2"
                                        (expand "subset?")
                                        (("2"
                                          (skosimp*)
                                          (("2"
                                            (expand "member")
                                            (("2"
                                              (rewrite "filter")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (lemma "index_min")
                                                  (("2"
                                                    (inst
                                                     -
                                                     "remove(x!1,eligible!1)"
                                                     "f!1"
                                                     "n1!1"
                                                     "x!2")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (rewrite
                                                         "remove")
                                                        (("2"
                                                          (expand
                                                           "member")
                                                          (("2"
                                                            (expand
                                                             "geq")
                                                            (("2"
                                                              (typepred!
                                                               "leq")
                                                              (("2"
                                                                (case
                                                                 "x!1 /= x!2")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "total_order?")
                                                                    (("1"
                                                                      (expand
                                                                       "partial_order?")
                                                                      (("1"
                                                                        (expand
                                                                         "preorder?")
                                                                        (("1"
                                                                          (expand
                                                                           "transitive?")
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (inst
                                                                               -2
                                                                               "f!1(x!1)"
                                                                               "f!1(n1!1)"
                                                                               "f!1(x!2)")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (prop)
                                                                  (("1"
                                                                    (replace

                                                                     -2)
                                                                    (("1"
                                                                      (expand
                                                                       "total_order?")
                                                                      (("1"
                                                                        (expand
                                                                         "partial_order?")
                                                                        (("1"
                                                                          (expand
                                                                           "preorder?")
                                                                          (("1"
                                                                            (expand
                                                                             "reflexive?")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (inst?)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (replace

                                                                     -1)
                                                                    (("2"
                                                                      (expand
                                                                       "total_order?")
                                                                      (("2"
                                                                        (expand
                                                                         "partial_order?")
                                                                        (("2"
                                                                          (expand
                                                                           "preorder?")
                                                                          (("2"
                                                                            (expand
                                                                             "reflexive?")
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (inst?)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (inst + "n1!1")
                              (("2"
                                (rewrite "index_value" +)
                                (("2"
                                  (prop)
                                  (("1"
                                    (rewrite "index_value")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (rewrite "remove")
                                        (("1"
                                          (expand "member")
                                          (("1" (flatten) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (use "nonempty_card[below(N)]")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "nonempty?")
                                        (("2"
                                          (expand "empty?")
                                          (("2"
                                            (expand "member")
                                            (("2"
                                              (inst - "n1!1")
                                              (("2"
                                                (expand "filter")
                                                (("2"
                                                  (expand
                                                   "index_value")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (expand "remove")
                                                      (("2"
                                                        (expand
                                                         "member")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (split 1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (typepred!
                                                               "leq")
                                                              (("2"
                                                                (expand
                                                                 "total_order?")
                                                                (("2"
                                                                  (expand
                                                                   "partial_order?")
                                                                  (("2"
                                                                    (expand
                                                                     "preorder?")
                                                                    (("2"
                                                                      (expand
                                                                       "reflexive?")
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (inst?)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (swap-rel 1)
                                    (("3"
                                      (rewrite "card_subset")
                                      (("3"
                                        (expand "subset?")
                                        (("3"
                                          (expand "member")
                                          (("3"
                                            (skosimp*)
                                            (("3"
                                              (rewrite "filter")
                                              (("3"
                                                (expand "geq")
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (use "index_min")
                                                    (("3"
                                                      (assert)
                                                      (("3"
                                                        (rewrite
                                                         "remove")
                                                        (("3"
                                                          (rewrite
                                                           "member")
                                                          (("3"
                                                            (prop)
                                                            (("3"
                                                              (replace

                                                               -1)
                                                              (("3"
                                                                (typepred!
                                                                 "leq")
                                                                (("3"
                                                                  (expand
                                                                   "total_order?")
                                                                  (("3"
                                                                    (expand
                                                                     "dichotomous?")
                                                                    (("3"
                                                                      (flatten)
                                                                      (("3"
                                                                        (inst?)
                                                                        (("3"
                                                                          (split
                                                                           -2)
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skosimp*)
      (("3" (expand "index_value")
        (("3" (rewrite "filter") (("3" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   unfinished
   ((AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (subrange type-eq-decl nil integers nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (T formal-type-decl nil index_select nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (index_value const-decl "bool" index_select nil)
    (N formal-const-decl "posnat" index_select nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (subrange_induction formula-decl nil subrange_inductions nil)
    (card_one formula-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (partial_order? const-decl "bool" orders nil)
    (reflexive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (member const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (singleton? const-decl "bool" sets nil)
    (leq formal-const-decl "(total_order?[T])" index_select nil)
    (total_order? const-decl "bool" orders nil)
    (filter const-decl "bool" index_filters nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (card_subset formula-decl nil finite_sets nil)
    (subset? const-decl "bool" sets nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (geq const-decl "bool" index_select nil)
    (singleton const-decl "(singleton?)" sets nil)
    (remove const-decl "set" sets nil)
    (/= const-decl "boolean" notequal nil)
    (transitive? const-decl "bool" relations nil)
    (index_min formula-decl nil index_select nil)
    (dichotomous? const-decl "bool" orders nil)
    (card_remove formula-decl nil finite_sets nil))
   4418 840 nil nil)
  (least_index_exists-4 nil 3276341161 3276341185
   ("" (induct "n")
    (("1" (skosimp*)
      (("1" (rewrite "card_one")
        (("1" (skosimp*)
          (("1" (replace -1)
            (("1" (expand "index_value")
              (("1" (inst + "x!1")
                (("1" (rewrite "singleton")
                  (("1" (prop)
                    (("1" (use "nonempty_card[below(N)]")
                      (("1" (assert)
                        (("1" (expand "nonempty?")
                          (("1" (expand "empty?")
                            (("1" (expand "member")
                              (("1"
                                (expand "filter")
                                (("1"
                                  (inst?)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "singleton")
                                      (("1"
                                        (typepred! "leq")
                                        (("1"
                                          (expand "total_order?")
                                          (("1"
                                            (expand "partial_order?")
                                            (("1"
                                              (expand "preorder?")
                                              (("1"
                                                (expand "reflexive?")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (inst?)
                                                    nil)))))))))))))))))))))))))))))))
                     ("2" (swap-rel 1)
                      (("2" (rewrite "card_subset")
                        (("2" (hide 2)
                          (("2" (expand "subset?")
                            (("2" (expand "member")
                              (("2"
                                (skosimp*)
                                (("2"
                                  (expand "filter")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "singleton")
                                      (("2"
                                        (expand "geq")
                                        (("2"
                                          (replace -1)
                                          (("2"
                                            (typepred! "leq")
                                            (("2"
                                              (expand "total_order?")
                                              (("2"
                                                (expand
                                                 "partial_order?")
                                                (("2"
                                                  (expand "preorder?")
                                                  (("2"
                                                    (expand
                                                     "reflexive?")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (inst?)
                                                        nil)))))))))))))))))))))))))))))))))))))))))))))))))))
     ("2" (skosimp*)
      (("2" (use "nonempty_card[below(N)]")
        (("2" (assert)
          (("2" (expand "nonempty?")
            (("2" (expand "empty?")
              (("2" (expand "member")
                (("2" (skosimp*)
                  (("2" (inst - "remove(x!1,eligible!1)" "f!1")
                    (("2" (rewrite "card_remove")
                      (("2" (assert)
                        (("2" (skosimp*)
                          (("2" (case "leq(f!1(x!1), f!1(n1!1))")
                            (("1" (inst + "x!1")
                              (("1"
                                (rewrite "index_value" +)
                                (("1"
                                  (prop)
                                  (("1"
                                    (use "nonempty_card[below(N)]")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "nonempty?")
                                        (("1"
                                          (expand "empty?")
                                          (("1"
                                            (expand "member")
                                            (("1"
                                              (inst - "x!1")
                                              (("1"
                                                (rewrite "filter")
                                                (("1"
                                                  (typepred! "leq")
                                                  (("1"
                                                    (expand
                                                     "total_order?")
                                                    (("1"
                                                      (expand
                                                       "partial_order?")
                                                      (("1"
                                                        (expand
                                                         "preorder?")
                                                        (("1"
                                                          (expand
                                                           "reflexive?")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (inst?)
                                                              nil)))))))))))))))))))))))))))
                                   ("2"
                                    (swap-rel +)
                                    (("2"
                                      (rewrite "card_subset")
                                      (("2"
                                        (expand "subset?")
                                        (("2"
                                          (skosimp*)
                                          (("2"
                                            (expand "member")
                                            (("2"
                                              (rewrite "filter")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (lemma "index_min")
                                                  (("2"
                                                    (inst
                                                     -
                                                     "remove(x!1,eligible!1)"
                                                     "f!1"
                                                     "n1!1"
                                                     "x!2")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (rewrite
                                                         "remove")
                                                        (("2"
                                                          (expand
                                                           "member")
                                                          (("2"
                                                            (expand
                                                             "geq")
                                                            (("2"
                                                              (typepred!
                                                               "leq")
                                                              (("2"
                                                                (case
                                                                 "x!1 /= x!2")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "total_order?")
                                                                    (("1"
                                                                      (expand
                                                                       "partial_order?")
                                                                      (("1"
                                                                        (expand
                                                                         "preorder?")
                                                                        (("1"
                                                                          (expand
                                                                           "transitive?")
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (inst
                                                                               -2
                                                                               "f!1(x!1)"
                                                                               "f!1(i!1)"
                                                                               "f!1(x!2)")
                                                                              (("1"
                                                                                (assert)
                                                                                nil)))))))))))))))
                                                                 ("2"
                                                                  (prop)
                                                                  (("1"
                                                                    (replace

                                                                     -2)
                                                                    (("1"
                                                                      (expand
                                                                       "total_order?")
                                                                      (("1"
                                                                        (expand
                                                                         "partial_order?")
                                                                        (("1"
                                                                          (expand
                                                                           "preorder?")
                                                                          (("1"
                                                                            (expand
                                                                             "reflexive?")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (inst?)
                                                                                nil)))))))))))))
                                                                   ("2"
                                                                    (replace

                                                                     -1)
                                                                    (("2"
                                                                      (expand
                                                                       "total_order?")
                                                                      (("2"
                                                                        (expand
                                                                         "partial_order?")
                                                                        (("2"
                                                                          (expand
                                                                           "preorder?")
                                                                          (("2"
                                                                            (expand
                                                                             "reflexive?")
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (inst?)
                                                                                nil)))))))))))))))))))))))))))))))))))))))))))))))))))
                             ("2" (inst + "n1!1")
                              (("2"
                                (rewrite "index_value" +)
                                (("2"
                                  (prop)
                                  (("1"
                                    (rewrite "index_value")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (rewrite "remove")
                                        (("1"
                                          (expand "member")
                                          (("1" (flatten) nil)))))))))
                                   ("2"
                                    (use "nonempty_card[below(N)]")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "nonempty?")
                                        (("2"
                                          (expand "empty?")
                                          (("2"
                                            (expand "member")
                                            (("2"
                                              (inst - "n1!1")
                                              (("2"
                                                (expand "filter")
                                                (("2"
                                                  (expand
                                                   "index_value")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (expand "remove")
                                                      (("2"
                                                        (expand
                                                         "member")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (split 1)
                                                            (("1"
                                                              (propax)
                                                              nil)
                                                             ("2"
                                                              (typepred!
                                                               "leq")
                                                              (("2"
                                                                (expand
                                                                 "total_order?")
                                                                (("2"
                                                                  (expand
                                                                   "partial_order?")
                                                                  (("2"
                                                                    (expand
                                                                     "preorder?")
                                                                    (("2"
                                                                      (expand
                                                                       "reflexive?")
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (inst?)
                                                                          nil)))))))))))))))))))))))))))))))))))))))
                                   ("3"
                                    (swap-rel 1)
                                    (("3"
                                      (rewrite "card_subset")
                                      (("3"
                                        (expand "subset?")
                                        (("3"
                                          (expand "member")
                                          (("3"
                                            (skosimp*)
                                            (("3"
                                              (rewrite "filter")
                                              (("3"
                                                (expand "geq")
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (use "index_min")
                                                    (("3"
                                                      (assert)
                                                      (("3"
                                                        (rewrite
                                                         "remove")
                                                        (("3"
                                                          (rewrite
                                                           "member")
                                                          (("3"
                                                            (prop)
                                                            (("3"
                                                              (replace

                                                               -1)
                                                              (("3"
                                                                (typepred!
                                                                 "leq")
                                                                (("3"
                                                                  (expand
                                                                   "total_order?")
                                                                  (("3"
                                                                    (expand
                                                                     "dichotomous?")
                                                                    (("3"
                                                                      (flatten)
                                                                      (("3"
                                                                        (inst?)
                                                                        (("3"
                                                                          (split
                                                                           -2)
                                                                          (("1"
                                                                            (propax)
                                                                            nil)
                                                                           ("2"
                                                                            (propax)
                                                                            nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
     ("3" (skosimp*)
      (("3" (expand "index_value")
        (("3" (rewrite "filter") (("3" (grind) nil))))))))
    nil)
   unfinished nil 20779 2690 t nil)
  (least_index_exists-3 nil 3276341130 3276341145
   ("" (induct "n")
    (("1" (skosimp*)
      (("1" (rewrite "card_one")
        (("1" (skosimp*)
          (("1" (replace -1)
            (("1" (expand "index_value")
              (("1" (inst + "x!1")
                (("1" (rewrite "singleton")
                  (("1" (prop)
                    (("1" (use "nonempty_card[below(N)]")
                      (("1" (assert)
                        (("1" (expand "nonempty?")
                          (("1" (expand "empty?")
                            (("1" (expand "member")
                              (("1"
                                (expand "filter")
                                (("1"
                                  (inst?)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "singleton")
                                      (("1"
                                        (typepred! "leq")
                                        (("1"
                                          (expand "total_order?")
                                          (("1"
                                            (expand "partial_order?")
                                            (("1"
                                              (expand "preorder?")
                                              (("1"
                                                (expand "reflexive?")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (inst?)
                                                    nil)))))))))))))))))))))))))))))))
                     ("2" (swap-rel 1)
                      (("2" (rewrite "card_subset")
                        (("2" (hide 2)
                          (("2" (expand "subset?")
                            (("2" (expand "member")
                              (("2"
                                (skosimp*)
                                (("2"
                                  (expand "filter")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "singleton")
                                      (("2"
                                        (expand "geq")
                                        (("2"
                                          (replace -1)
                                          (("2"
                                            (typepred! "leq")
                                            (("2"
                                              (expand "total_order?")
                                              (("2"
                                                (expand
                                                 "partial_order?")
                                                (("2"
                                                  (expand "preorder?")
                                                  (("2"
                                                    (expand
                                                     "reflexive?")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (inst?)
                                                        nil)))))))))))))))))))))))))))))))))))))))))))))))))))
     ("2" (skosimp*)
      (("2" (use "nonempty_card[below(M)]")
        (("2" (assert)
          (("2" (expand "nonempty?")
            (("2" (expand "empty?")
              (("2" (expand "member")
                (("2" (skosimp*)
                  (("2" (inst - "remove(x!1,eligible!1)" "f!1")
                    (("2" (rewrite "card_remove")
                      (("2" (assert)
                        (("2" (skosimp*)
                          (("2" (case "leq(f!1(x!1), f!1(n1!1))")
                            (("1" (inst + "x!1")
                              (("1"
                                (rewrite "index_value" +)
                                (("1"
                                  (prop)
                                  (("1"
                                    (use "nonempty_card[below(N)]")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "nonempty?")
                                        (("1"
                                          (expand "empty?")
                                          (("1"
                                            (expand "member")
                                            (("1"
                                              (inst - "x!1")
                                              (("1"
                                                (rewrite "filter")
                                                (("1"
                                                  (typepred! "leq")
                                                  (("1"
                                                    (expand
                                                     "total_order?")
                                                    (("1"
                                                      (expand
                                                       "partial_order?")
                                                      (("1"
                                                        (expand
                                                         "preorder?")
                                                        (("1"
                                                          (expand
                                                           "reflexive?")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (inst?)
                                                              nil)))))))))))))))))))))))))))
                                   ("2"
                                    (swap-rel +)
                                    (("2"
                                      (rewrite "card_subset")
                                      (("2"
                                        (expand "subset?")
                                        (("2"
                                          (skosimp*)
                                          (("2"
                                            (expand "member")
                                            (("2"
                                              (rewrite "filter")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (lemma "index_min")
                                                  (("2"
                                                    (inst
                                                     -
                                                     "remove(x!1,eligible!1)"
                                                     "f!1"
                                                     "n1!1"
                                                     "x!2")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (rewrite
                                                         "remove")
                                                        (("2"
                                                          (expand
                                                           "member")
                                                          (("2"
                                                            (expand
                                                             "geq")
                                                            (("2"
                                                              (typepred!
                                                               "leq")
                                                              (("2"
                                                                (case
                                                                 "x!1 /= x!2")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "total_order?")
                                                                    (("1"
                                                                      (expand
                                                                       "partial_order?")
                                                                      (("1"
                                                                        (expand
                                                                         "preorder?")
                                                                        (("1"
                                                                          (expand
                                                                           "transitive?")
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (inst
                                                                               -2
                                                                               "f!1(x!1)"
                                                                               "f!1(i!1)"
                                                                               "f!1(x!2)")
                                                                              (("1"
                                                                                (assert)
                                                                                nil)))))))))))))))
                                                                 ("2"
                                                                  (prop)
                                                                  (("1"
                                                                    (replace

                                                                     -2)
                                                                    (("1"
                                                                      (expand
                                                                       "total_order?")
                                                                      (("1"
                                                                        (expand
                                                                         "partial_order?")
                                                                        (("1"
                                                                          (expand
                                                                           "preorder?")
                                                                          (("1"
                                                                            (expand
                                                                             "reflexive?")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (inst?)
                                                                                nil)))))))))))))
                                                                   ("2"
                                                                    (replace

                                                                     -1)
                                                                    (("2"
                                                                      (expand
                                                                       "total_order?")
                                                                      (("2"
                                                                        (expand
                                                                         "partial_order?")
                                                                        (("2"
                                                                          (expand
                                                                           "preorder?")
                                                                          (("2"
                                                                            (expand
                                                                             "reflexive?")
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (inst?)
                                                                                nil)))))))))))))))))))))))))))))))))))))))))))))))))))
                             ("2" (inst + "n1!1")
                              (("2"
                                (rewrite "index_value" +)
                                (("2"
                                  (prop)
                                  (("1"
                                    (rewrite "index_value")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (rewrite "remove")
                                        (("1"
                                          (expand "member")
                                          (("1" (flatten) nil)))))))))
                                   ("2"
                                    (use "nonempty_card[below(N)]")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "nonempty?")
                                        (("2"
                                          (expand "empty?")
                                          (("2"
                                            (expand "member")
                                            (("2"
                                              (inst - "n1!1")
                                              (("2"
                                                (expand "filter")
                                                (("2"
                                                  (expand
                                                   "index_value")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (expand "remove")
                                                      (("2"
                                                        (expand
                                                         "member")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (split 1)
                                                            (("1"
                                                              (propax)
                                                              nil)
                                                             ("2"
                                                              (typepred!
                                                               "leq")
                                                              (("2"
                                                                (expand
                                                                 "total_order?")
                                                                (("2"
                                                                  (expand
                                                                   "partial_order?")
                                                                  (("2"
                                                                    (expand
                                                                     "preorder?")
                                                                    (("2"
                                                                      (expand
                                                                       "reflexive?")
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (inst?)
                                                                          nil)))))))))))))))))))))))))))))))))))))))
                                   ("3"
                                    (swap-rel 1)
                                    (("3"
                                      (rewrite "card_subset")
                                      (("3"
                                        (expand "subset?")
                                        (("3"
                                          (expand "member")
                                          (("3"
                                            (skosimp*)
                                            (("3"
                                              (rewrite "filter")
                                              (("3"
                                                (expand "geq")
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (use "index_min")
                                                    (("3"
                                                      (assert)
                                                      (("3"
                                                        (rewrite
                                                         "remove")
                                                        (("3"
                                                          (rewrite
                                                           "member")
                                                          (("3"
                                                            (prop)
                                                            (("3"
                                                              (replace

                                                               -1)
                                                              (("3"
                                                                (typepred!
                                                                 "leq")
                                                                (("3"
                                                                  (expand
                                                                   "total_order?")
                                                                  (("3"
                                                                    (expand
                                                                     "dichotomous?")
                                                                    (("3"
                                                                      (flatten)
                                                                      (("3"
                                                                        (inst?)
                                                                        (("3"
                                                                          (split
                                                                           -2)
                                                                          (("1"
                                                                            (propax)
                                                                            nil)
                                                                           ("2"
                                                                            (propax)
                                                                            nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
     ("3" (skosimp*)
      (("3" (expand "index_value")
        (("3" (rewrite "filter") (("3" (grind) nil))))))))
    nil)
   unfinished nil 14241 870 t nil)
  (least_index_exists-2 nil 3275837439 3276339187
   ("" (induct "n")
    (("1" (skosimp*)
      (("1" (rewrite "card_one")
        (("1" (skosimp*)
          (("1" (replace -1)
            (("1" (expand "index_value")
              (("1" (inst + "x!1")
                (("1" (rewrite "singleton")
                  (("1" (prop)
                    (("1" (use "nonempty_card[below(M)]")
                      (("1" (assert)
                        (("1" (expand "nonempty?")
                          (("1" (expand "empty?")
                            (("1" (expand "member")
                              (("1"
                                (expand "filter")
                                (("1"
                                  (inst?)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "singleton")
                                      (("1"
                                        (typepred! "leq")
                                        (("1"
                                          (expand "total_order?")
                                          (("1"
                                            (expand "partial_order?")
                                            (("1"
                                              (expand "preorder?")
                                              (("1"
                                                (expand "reflexive?")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (inst?)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (swap-rel 1)
                      (("2" (rewrite "card_subset")
                        (("2" (hide 2)
                          (("2" (expand "subset?")
                            (("2" (expand "member")
                              (("2"
                                (skosimp*)
                                (("2"
                                  (expand "filter")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "singleton")
                                      (("2"
                                        (expand "geq")
                                        (("2"
                                          (replace -1)
                                          (("2"
                                            (typepred! "leq")
                                            (("2"
                                              (expand "total_order?")
                                              (("2"
                                                (expand
                                                 "partial_order?")
                                                (("2"
                                                  (expand "preorder?")
                                                  (("2"
                                                    (expand
                                                     "reflexive?")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (inst?)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (use "nonempty_card[below(M)]")
        (("2" (assert)
          (("2" (expand "nonempty?")
            (("2" (expand "empty?")
              (("2" (expand "member")
                (("2" (skosimp*)
                  (("2" (inst - "remove(x!1,eligible!1)" "f!1")
                    (("2" (rewrite "card_remove")
                      (("2" (assert)
                        (("2" (skosimp*)
                          (("2" (case "leq(f!1(x!1), f!1(i!1))")
                            (("1" (inst + "x!1")
                              (("1"
                                (rewrite "index_value" +)
                                (("1"
                                  (prop)
                                  (("1"
                                    (use "nonempty_card[below(M)]")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "nonempty?")
                                        (("1"
                                          (expand "empty?")
                                          (("1"
                                            (expand "member")
                                            (("1"
                                              (inst - "x!1")
                                              (("1"
                                                (rewrite "filter")
                                                (("1"
                                                  (typepred! "leq")
                                                  (("1"
                                                    (expand
                                                     "total_order?")
                                                    (("1"
                                                      (expand
                                                       "partial_order?")
                                                      (("1"
                                                        (expand
                                                         "preorder?")
                                                        (("1"
                                                          (expand
                                                           "reflexive?")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (inst?)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (swap-rel +)
                                    (("2"
                                      (rewrite "card_subset")
                                      (("2"
                                        (expand "subset?")
                                        (("2"
                                          (skosimp*)
                                          (("2"
                                            (expand "member")
                                            (("2"
                                              (rewrite "filter")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (lemma "index_min")
                                                  (("2"
                                                    (inst
                                                     -
                                                     "remove(x!1,eligible!1)"
                                                     "f!1"
                                                     "i!1"
                                                     "x!2")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (rewrite
                                                         "remove")
                                                        (("2"
                                                          (expand
                                                           "member")
                                                          (("2"
                                                            (expand
                                                             "geq")
                                                            (("2"
                                                              (typepred!
                                                               "leq")
                                                              (("2"
                                                                (case
                                                                 "x!1 /= x!2")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "total_order?")
                                                                    (("1"
                                                                      (expand
                                                                       "partial_order?")
                                                                      (("1"
                                                                        (expand
                                                                         "preorder?")
                                                                        (("1"
                                                                          (expand
                                                                           "transitive?")
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (inst
                                                                               -2
                                                                               "f!1(x!1)"
                                                                               "f!1(i!1)"
                                                                               "f!1(x!2)")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (prop)
                                                                  (("1"
                                                                    (replace

                                                                     -2)
                                                                    (("1"
                                                                      (expand
                                                                       "total_order?")
                                                                      (("1"
                                                                        (expand
                                                                         "partial_order?")
                                                                        (("1"
                                                                          (expand
                                                                           "preorder?")
                                                                          (("1"
                                                                            (expand
                                                                             "reflexive?")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (inst?)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (replace

                                                                     -1)
                                                                    (("2"
                                                                      (expand
                                                                       "total_order?")
                                                                      (("2"
                                                                        (expand
                                                                         "partial_order?")
                                                                        (("2"
                                                                          (expand
                                                                           "preorder?")
                                                                          (("2"
                                                                            (expand
                                                                             "reflexive?")
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (inst?)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (inst + "i!1")
                              (("2"
                                (rewrite "index_value" +)
                                (("2"
                                  (prop)
                                  (("1"
                                    (rewrite "index_value")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (rewrite "remove")
                                        (("1"
                                          (expand "member")
                                          (("1" (flatten) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (use "nonempty_card[below(M)]")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "nonempty?")
                                        (("2"
                                          (expand "empty?")
                                          (("2"
                                            (expand "member")
                                            (("2"
                                              (inst - "i!1")
                                              (("2"
                                                (expand "filter")
                                                (("2"
                                                  (expand
                                                   "index_value")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (expand "remove")
                                                      (("2"
                                                        (expand
                                                         "member")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (split 1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (typepred!
                                                               "leq")
                                                              (("2"
                                                                (expand
                                                                 "total_order?")
                                                                (("2"
                                                                  (expand
                                                                   "partial_order?")
                                                                  (("2"
                                                                    (expand
                                                                     "preorder?")
                                                                    (("2"
                                                                      (expand
                                                                       "reflexive?")
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (inst?)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (swap-rel 1)
                                    (("3"
                                      (rewrite "card_subset")
                                      (("3"
                                        (expand "subset?")
                                        (("3"
                                          (expand "member")
                                          (("3"
                                            (skosimp*)
                                            (("3"
                                              (rewrite "filter")
                                              (("3"
                                                (expand "geq")
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (use "index_min")
                                                    (("3"
                                                      (assert)
                                                      (("3"
                                                        (rewrite
                                                         "remove")
                                                        (("3"
                                                          (rewrite
                                                           "member")
                                                          (("3"
                                                            (prop)
                                                            (("3"
                                                              (replace

                                                               -1)
                                                              (("3"
                                                                (typepred!
                                                                 "leq")
                                                                (("3"
                                                                  (expand
                                                                   "total_order?")
                                                                  (("3"
                                                                    (expand
                                                                     "dichotomous?")
                                                                    (("3"
                                                                      (flatten)
                                                                      (("3"
                                                                        (inst?)
                                                                        (("3"
                                                                          (split
                                                                           -2)
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skosimp*)
      (("3" (expand "index_value")
        (("3" (rewrite "filter") (("3" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   unfinished
   ((card_remove formula-decl nil finite_sets nil)
    (dichotomous? const-decl "bool" orders nil)
    (index_min formula-decl nil index_select nil)
    (transitive? const-decl "bool" relations nil)
    (/= const-decl "boolean" notequal nil)
    (remove const-decl "set" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (geq const-decl "bool" index_select nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (subset? const-decl "bool" sets nil)
    (card_subset formula-decl nil finite_sets nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (filter const-decl "bool" index_filters nil)
    (total_order? const-decl "bool" orders nil)
    (leq formal-const-decl "(total_order?[T])" index_select nil)
    (singleton? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (preorder? const-decl "bool" orders nil)
    (reflexive? const-decl "bool" relations nil)
    (partial_order? const-decl "bool" orders nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (card_one formula-decl nil finite_sets nil)
    (subrange_induction formula-decl nil subrange_inductions nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (index_value const-decl "bool" index_select nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-type-decl nil index_select nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (subrange type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil))
   266 200 t nil)
  (least_index_exists-1 nil 3264854096 3275837308
   ("" (induct "n")
    (("1" (skosimp*)
      (("1" (rewrite "card_one")
        (("1" (skosimp*)
          (("1" (replace -1)
            (("1" (expand "index_value")
              (("1" (inst + "x!1")
                (("1" (rewrite "singleton")
                  (("1" (prop)
                    (("1" (use "nonempty_card[below(M)]")
                      (("1" (assert)
                        (("1" (expand "nonempty?")
                          (("1" (expand "empty?")
                            (("1" (expand "member")
                              (("1"
                                (expand "filter")
                                (("1"
                                  (inst?)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "singleton")
                                      (("1"
                                        (typepred! "<=")
                                        (("1"
                                          (expand "total_order?")
                                          (("1"
                                            (expand "partial_order?")
                                            (("1"
                                              (expand "preorder?")
                                              (("1"
                                                (expand "reflexive?")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (inst?)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (swap-rel 1)
                      (("2" (rewrite "card_subset")
                        (("2" (hide 2)
                          (("2" (expand "subset?")
                            (("2" (expand "member")
                              (("2"
                                (skosimp*)
                                (("2"
                                  (expand "filter")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "singleton")
                                      (("2"
                                        (expand ">=")
                                        (("2"
                                          (replace -1)
                                          (("2"
                                            (typepred! "<=")
                                            (("2"
                                              (expand "total_order?")
                                              (("2"
                                                (expand
                                                 "partial_order?")
                                                (("2"
                                                  (expand "preorder?")
                                                  (("2"
                                                    (expand
                                                     "reflexive?")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (inst?)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (use "nonempty_card[below(M)]")
        (("2" (assert)
          (("2" (expand "nonempty?")
            (("2" (expand "empty?")
              (("2" (expand "member")
                (("2" (skosimp*)
                  (("2" (inst - "remove(x!1,eligible!1)" "f!1")
                    (("2" (rewrite "card_remove")
                      (("2" (assert)
                        (("2" (skosimp*)
                          (("2" (case "f!1(x!1) <= f!1(i!1)")
                            (("1" (inst + "x!1")
                              (("1"
                                (rewrite "index_value" +)
                                (("1"
                                  (prop)
                                  (("1"
                                    (use "nonempty_card[below(M)]")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "nonempty?")
                                        (("1"
                                          (expand "empty?")
                                          (("1"
                                            (expand "member")
                                            (("1"
                                              (inst - "x!1")
                                              (("1"
                                                (rewrite "filter")
                                                (("1"
                                                  (typepred! "<=")
                                                  (("1"
                                                    (expand
                                                     "total_order?")
                                                    (("1"
                                                      (expand
                                                       "partial_order?")
                                                      (("1"
                                                        (expand
                                                         "preorder?")
                                                        (("1"
                                                          (expand
                                                           "reflexive?")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (inst?)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (swap-rel +)
                                    (("2"
                                      (rewrite "card_subset")
                                      (("2"
                                        (expand "subset?")
                                        (("2"
                                          (skosimp*)
                                          (("2"
                                            (expand "member")
                                            (("2"
                                              (rewrite "filter")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (lemma "index_min")
                                                  (("2"
                                                    (inst
                                                     -
                                                     "remove(x!1,eligible!1)"
                                                     "f!1"
                                                     "i!1"
                                                     "x!2")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (rewrite
                                                         "remove")
                                                        (("2"
                                                          (expand
                                                           "member")
                                                          (("2"
                                                            (expand
                                                             ">=")
                                                            (("2"
                                                              (typepred!
                                                               "<=")
                                                              (("2"
                                                                (case
                                                                 "x!1 /= x!2")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "total_order?")
                                                                    (("1"
                                                                      (expand
                                                                       "partial_order?")
                                                                      (("1"
                                                                        (expand
                                                                         "preorder?")
                                                                        (("1"
                                                                          (expand
                                                                           "transitive?")
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (inst
                                                                               -2
                                                                               "f!1(x!1)"
                                                                               "f!1(i!1)"
                                                                               "f!1(x!2)")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (prop)
                                                                  (("1"
                                                                    (replace

                                                                     -2)
                                                                    (("1"
                                                                      (expand
                                                                       "total_order?")
                                                                      (("1"
                                                                        (expand
                                                                         "partial_order?")
                                                                        (("1"
                                                                          (expand
                                                                           "preorder?")
                                                                          (("1"
                                                                            (expand
                                                                             "reflexive?")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (inst?)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (replace

                                                                     -1)
                                                                    (("2"
                                                                      (expand
                                                                       "total_order?")
                                                                      (("2"
                                                                        (expand
                                                                         "partial_order?")
                                                                        (("2"
                                                                          (expand
                                                                           "preorder?")
                                                                          (("2"
                                                                            (expand
                                                                             "reflexive?")
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (inst?)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (inst + "i!1")
                              (("2"
                                (rewrite "index_value" +)
                                (("2"
                                  (prop)
                                  (("1"
                                    (rewrite "index_value")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (rewrite "remove")
                                        (("1"
                                          (expand "member")
                                          (("1" (flatten) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (use "nonempty_card[below(M)]")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "nonempty?")
                                        (("2"
                                          (expand "empty?")
                                          (("2"
                                            (expand "member")
                                            (("2"
                                              (inst - "i!1")
                                              (("2"
                                                (expand "filter")
                                                (("2"
                                                  (expand
                                                   "index_value")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (expand "remove")
                                                      (("2"
                                                        (expand
                                                         "member")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (split 1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (typepred!
                                                               "<=")
                                                              (("2"
                                                                (expand
                                                                 "total_order?")
                                                                (("2"
                                                                  (expand
                                                                   "partial_order?")
                                                                  (("2"
                                                                    (expand
                                                                     "preorder?")
                                                                    (("2"
                                                                      (expand
                                                                       "reflexive?")
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (inst?)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (swap-rel 1)
                                    (("3"
                                      (rewrite "card_subset")
                                      (("3"
                                        (expand "subset?")
                                        (("3"
                                          (expand "member")
                                          (("3"
                                            (skosimp*)
                                            (("3"
                                              (rewrite "filter")
                                              (("3"
                                                (assert)
                                                (("3"
                                                  (swap-rel 1)
                                                  (("1"
                                                    (use "index_min")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (rewrite
                                                         "remove")
                                                        (("1"
                                                          (rewrite
                                                           "member")
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (replace

                                                               -1)
                                                              (("1"
                                                                (typepred!
                                                                 "<=")
                                                                (("1"
                                                                  (expand
                                                                   "total_order?")
                                                                  (("1"
                                                                    (expand
                                                                     "dichotomous?")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (split
                                                                           -2)
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand ">=")
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skosimp*)
      (("3" (expand "index_value")
        (("3" (rewrite "filter") (("3" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   unfinished
   ((card_remove formula-decl nil finite_sets nil)
    (dichotomous? const-decl "bool" orders nil)
    (index_min formula-decl nil index_select nil)
    (transitive? const-decl "bool" relations nil)
    (/= const-decl "boolean" notequal nil)
    (remove const-decl "set" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (subset? const-decl "bool" sets nil)
    (card_subset formula-decl nil finite_sets nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (filter const-decl "bool" index_filters nil)
    (total_order? const-decl "bool" orders nil)
    (singleton? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (preorder? const-decl "bool" orders nil)
    (reflexive? const-decl "bool" relations nil)
    (partial_order? const-decl "bool" orders nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (card_one formula-decl nil finite_sets nil)
    (subrange_induction formula-decl nil subrange_inductions nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (index_value const-decl "bool" index_select nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-type-decl nil index_select nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (subrange type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil))
   376 320 t shostak))
 (index_exists_induct 0
  (index_exists_induct-6 nil 3276346167 3276349881
   ("" (induct "n")
    (("1" (skosimp*)
      (("1" (use "least_index_exists") (("1" (assert) nil nil)) nil))
      nil)
     ("2" (skosimp*)
      (("2" (use "least_index_exists")
        (("1" (assert)
          (("1" (skosimp*)
            (("1" (inst - "remove(i!1, eligible!1)" "f!1" "k!2-1")
              (("1" (rewrite "card_remove")
                (("1" (assert)
                  (("1" (lift-if)
                    (("1" (assert)
                      (("1" (prop)
                        (("1" (skosimp*)
                          (("1" (inst + "i!2")
                            (("1" (lemma "index_min")
                              (("1"
                                (inst?)
                                (("1"
                                  (inst - "i!2")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide -4)
                                      (("1"
                                        (expand "index_value")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (rewrite "remove")
                                            (("1"
                                              (expand "member")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (rewrite
                                                     "filter_remove")
                                                    (("1"
                                                      (rewrite
                                                       "card_remove")
                                                      (("1"
                                                        (rewrite
                                                         "filter")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (rewrite
                                                             "card_remove")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (hide
                                                                 -4)
                                                                (("1"
                                                                  (invoke
                                                                   (then
                                                                    (case
                                                                     "%1 <= %2")
                                                                    (assert))
                                                                   (!
                                                                    -4
                                                                    l)
                                                                   (!
                                                                    2
                                                                    l))
                                                                  (("1"
                                                                    (rewrite
                                                                     "card_subset")
                                                                    (("1"
                                                                      (expand
                                                                       "subset?")
                                                                      (("1"
                                                                        (expand
                                                                         "member")
                                                                        (("1"
                                                                          (skosimp*)
                                                                          (("1"
                                                                            (rewrite
                                                                             "filter")
                                                                            (("1"
                                                                              (rewrite
                                                                               "filter")
                                                                              (("1"
                                                                                (rewrite
                                                                                 "remove")
                                                                                (("1"
                                                                                  (expand
                                                                                   "member")
                                                                                  (("1"
                                                                                    (prop)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (rewrite "index_value")
                          (("2" (flatten) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert) nil nil))
        nil))
      nil)
     ("3" (assert) nil nil))
    nil)
   proved
   ((- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (remove const-decl "set" sets nil)
    (index_min formula-decl nil index_select nil)
    (member const-decl "bool" sets nil)
    (filter const-decl "bool" index_filters nil)
    (geq const-decl "bool" index_select nil)
    (subset? const-decl "bool" sets nil)
    (card_subset formula-decl nil finite_sets nil)
    (filter_remove formula-decl nil index_filters nil)
    (total_order? const-decl "bool" orders nil)
    (leq formal-const-decl "(total_order?[T])" index_select nil)
    (card_remove formula-decl nil finite_sets nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (k!1 skolem-const-decl "subrange(1, N)" index_select nil)
    (least_index_exists formula-decl nil index_select nil)
    (subrange_induction formula-decl nil subrange_inductions nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" index_select nil)
    (index_value const-decl "bool" index_select nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-type-decl nil index_select nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (subrange type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil))
   2776 2200 t nil)
  (index_exists_induct-5 nil 3276345378 3276346054
   ("" (induct "n")
    (("1" (skosimp*)
      (("1" (use "least_index_exists") (("1" (assert) nil)))))
     ("2" (skosimp*)
      (("2" (use "least_index_exists")
        (("1" (assert)
          (("1" (skosimp*)
            (("1" (inst - "remove(i!1, eligible!1)" "f!1" "k!1-1")
              (("1" (rewrite "card_remove")
                (("1" (assert)
                  (("1" (lift-if)
                    (("1" (assert)
                      (("1" (prop)
                        (("1" (skosimp*)
                          (("1" (inst + "i!2")
                            (("1" (lemma "index_min")
                              (("1"
                                (inst?)
                                (("1"
                                  (inst - "i!2")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide -4)
                                      (("1"
                                        (expand "index_value")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (rewrite "remove")
                                            (("1"
                                              (expand "member")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (rewrite
                                                     "filter_remove")
                                                    (("1"
                                                      (rewrite
                                                       "card_remove")
                                                      (("1"
                                                        (rewrite
                                                         "filter")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (rewrite
                                                             "card_remove")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (hide
                                                                 -4)
                                                                (("1"
                                                                  (invoke
                                                                   (then
                                                                    (case
                                                                     "%1 <= %2")
                                                                    (assert))
                                                                   (!
                                                                    -4
                                                                    l)
                                                                   (!
                                                                    2
                                                                    l))
                                                                  (("1"
                                                                    (rewrite
                                                                     "card_subset")
                                                                    (("1"
                                                                      (expand
                                                                       "subset?")
                                                                      (("1"
                                                                        (expand
                                                                         "member")
                                                                        (("1"
                                                                          (skosimp*)
                                                                          (("1"
                                                                            (rewrite
                                                                             "filter")
                                                                            (("1"
                                                                              (rewrite
                                                                               "filter")
                                                                              (("1"
                                                                                (rewrite
                                                                                 "remove")
                                                                                (("1"
                                                                                  (expand
                                                                                   "member")
                                                                                  (("1"
                                                                                    (prop)
                                                                                    nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                         ("2" (rewrite "index_value")
                          (("2" (flatten) nil)))))))))))))))))))
         ("2" (assert) nil)))))
     ("3" (assert) nil))
    nil)
   unfinished nil 638124 26090 t nil)
  (index_exists_induct-4 nil 3276339961 3276345266
   ("" (induct "n")
    (("1" (skosimp*)
      (("1" (use "least_index_exists") (("1" (assert) nil nil)) nil))
      nil)
     ("2" (skosimp*)
      (("2" (use "least_index_exists")
        (("1" (assert)
          (("1" (skosimp*)
            (("1" (inst - "remove(n1!1, eligible!1)" "f!1" "n3!1-1")
              (("1" (rewrite "card_remove")
                (("1" (assert)
                  (("1" (lift-if)
                    (("1" (assert)
                      (("1" (prop)
                        (("1" (skosimp*)
                          (("1" (inst + "n1!2")
                            (("1" (lemma "index_min")
                              (("1"
                                (inst?)
                                (("1"
                                  (inst - "n1!2")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide -4)
                                      (("1"
                                        (expand "index_value")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (rewrite "remove")
                                            (("1"
                                              (expand "member")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (rewrite
                                                     "filter_remove")
                                                    (("1"
                                                      (rewrite
                                                       "card_remove")
                                                      (("1"
                                                        (rewrite
                                                         "filter")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (rewrite
                                                             "card_remove")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (hide
                                                                 -4)
                                                                (("1"
                                                                  (invoke
                                                                   (then
                                                                    (case
                                                                     "%1 <= %2")
                                                                    (assert))
                                                                   (!
                                                                    -4
                                                                    l)
                                                                   (!
                                                                    2
                                                                    l))
                                                                  (("1"
                                                                    (rewrite
                                                                     "card_subset")
                                                                    (("1"
                                                                      (expand
                                                                       "subset?")
                                                                      (("1"
                                                                        (expand
                                                                         "member")
                                                                        (("1"
                                                                          (skosimp*)
                                                                          (("1"
                                                                            (rewrite
                                                                             "filter")
                                                                            (("1"
                                                                              (rewrite
                                                                               "filter")
                                                                              (("1"
                                                                                (rewrite
                                                                                 "remove")
                                                                                (("1"
                                                                                  (expand
                                                                                   "member")
                                                                                  (("1"
                                                                                    (prop)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (rewrite "index_value")
                          (("2" (flatten) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert) nil nil))
        nil))
      nil)
     ("3" (assert) nil nil))
    nil)
   unfinished
   ((- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (remove const-decl "set" sets nil)
    (index_min formula-decl nil index_select nil)
    (member const-decl "bool" sets nil)
    (filter const-decl "bool" index_filters nil)
    (geq const-decl "bool" index_select nil)
    (subset? const-decl "bool" sets nil)
    (card_subset formula-decl nil finite_sets nil)
    (filter_remove formula-decl nil index_filters nil)
    (total_order? const-decl "bool" orders nil)
    (leq formal-const-decl "(total_order?[T])" index_select nil)
    (card_remove formula-decl nil finite_sets nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (least_index_exists formula-decl nil index_select nil)
    (subrange_induction formula-decl nil subrange_inductions nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" index_select nil)
    (index_value const-decl "bool" index_select nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-type-decl nil index_select nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (subrange type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil))
   934 800 t nil)
  (index_exists_induct-3 nil 3276339416 3276339844
   ("" (induct "n")
    (("1" (skosimp*)
      (("1" (use "least_index_exists") (("1" (assert) nil)))))
     ("2" (skosimp*)
      (("2" (use "least_index_exists")
        (("1" (assert)
          (("1" (skosimp*)
            (("1" (inst - "remove(n1!1, eligible!1)" "f!1" "n2!2-1")
              (("1" (rewrite "card_remove")
                (("1" (assert)
                  (("1" (lift-if)
                    (("1" (assert)
                      (("1" (prop)
                        (("1" (skosimp*)
                          (("1" (inst + "n1!2")
                            (("1" (lemma "index_min")
                              (("1"
                                (inst?)
                                (("1"
                                  (inst - "n1!2")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide -4)
                                      (("1"
                                        (expand "index_value")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (rewrite "remove")
                                            (("1"
                                              (expand "member")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (rewrite
                                                     "filter_remove")
                                                    (("1"
                                                      (rewrite
                                                       "card_remove")
                                                      (("1"
                                                        (rewrite
                                                         "filter")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (rewrite
                                                             "card_remove")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (hide
                                                                 -4)
                                                                (("1"
                                                                  (invoke
                                                                   (then
                                                                    (case
                                                                     "%1 <= %2")
                                                                    (assert))
                                                                   (!
                                                                    -4
                                                                    l)
                                                                   (!
                                                                    2
                                                                    l))
                                                                  (("1"
                                                                    (rewrite
                                                                     "card_subset")
                                                                    (("1"
                                                                      (expand
                                                                       "subset?")
                                                                      (("1"
                                                                        (expand
                                                                         "member")
                                                                        (("1"
                                                                          (skosimp*)
                                                                          (("1"
                                                                            (rewrite
                                                                             "filter")
                                                                            (("1"
                                                                              (rewrite
                                                                               "filter")
                                                                              (("1"
                                                                                (rewrite
                                                                                 "remove")
                                                                                (("1"
                                                                                  (expand
                                                                                   "member")
                                                                                  (("1"
                                                                                    (prop)
                                                                                    nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                         ("2" (rewrite "index_value")
                          (("2" (flatten) nil)))))))))))))))))))
         ("2" (assert) nil)))))
     ("3" (assert) nil))
    nil)
   unfinished nil 417243 21650 t nil)
  (index_exists_induct-2 nil 3276339260 3276339272
   ("" (induct "n")
    (("1" (skosimp*)
      (("1" (use "least_index_exists") (("1" (assert) nil)))))
     ("2" (skosimp*)
      (("2" (use "least_index_exists")
        (("1" (assert)
          (("1" (skosimp*)
            (("1" (inst - "remove(i!1, eligible!1)" "f!1" "n2!2-1")
              (("1" (rewrite "card_remove")
                (("1" (assert)
                  (("1" (lift-if)
                    (("1" (assert)
                      (("1" (prop)
                        (("1" (skosimp*)
                          (("1" (inst + "n1!2")
                            (("1" (lemma "index_min")
                              (("1"
                                (inst?)
                                (("1"
                                  (inst - "n1!2")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide -4)
                                      (("1"
                                        (expand "index_value")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (rewrite "remove")
                                            (("1"
                                              (expand "member")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (rewrite
                                                     "filter_remove")
                                                    (("1"
                                                      (rewrite
                                                       "card_remove")
                                                      (("1"
                                                        (rewrite
                                                         "filter")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (rewrite
                                                             "card_remove")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (hide
                                                                 -4)
                                                                (("1"
                                                                  (invoke
                                                                   (then
                                                                    (case
                                                                     "%1 <= %2")
                                                                    (assert))
                                                                   (!
                                                                    -4
                                                                    l)
                                                                   (!
                                                                    2
                                                                    l))
                                                                  (("1"
                                                                    (rewrite
                                                                     "card_subset")
                                                                    (("1"
                                                                      (expand
                                                                       "subset?")
                                                                      (("1"
                                                                        (expand
                                                                         "member")
                                                                        (("1"
                                                                          (skosimp*)
                                                                          (("1"
                                                                            (rewrite
                                                                             "filter")
                                                                            (("1"
                                                                              (rewrite
                                                                               "filter")
                                                                              (("1"
                                                                                (rewrite
                                                                                 "remove")
                                                                                (("1"
                                                                                  (expand
                                                                                   "member")
                                                                                  (("1"
                                                                                    (prop)
                                                                                    nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                         ("2" (rewrite "index_value")
                          (("2" (flatten) nil)))))))))))))))))))
         ("2" (assert) nil)))))
     ("3" (assert) nil))
    nil)
   unfinished nil 9251 1160 t nil)
  (index_exists_induct-1 nil 3265033464 3276339188
   ("" (induct "n")
    (("1" (skosimp*)
      (("1" (use "least_index_exists") (("1" (assert) nil nil)) nil))
      nil)
     ("2" (skosimp*)
      (("2" (use "least_index_exists")
        (("1" (assert)
          (("1" (skosimp*)
            (("1" (inst - "remove(i!1, eligible!1)" "f!1" "k!2-1")
              (("1" (rewrite "card_remove")
                (("1" (assert)
                  (("1" (lift-if)
                    (("1" (assert)
                      (("1" (prop)
                        (("1" (skosimp*)
                          (("1" (inst + "i!2")
                            (("1" (lemma "index_min")
                              (("1"
                                (inst?)
                                (("1"
                                  (inst - "i!2")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide -4)
                                      (("1"
                                        (expand "index_value")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (rewrite "remove")
                                            (("1"
                                              (expand "member")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (rewrite
                                                     "filter_remove")
                                                    (("1"
                                                      (rewrite
                                                       "card_remove")
                                                      (("1"
                                                        (rewrite
                                                         "filter")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (rewrite
                                                             "card_remove")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (hide
                                                                 -4)
                                                                (("1"
                                                                  (invoke
                                                                   (then
                                                                    (case
                                                                     "%1 <= %2")
                                                                    (assert))
                                                                   (!
                                                                    -4
                                                                    l)
                                                                   (!
                                                                    2
                                                                    l))
                                                                  (("1"
                                                                    (rewrite
                                                                     "card_subset")
                                                                    (("1"
                                                                      (expand
                                                                       "subset?")
                                                                      (("1"
                                                                        (expand
                                                                         "member")
                                                                        (("1"
                                                                          (skosimp*)
                                                                          (("1"
                                                                            (rewrite
                                                                             "filter")
                                                                            (("1"
                                                                              (rewrite
                                                                               "filter")
                                                                              (("1"
                                                                                (rewrite
                                                                                 "remove")
                                                                                (("1"
                                                                                  (expand
                                                                                   "member")
                                                                                  (("1"
                                                                                    (prop)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (rewrite "index_value")
                          (("2" (flatten) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert) nil nil))
        nil))
      nil)
     ("3" (assert) nil nil))
    nil)
   unfinished
   ((- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (remove const-decl "set" sets nil)
    (index_min formula-decl nil index_select nil)
    (member const-decl "bool" sets nil)
    (filter const-decl "bool" index_filters nil)
    (geq const-decl "bool" index_select nil)
    (subset? const-decl "bool" sets nil)
    (card_subset formula-decl nil finite_sets nil)
    (filter_remove formula-decl nil index_filters nil)
    (total_order? const-decl "bool" orders nil)
    (leq formal-const-decl "(total_order?[T])" index_select nil)
    (card_remove formula-decl nil finite_sets nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (least_index_exists formula-decl nil index_select nil)
    (subrange_induction formula-decl nil subrange_inductions nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (index_value const-decl "bool" index_select nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-type-decl nil index_select nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (subrange type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil))
   907 820 t nil))
 (index_exists 0
  (index_exists-1 nil 3265033521 3276349881
   ("" (skosimp*)
    (("" (lemma "index_exists_induct")
      (("" (inst?)
        (("" (assert)
          (("" (assert) (("" (rewrite "card_below") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((index_exists_induct formula-decl nil index_select nil)
    (card_below formula-decl nil finite_sets_below "finite_sets/")
    (T formal-type-decl nil index_select nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" index_select nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   251 210 t shostak))
 (index_order 0
  (index_order-4 nil 3276346205 3276349883
   ("" (skosimp*)
    (("" (expand "index_value")
      (("" (flatten)
        (("" (hide -3 -7)
          (("" (lemma "pigeonhole[below(N)]")
            (("" (inst?)
              (("" (invoke (inst - "%1") (! -6 l 1))
                (("" (assert)
                  (("" (prop)
                    (("1" (skosimp*)
                      (("1" (rewrite "filter")
                        (("1" (rewrite "filter")
                          (("1" (flatten)
                            (("1" (expand "geq" -2)
                              (("1"
                                (typepred! "leq")
                                (("1"
                                  (expand "total_order?")
                                  (("1"
                                    (expand "partial_order?")
                                    (("1"
                                      (expand "preorder?")
                                      (("1"
                                        (expand "transitive?")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (inst
                                             -2
                                             "f!1(i!1)"
                                             "f!1(x!1)"
                                             "f!1(j!1)")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2"
                      (invoke (then (case "%1 <= %2") (assert)) (! 1 r)
                       (! -3 r 1))
                      (("2" (hide-all-but 1)
                        (("2" (rewrite "card_subset")
                          (("2" (expand "subset?")
                            (("2" (expand "union")
                              (("2"
                                (expand "filter")
                                (("2"
                                  (expand "member")
                                  (("2"
                                    (skosimp*)
                                    (("2" (prop) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((index_value const-decl "bool" index_select nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (T formal-type-decl nil index_select nil)
    (filter const-decl "bool" index_filters nil)
    (geq const-decl "bool" index_select nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (union const-decl "set" sets nil)
    (card_subset formula-decl nil finite_sets nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (preorder? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (partial_order? const-decl "bool" orders nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (leq formal-const-decl "(total_order?[T])" index_select nil)
    (pigeonhole formula-decl nil pigeonhole nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" index_select nil)
    (below type-eq-decl nil naturalnumbers nil))
   1502 1240 nil nil)
  (index_order-3 nil 3276338797 3276345267
   ("" (skosimp*)
    (("" (expand "index_value")
      (("" (flatten)
        (("" (hide -3 -7)
          (("" (lemma "pigeonhole[below(N)]")
            (("" (inst?)
              (("" (invoke (inst - "%1") (! -6 l 1))
                (("" (assert)
                  (("" (prop)
                    (("1" (skosimp*)
                      (("1" (rewrite "filter")
                        (("1" (rewrite "filter")
                          (("1" (flatten)
                            (("1" (expand "geq" -2)
                              (("1"
                                (typepred! "leq")
                                (("1"
                                  (expand "total_order?")
                                  (("1"
                                    (expand "partial_order?")
                                    (("1"
                                      (expand "preorder?")
                                      (("1"
                                        (expand "transitive?")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (inst
                                             -2
                                             "f!1(n1!1)"
                                             "f!1(x!1)"
                                             "f!1(n2!1)")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2"
                      (invoke (then (case "%1 <= %2") (assert)) (! 1 r)
                       (! -3 r 1))
                      (("2" (hide-all-but 1)
                        (("2" (rewrite "card_subset")
                          (("2" (expand "subset?")
                            (("2" (expand "union")
                              (("2"
                                (expand "filter")
                                (("2"
                                  (expand "member")
                                  (("2"
                                    (skosimp*)
                                    (("2" (prop) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((index_value const-decl "bool" index_select nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (T formal-type-decl nil index_select nil)
    (filter const-decl "bool" index_filters nil)
    (geq const-decl "bool" index_select nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (union const-decl "set" sets nil)
    (card_subset formula-decl nil finite_sets nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (preorder? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (partial_order? const-decl "bool" orders nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (leq formal-const-decl "(total_order?[T])" index_select nil)
    (pigeonhole formula-decl nil pigeonhole nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" index_select nil)
    (below type-eq-decl nil naturalnumbers nil))
   839 730 nil nil)
  (index_order-2 nil 3275839130 3275840381
   ("" (skosimp*)
    (("" (expand "index_value")
      (("" (flatten)
        (("" (hide -3 -7)
          (("" (lemma "pigeonhole[below(M)]")
            (("" (inst?)
              (("" (invoke (inst - "%1") (! -6 l 1))
                (("" (assert)
                  (("" (prop)
                    (("1" (skosimp*)
                      (("1" (rewrite "filter")
                        (("1" (rewrite "filter")
                          (("1" (flatten)
                            (("1" (expand "geq" -2)
                              (("1"
                                (typepred! "leq")
                                (("1"
                                  (expand "total_order?")
                                  (("1"
                                    (expand "partial_order?")
                                    (("1"
                                      (expand "preorder?")
                                      (("1"
                                        (expand "transitive?")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (inst
                                             -2
                                             "f!1(i1!1)"
                                             "f!1(x!1)"
                                             "f!1(i2!1)")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2"
                      (invoke (then (case "%1 <= %2") (assert)) (! 1 r)
                       (! -3 r 1))
                      (("2" (hide-all-but 1)
                        (("2" (rewrite "card_subset")
                          (("2" (expand "subset?")
                            (("2" (expand "union")
                              (("2"
                                (expand "filter")
                                (("2"
                                  (expand "member")
                                  (("2"
                                    (skosimp*)
                                    (("2" (prop) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((index_value const-decl "bool" index_select nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (T formal-type-decl nil index_select nil)
    (filter const-decl "bool" index_filters nil)
    (geq const-decl "bool" index_select nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (union const-decl "set" sets nil)
    (card_subset formula-decl nil finite_sets nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (preorder? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (partial_order? const-decl "bool" orders nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (leq formal-const-decl "(total_order?[T])" index_select nil)
    (pigeonhole formula-decl nil pigeonhole nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil))
   1235052 37960 t nil)
  (index_order-1 nil 3265095833 3275837310
   ("" (skosimp*)
    (("" (expand "index_value")
      (("" (flatten)
        (("" (hide -3 -7)
          (("" (lemma "pigeonhole[below(M)]")
            (("" (inst?)
              (("" (invoke (inst - "%1") (! -6 l 1))
                (("" (assert)
                  (("" (prop)
                    (("1" (skosimp*)
                      (("1" (rewrite "filter")
                        (("1" (rewrite "filter")
                          (("1" (flatten)
                            (("1" (expand ">=" -2)
                              (("1"
                                (typepred! "<=")
                                (("1"
                                  (expand "total_order?")
                                  (("1"
                                    (expand "partial_order?")
                                    (("1"
                                      (expand "preorder?")
                                      (("1"
                                        (expand "transitive?")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (inst
                                             -2
                                             "f!1(i1!1)"
                                             "f!1(x!1)"
                                             "f!1(i2!1)")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2"
                      (invoke (then (case "%1 <= %2") (assert)) (! 1 r)
                       (! -3 r 1))
                      (("2" (hide-all-but 1)
                        (("2" (rewrite "card_subset")
                          (("2" (expand "subset?")
                            (("2" (expand "union")
                              (("2"
                                (expand "filter")
                                (("2"
                                  (expand "member")
                                  (("2"
                                    (skosimp*)
                                    (("2" (prop) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((index_value const-decl "bool" index_select nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (T formal-type-decl nil index_select nil)
    (filter const-decl "bool" index_filters nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (union const-decl "set" sets nil)
    (card_subset formula-decl nil finite_sets nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (preorder? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (partial_order? const-decl "bool" orders nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (pigeonhole formula-decl nil pigeonhole nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil))
   719 500 t shostak))
 (index_value_overlap 0
  (index_value_overlap-3 nil 3276339150 3276349884
   ("" (expand "index_value")
    (("" (skosimp*)
      (("" (hide -3 -5)
        (("" (lemma "pigeonhole")
          (("" (invoke (inst - "%1" "%2") (! -3 l 1) (! -5 l 1))
            (("" (prop)
              (("1" (skosimp*)
                (("1" (rewrite "filter")
                  (("1" (rewrite "filter")
                    (("1" (flatten)
                      (("1" (inst?)
                        (("1" (expand "geq") (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -1 -3 2)
                (("2"
                  (invoke (then (case "%1 <= %2") (assert)) (! 1 r)
                   (! -2 r 1))
                  (("2" (hide-all-but 1)
                    (("2" (rewrite "card_subset")
                      (("2" (hide 2)
                        (("2" (auto-rewrite-defs)
                          (("2" (assert)
                            (("2" (skosimp*) (("2" (prop) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" index_select nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (pigeonhole formula-decl nil pigeonhole nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (union const-decl "set" sets nil)
    (card_subset formula-decl nil finite_sets nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (T formal-type-decl nil index_select nil)
    (filter const-decl "bool" index_filters nil)
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (leq formal-const-decl "(total_order?[T])" index_select nil)
    (geq const-decl "bool" index_select nil)
    (index_value const-decl "bool" index_select nil))
   1356 1160 nil nil)
  (index_value_overlap-2 nil 3275840404 3275840414
   ("" (expand "index_value")
    (("" (skosimp*)
      (("" (hide -3 -5)
        (("" (lemma "pigeonhole")
          (("" (invoke (inst - "%1" "%2") (! -3 l 1) (! -5 l 1))
            (("" (prop)
              (("1" (skosimp*)
                (("1" (rewrite "filter")
                  (("1" (rewrite "filter")
                    (("1" (flatten)
                      (("1" (inst?)
                        (("1" (expand "geq") (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -1 -3 2)
                (("2"
                  (invoke (then (case "%1 <= %2") (assert)) (! 1 r)
                   (! -2 r 1))
                  (("2" (hide-all-but 1)
                    (("2" (rewrite "card_subset")
                      (("2" (hide 2)
                        (("2" (auto-rewrite-defs)
                          (("2" (assert)
                            (("2" (skosimp*) (("2" (prop) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((index_value const-decl "bool" index_select nil)
    (geq const-decl "bool" index_select nil)
    (leq formal-const-decl "(total_order?[T])" index_select nil)
    (total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (filter const-decl "bool" index_filters nil)
    (T formal-type-decl nil index_select nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (card_subset formula-decl nil finite_sets nil)
    (union const-decl "set" sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (pigeonhole formula-decl nil pigeonhole nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil))
   8389 810 nil nil)
  (index_value_overlap-1 nil 3267461668 3275837311
   ("" (expand "index_value")
    (("" (skosimp*)
      (("" (hide -3 -5)
        (("" (lemma "pigeonhole")
          (("" (invoke (inst - "%1" "%2") (! -3 l 1) (! -5 l 1))
            (("" (prop)
              (("1" (skosimp*)
                (("1" (rewrite "filter")
                  (("1" (rewrite "filter")
                    (("1" (flatten)
                      (("1" (inst?)
                        (("1" (expand ">=") (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -1 -3 2)
                (("2"
                  (invoke (then (case "%1 <= %2") (assert)) (! 1 r)
                   (! -2 r 1))
                  (("2" (hide-all-but 1)
                    (("2" (rewrite "card_subset")
                      (("2" (hide 2)
                        (("2" (auto-rewrite-defs)
                          (("2" (assert)
                            (("2" (skosimp*) (("2" (prop) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (pigeonhole formula-decl nil pigeonhole nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (union const-decl "set" sets nil)
    (card_subset formula-decl nil finite_sets nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (T formal-type-decl nil index_select nil)
    (filter const-decl "bool" index_filters nil)
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (index_value const-decl "bool" index_select nil))
   714 680 t nil)))


$$$middle_value_index.pvs
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% NASA Langley Formal Methods
% http://shemesh.larc.nasa.gov/fm/spider/fm-now-spider.html
%
% PVS 3.1
%
% Design       : SPIDER Version 2
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


middle_value_index[N: posnat, T: TYPE, leq: (total_order?[T])]: THEORY

  BEGIN

  IMPORTING 
    index_select[N, T, leq],
    good_vote_for[N, T]

  good, select: var finite_set[below(N)] 

  f, f1, f2  : var [below(N) -> T]

  t: VAR T

  i, j: VAR below(N)

  rel: VAR [T,T -> bool]

  middle_value(select)(f)(i): bool = % returns true if f(i) is a middle value
    select(i) AND
       2*card(filter(leq)(select)(f)(i)) >  card(select) AND
       2*card(filter(geq)(select)(f)(i)) >= card(select)

  eligible: var non_empty_finite_set[below(N)]

  middle_value_exists: LEMMA
    EXISTS i: middle_value(eligible)(f)(i)

  middle_index(eligible, f): below(N) = 
    choose({i | middle_value(eligible)(f)(i)})

  middle_index_value: LEMMA
     index_value(eligible, floor(card(eligible)/2),f)(middle_index(eligible, f))

  middle_value(eligible, f): T =
    f(middle_index(eligible, f))

  middle_good_bounded: LEMMA
      majority_subset?(good,select) AND
      2*card(filter(rel)(select)(f)(i)) >= card(select) 
    IMPLIES
      EXISTS j: good(j) AND rel(f(j),f(i))

  middle_value_lower_validity: LEMMA
      majority_subset?(good, eligible) 
    IMPLIES
       EXISTS i : good(i) AND leq(f(i), middle_value(eligible, f))

  middle_value_upper_validity: LEMMA
      majority_subset?(good, eligible) 
    IMPLIES
       EXISTS i : good(i) AND leq(middle_value(eligible, f), f(i))

  middle_value_exact_validity: LEMMA
      majority_subset?(good, eligible) AND
      good_vote_for?(good, f, t) 
    IMPLIES
      middle_value(eligible, f) = t    

  middle_value_overlap: LEMMA
    EXISTS j: 
      eligible(j) AND 
      leq(f1(j), middle_value(eligible,f1)) AND 
      leq(middle_value(eligible,f2), f2(j))

  END middle_value_index


$$$middle_value_index.prf
(middle_value_index
 (middle_value_exists 0
  (middle_value_exists-3 nil 3276346291 3276346299
   ("" (skosimp*)
    (("" (lemma "index_exists")
      (("" (inst?)
        (("" (inst?)
          (("" (inst - "floor(card(eligible!1)/2)")
            (("1" (assert)
              (("1" (prop)
                (("1" (skosimp*)
                  (("1" (inst + "i!1")
                    (("1" (expand "index_value")
                      (("1" (flatten)
                        (("1" (expand "middle_value")
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (use "nonempty_card[below(N)]")
                    (("2" (assert)
                      (("2" (expand "nonempty?")
                        (("2" (typepred "eligible!1")
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (use "card_below") (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil) nil
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (middle_value const-decl "bool" middle_value_index nil)
    (index_value const-decl "bool" index_select nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (nonempty? const-decl "bool" sets nil)
    (card_below formula-decl nil finite_sets_below "finite_sets/")
    (index_exists formula-decl nil index_select nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" middle_value_index nil)
    (T formal-type-decl nil middle_value_index nil)
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (leq formal-const-decl "(total_order?[T])" middle_value_index nil))
   7154 440 nil nil)
  (middle_value_exists-2 nil 3276341498 3276346271
   ("" (skosimp*)
    (("" (lemma "index_exists")
      (("" (inst?)
        (("" (inst?)
          (("" (inst - "floor(card(eligible!1)/2)")
            (("1" (assert)
              (("1" (prop)
                (("1" (skosimp*)
                  (("1" (inst + "n1!1")
                    (("1" (expand "index_value")
                      (("1" (flatten)
                        (("1" (expand "middle_value")
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (use "nonempty_card[below(N)]")
                    (("2" (assert)
                      (("2" (expand "nonempty?")
                        (("2" (typepred "eligible!1")
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (use "card_below") (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (middle_value const-decl "bool" middle_value_index nil)
    (index_value const-decl "bool" index_select nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (nonempty? const-decl "bool" sets nil)
    (card_below formula-decl nil finite_sets_below "finite_sets/")
    (index_exists formula-decl nil index_select nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" middle_value_index nil)
    (T formal-type-decl nil middle_value_index nil)
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (leq formal-const-decl "(total_order?[T])" middle_value_index nil))
   546 470 nil nil)
  (middle_value_exists-1 nil 3265458918 3276341464
   ("" (skosimp*)
    (("" (lemma "index_exists")
      (("" (inst?)
        (("" (inst?)
          (("" (inst - "floor(card(eligible!1)/2)")
            (("1" (assert)
              (("1" (prop)
                (("1" (skosimp*)
                  (("1" (inst + "i!1")
                    (("1" (expand "index_value")
                      (("1" (flatten)
                        (("1" (expand "middle_value")
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (use "nonempty_card[below(N)]")
                    (("2" (assert)
                      (("2" (expand "nonempty?")
                        (("2" (typepred "eligible!1")
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (use "card_below") (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((leq formal-const-decl "(total_order?[T])" middle_value_index nil)
    (total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (T formal-type-decl nil middle_value_index nil)
    (N formal-const-decl "posnat" middle_value_index nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (index_exists formula-decl nil index_select nil)
    (card_below formula-decl nil finite_sets_below "finite_sets/")
    (nonempty? const-decl "bool" sets nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (index_value const-decl "bool" index_select nil)
    (middle_value const-decl "bool" middle_value_index nil)
    (integer nonempty-type-from-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   497 460 t shostak))
 (middle_index_TCC1 0
  (middle_index_TCC1-1 nil 3265469831 3276277571
   ("" (skosimp*)
    (("" (expand "nonempty?")
      (("" (expand "empty?")
        (("" (expand "member")
          (("" (use "middle_value_exists")
            (("" (skosimp*) (("" (inst?) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((nonempty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" middle_value_index nil)
    (below type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (T formal-type-decl nil middle_value_index nil)
    (middle_value_exists formula-decl nil middle_value_index nil)
    (empty? const-decl "bool" sets nil))
   128 100 t shostak))
 (middle_index_value_TCC1 0
  (middle_index_value_TCC1-1 nil 3267464088 3276277571
   ("" (skosimp*) (("" (use "card_below") (("" (assert) nil nil)) nil))
    nil)
   proved-complete
   ((card_below formula-decl nil finite_sets_below "finite_sets/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" middle_value_index nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   243 230 t shostak))
 (middle_index_value 0
  (middle_index_value-1 nil 3267463215 3276346273
   ("" (skosimp*)
    (("" (expand "index_value")
      (("" (expand "middle_index")
        (("" (expand "choose")
          (("" (use "epsilon_ax[below(N)]")
            (("1" (split -1)
              (("1" (rewrite "middle_value")
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (div-by (-2 -3) "2")
                      (("1" (assert)
                        (("1" (prop)
                          (("1" (assert) nil nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil)
                       ("2" (inst + 0) nil nil)
                       ("3" (inst + 0) nil nil)
                       ("4" (inst + 0) nil nil)
                       ("5" (inst + 0) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (inst + 0) nil nil))
                nil)
               ("2" (use "middle_value_exists") nil nil))
              nil)
             ("2" (assert) (("2" (inst + 0) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((index_value const-decl "bool" index_select nil)
    (choose const-decl "(p)" sets nil)
    (both_sides_div_pos_gt1 formula-decl nil real_props nil)
    (leq formal-const-decl "(total_order?[T])" middle_value_index nil)
    (total_order? const-decl "bool" orders nil)
    (filter const-decl "bool" index_filters nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (both_sides_div_pos_ge1 formula-decl nil real_props nil)
    (times_div_cancel1 formula-decl nil extra_real_props "Manip/")
    (/= const-decl "boolean" notequal nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (geq const-decl "bool" index_select nil)
    (epsilon const-decl "T" epsilons nil)
    (middle_value_exists formula-decl nil middle_value_index nil)
    (pred type-eq-decl nil defined_types nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (T formal-type-decl nil middle_value_index nil)
    (middle_value const-decl "bool" middle_value_index nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" middle_value_index nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (epsilon_ax formula-decl nil epsilons nil)
    (TRUE const-decl "bool" booleans nil)
    (middle_index const-decl "below(N)" middle_value_index nil))
   1420 1230 t shostak))
 (middle_good_bounded 0
  (middle_good_bounded-1 nil 3265458917 3276346273
   ("" (skosimp*)
    (("" (expand "majority_subset?")
      (("" (flatten)
        (("" (use "majority_pigeonhole")
          (("" (expand "filter")
            (("" (assert)
              (("" (prop)
                (("1" (skosimp*)
                  (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
                 ("2" (hide-all-but 1)
                  (("2" (expand "subset?")
                    (("2" (expand "member") (("2" (skosimp*) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((majority_subset? const-decl "bool" pigeonhole nil)
    (majority_pigeonhole formula-decl nil pigeonhole nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" middle_value_index nil)
    (below type-eq-decl nil naturalnumbers nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (filter const-decl "bool" index_filters nil)
    (T formal-type-decl nil middle_value_index nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil))
   687 490 nil nil))
 (middle_value_lower_validity 0
  (middle_value_lower_validity-2 nil 3276277974 3276346274
   ("" (skosimp*)
    (("" (expand "middle_value")
      (("" (use "middle_good_bounded")
        (("" (assert)
          (("" (ground)
            (("" (hide-all-but 1)
              (("" (expand "middle_index")
                (("" (assert)
                  (("" (expand "choose")
                    (("" (use "epsilon_ax[below(N)]")
                      (("1" (assert)
                        (("1" (prop)
                          (("1" (expand "middle_value")
                            (("1" (assert) nil nil)) nil)
                           ("2" (use "middle_value_exists") nil nil))
                          nil))
                        nil)
                       ("2" (assert) (("2" (inst + 0) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((middle_value const-decl "T" middle_value_index nil)
    (TRUE const-decl "bool" booleans nil)
    (epsilon_ax formula-decl nil epsilons nil)
    (middle_value const-decl "bool" middle_value_index nil)
    (middle_value_exists formula-decl nil middle_value_index nil)
    (choose const-decl "(p)" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" middle_value_index nil)
    (below type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil middle_value_index nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (middle_index const-decl "below(N)" middle_value_index nil)
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (leq formal-const-decl "(total_order?[T])" middle_value_index nil)
    (middle_good_bounded formula-decl nil middle_value_index nil))
   958 900 t nil)
  (middle_value_lower_validity-1 nil 3266841587 3276277573
   ("" (skosimp*)
    (("" (expand "middle_value")
      (("" (use "middle_good_bounded")
        (("" (assert)
          (("" (ground)
            (("" (hide-all-but 1)
              (("" (expand "middle_index")
                (("" (assert)
                  (("" (expand "choose")
                    (("" (use "epsilon_ax[below(M)]")
                      (("1" (assert)
                        (("1" (prop)
                          (("1" (expand "middle_value")
                            (("1" (assert) nil nil)) nil)
                           ("2" (use "middle_value_exists") nil nil))
                          nil))
                        nil)
                       ("2" (assert) (("2" (inst + 0) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((middle_value const-decl "T" middle_value_index nil)
    (TRUE const-decl "bool" booleans nil)
    (epsilon_ax formula-decl nil epsilons nil)
    (middle_value const-decl "bool" middle_value_index nil)
    (middle_value_exists formula-decl nil middle_value_index nil)
    (choose const-decl "(p)" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil middle_value_index nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (middle_index const-decl "below(N)" middle_value_index nil)
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (leq formal-const-decl "(total_order?[T])" middle_value_index nil)
    (middle_good_bounded formula-decl nil middle_value_index nil))
   525 490 t shostak))
 (middle_value_upper_validity 0
  (middle_value_upper_validity-4 nil 3276278002 3276346275
   ("" (skosimp*)
    (("" (expand "middle_value")
      (("" (lemma "middle_good_bounded")
        (("" (inst?)
          (("" (inst?)
            (("" (inst - "geq")
              (("" (assert)
                (("" (ground)
                  (("1" (skosimp*)
                    (("1" (inst?)
                      (("1" (assert)
                        (("1" (expand "geq") (("1" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -1 2)
                    (("2" (expand "middle_index")
                      (("2" (expand "choose")
                        (("2" (use "epsilon_ax[below(N)]")
                          (("1" (assert)
                            (("1" (ground)
                              (("1"
                                (rewrite "middle_value")
                                (("1" (inst + 0) nil nil))
                                nil)
                               ("2"
                                (use "middle_value_exists")
                                nil
                                nil))
                              nil))
                            nil)
                           ("2" (inst + 0) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((middle_value const-decl "T" middle_value_index nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" middle_value_index nil)
    (below type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil middle_value_index nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (middle_index const-decl "below(N)" middle_value_index nil)
    (geq const-decl "bool" index_select nil)
    (leq formal-const-decl "(total_order?[T])" middle_value_index nil)
    (total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (TRUE const-decl "bool" booleans nil)
    (epsilon_ax formula-decl nil epsilons nil)
    (middle_value const-decl "bool" middle_value_index nil)
    (epsilon const-decl "T" epsilons nil)
    (middle_value_exists formula-decl nil middle_value_index nil)
    (choose const-decl "(p)" sets nil)
    (middle_good_bounded formula-decl nil middle_value_index nil))
   755 680 nil nil)
  (middle_value_upper_validity-3 nil 3275840687 3276277573
   ("" (skosimp*)
    (("" (expand "middle_value")
      (("" (lemma "middle_good_bounded")
        (("" (inst?)
          (("" (inst?)
            (("" (inst - "geq")
              (("" (assert)
                (("" (ground)
                  (("1" (skosimp*)
                    (("1" (inst?)
                      (("1" (assert)
                        (("1" (expand "geq") (("1" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -1 2)
                    (("2" (expand "middle_index")
                      (("2" (expand "choose")
                        (("2" (use "epsilon_ax[below(M)]")
                          (("1" (assert)
                            (("1" (ground)
                              (("1"
                                (rewrite "middle_value")
                                (("1" (inst + 0) nil nil))
                                nil)
                               ("2"
                                (use "middle_value_exists")
                                nil
                                nil))
                              nil))
                            nil)
                           ("2" (inst + 0) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((middle_good_bounded formula-decl nil middle_value_index nil)
    (choose const-decl "(p)" sets nil)
    (middle_value_exists formula-decl nil middle_value_index nil)
    (epsilon const-decl "T" epsilons nil)
    (middle_value const-decl "bool" middle_value_index nil)
    (epsilon_ax formula-decl nil epsilons nil)
    (TRUE const-decl "bool" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (leq formal-const-decl "(total_order?[T])" middle_value_index nil)
    (geq const-decl "bool" index_select nil)
    (middle_index const-decl "below(N)" middle_value_index nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil middle_value_index nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (middle_value const-decl "T" middle_value_index nil))
   528 400 nil nil)
  (middle_value_upper_validity-2 nil 3275840651 3275840663
   ("" (skosimp*)
    (("" (expand "middle_value")
      (("" (lemma "middle_good_bounded")
        (("" (inst?)
          (("" (inst?)
            (("" (inst - ">=")
              (("" (assert)
                (("" (ground)
                  (("1" (skosimp*)
                    (("1" (inst?)
                      (("1" (assert)
                        (("1" (expand "geq")
                          (("1" (propax) nil)))))))))
                   ("2" (hide -1 2)
                    (("2" (expand "middle_index")
                      (("2" (expand "choose")
                        (("2" (use "epsilon_ax[below(M)]")
                          (("1" (assert)
                            (("1" (ground)
                              (("1"
                                (rewrite "middle_value")
                                (("1" (inst + 0) nil)))
                               ("2"
                                (use "middle_value_exists")
                                nil)))))
                           ("2" (inst + 0) nil))))))))))))))))))))))))
    nil)
   unfinished nil 11775 690 t nil)
  (middle_value_upper_validity-1 nil 3266845095 3275840618
   ("" (skosimp*)
    (("" (expand "middle_value")
      (("" (lemma "middle_good_bounded")
        (("" (inst?)
          (("" (inst?)
            (("" (inst - ">=")
              (("" (assert)
                (("" (ground)
                  (("1" (skosimp*)
                    (("1" (inst?)
                      (("1" (assert)
                        (("1" (expand ">=") (("1" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -1 2)
                    (("2" (expand "middle_index")
                      (("2" (expand "choose")
                        (("2" (use "epsilon_ax[below(M)]")
                          (("1" (assert)
                            (("1" (ground)
                              (("1"
                                (rewrite "middle_value")
                                (("1" (inst + 0) nil nil))
                                nil)
                               ("2"
                                (use "middle_value_exists")
                                nil
                                nil))
                              nil))
                            nil)
                           ("2" (inst + 0) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((middle_value const-decl "T" middle_value_index nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil middle_value_index nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (middle_index const-decl "below(N)" middle_value_index nil)
    (total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (TRUE const-decl "bool" booleans nil)
    (epsilon_ax formula-decl nil epsilons nil)
    (middle_value const-decl "bool" middle_value_index nil)
    (epsilon const-decl "T" epsilons nil)
    (middle_value_exists formula-decl nil middle_value_index nil)
    (choose const-decl "(p)" sets nil)
    (middle_good_bounded formula-decl nil middle_value_index nil))
   389 370 t shostak))
 (middle_value_exact_validity 0
  (middle_value_exact_validity-1 nil 3276519967 3276520204
   ("" (skosimp*)
    (("" (expand "good_vote_for?")
      (("" (use "middle_value_lower_validity")
        (("" (use "middle_value_upper_validity")
          (("" (assert)
            (("" (skosimp*)
              (("" (inst-cp - "i!1")
                (("" (inst - "i!2")
                  (("" (assert)
                    (("" (typepred! "leq")
                      (("" (expand "total_order?")
                        (("" (expand "partial_order?")
                          (("" (expand "antisymmetric?")
                            (("" (flatten)
                              ((""
                                (replace*)
                                ((""
                                  (hide -9 -10)
                                  ((""
                                    (inst?)
                                    (("" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((good_vote_for? const-decl "bool" good_vote_for nil)
    (middle_value_upper_validity formula-decl nil middle_value_index
     nil)
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (leq formal-const-decl "(total_order?[T])" middle_value_index nil)
    (partial_order? const-decl "bool" orders nil)
    (middle_value const-decl "T" middle_value_index nil)
    (antisymmetric? const-decl "bool" relations nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" middle_value_index nil)
    (below type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (T formal-type-decl nil middle_value_index nil)
    (middle_value_lower_validity formula-decl nil middle_value_index
     nil))
   236929 7320 t shostak))
 (middle_value_overlap 0
  (middle_value_overlap-1 nil 3265458917 3276346276
   ("" (skosimp*)
    (("" (expand "middle_value")
      (("" (lemma "index_value_overlap")
        (("" (inst?)
          (("" (assert)
            (("" (inst - "floor(card(eligible!1)/2)")
              (("1" (rewrite "middle_index_value")
                (("1" (rewrite "middle_index_value") nil nil)) nil)
               ("2" (assert)
                (("2" (hide 2)
                  (("2" (use "card_below") (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((middle_value const-decl "T" middle_value_index nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (middle_index const-decl "below(N)" middle_value_index nil) nil
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (middle_index_value formula-decl nil middle_value_index nil)
    (card_below formula-decl nil finite_sets_below "finite_sets/")
    (index_value_overlap formula-decl nil index_select nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" middle_value_index nil)
    (T formal-type-decl nil middle_value_index nil)
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (leq formal-const-decl "(total_order?[T])" middle_value_index nil))
   317 310 t nil)))


$$$single_stage_bag_mid_val.pvs
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Lee Pike 
% leepike @ galois.com
% Formal Methods Group, NASA Langley Research Center
%
% PVS Version 3.1
%
%
% Purpose                  : proves validity and agreement results
%                            of middle value selection over bags after a 
%                            a single round of inexact communication
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

single_stage_bag_mid_val
[
    S  : posnat          
] : THEORY

BEGIN

MSG: TYPE = real % The type could differ--
                 %  we just need a linearly-ordered additive group.

m, m1, m2: VAR MSG

IMPORTING
  middle_value_index[S,MSG, <=],
  mid_val_equiv[S,MSG, <=],
  abs_props


s, s1, s2 : VAR below(S)

good_senders        : VAR finite_set[below(S)]

eligible_senders,
eligible_senders1,
eligible_senders2   : VAR non_empty_finite_set[below(S)]

ideal               : VAR [below(S) -> MSG]

actual, actual1, 
actual2             : VAR [below(S) -> MSG]

e_l, e_u, skew      : MSG

majority_good(good_senders, eligible_senders): bool = 
  majority_subset?(good_senders, eligible_senders)

lower_function_error(good_senders, ideal, actual): bool = 
  FORALL s: good_senders(s) IMPLIES ideal(s) - e_l <= actual(s)

upper_function_error(good_senders, ideal, actual): bool = 
  FORALL s: good_senders(s) IMPLIES actual(s) <= ideal(s) + e_u 

inexact_function(good_senders, ideal, actual): bool = 
  lower_function_error(good_senders, ideal, actual) AND
  upper_function_error(good_senders, ideal, actual)

inexact_validity(eligible_senders, good_senders, ideal, actual): bool =
  (EXISTS s1: good_senders(s1) AND 
    ideal(s1) - e_l <= mid_val(make_bag(eligible_senders, actual))) AND
  (EXISTS s2: good_senders(s2) AND
    mid_val(make_bag(eligible_senders, actual)) <= ideal(s2) + e_u)

inexact_validity: THEOREM
    majority_good(good_senders, eligible_senders) AND
    inexact_function(good_senders, ideal, actual)
  IMPLIES
    inexact_validity(eligible_senders, good_senders, ideal, actual)

inexact_agreement(good_senders): bool = 
  FORALL s1, s2, actual1, actual2: 
    good_senders(s1) AND good_senders(s2) IMPLIES
      abs(actual1(s1) - actual2(s2)) <skew

inexact_agreement(eligible_senders1, eligible_senders2, 
          good_senders, ideal, actual1, actual2): bool =
  abs(mid_val(make_bag(eligible_senders1, actual1)) -
      mid_val(make_bag(eligible_senders2, actual2))) <= skew     

inexact_agreement_propagation: THEOREM 
    majority_good(good_senders, eligible_senders1) AND
    majority_good(good_senders, eligible_senders2) AND
    inexact_agreement(good_senders)
  IMPLIES
    inexact_agreement(eligible_senders1, eligible_senders2,
                      good_senders, ideal, actual1, actual2)

inexact_symmetry(eligible_senders, actual1, actual2): bool =
  FORALL s: eligible_senders(s) IMPLIES abs(actual1(s) - actual2(s)) <= skew

inexact_agreement_generation: THEOREM
    eligible_senders1 = eligible_senders2 AND
    inexact_symmetry(eligible_senders1, actual1, actual2) 
  IMPLIES
    inexact_agreement(eligible_senders1, eligible_senders2,
                      good_senders, ideal, actual1, actual2)
    

END single_stage_bag_mid_val

$$$single_stage_bag_mid_val.prf
(single_stage_bag_mid_val
 (inexact_validity 0
  (inexact_validity-1 nil 3287851994 3287917468
   ("" (skosimp*)
    (("" (expand "majority_good")
      (("" (expand "inexact_validity")
        (("" (use "mid_val_is_middle_value")
          (("" (replace - :dir rl :hide? t)
            (("" (split)
              (("1" (use "middle_value_lower_validity")
                (("1" (assert)
                  (("1" (skosimp*)
                    (("1" (inst?)
                      (("1" (split)
                        (("1" (propax) nil nil)
                         ("2" (expand "inexact_function")
                          (("2" (flatten)
                            (("2" (expand "lower_function_error")
                              (("2"
                                (inst?)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (forward-chain "majority_subset_nonempty")
                (("2" (use "middle_value_upper_validity")
                  (("2" (assert)
                    (("2" (skosimp*)
                      (("2" (inst?)
                        (("2" (split)
                          (("1" (propax) nil nil)
                           ("2" (expand "inexact_function")
                            (("2" (flatten)
                              (("2"
                                (expand "upper_function_error")
                                (("2"
                                  (inst?)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((majority_good const-decl "bool" single_stage_bag_mid_val nil)
    (mid_val_is_middle_value formula-decl nil mid_val_equiv nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (S formal-const-decl "posnat" single_stage_bag_mid_val nil)
    (MSG type-eq-decl nil single_stage_bag_mid_val nil)
    (<= const-decl "bool" reals nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (inexact_function const-decl "bool" single_stage_bag_mid_val
     nil)
    (lower_function_error const-decl "bool" single_stage_bag_mid_val
     nil)
    (middle_value_lower_validity formula-decl nil middle_value_index
     nil)
    (middle_value_upper_validity formula-decl nil middle_value_index
     nil)
    (upper_function_error const-decl "bool" single_stage_bag_mid_val
     nil)
    (majority_subset_nonempty formula-decl nil pigeonhole nil)
    (inexact_validity const-decl "bool" single_stage_bag_mid_val nil))
   18598 7580 t shostak))
 (inexact_agreement_propagation 0
  (inexact_agreement_propagation-2 nil 3287858989 3287917142
   ("" (skosimp*)
    (("" (lemma "mid_val_is_middle_value")
      (("" (inst-cp - "actual1!1" "eligible_senders1!1")
        (("1" (inst - "actual2!1" "eligible_senders2!1")
          (("1" (expand "inexact_agreement")
            (("1" (replace - :dir rl :hide? t)
              (("1" (replace - :dir rl :hide? t)
                (("1" (expand "majority_good")
                  (("1" (expand "abs")
                    (("1" (lift-if)
                      (("1" (prop)
                        (("1" (lemma "middle_value_upper_validity")
                          (("1"
                            (inst - "eligible_senders2!1" "actual2!1"
                             "good_senders!1")
                            (("1" (lemma "middle_value_lower_validity")
                              (("1"
                                (inst
                                 -
                                 "eligible_senders1!1"
                                 "actual1!1"
                                 "good_senders!1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (skosimp*)
                                    (("1"
                                      (expand "inexact_agreement")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (inst - "i!2" "actual2!1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "abs")
                                                (("1"
                                                  (assert)
                                                  nil)))))))))))))))))
                                 ("2"
                                  (forward-chain
                                   "majority_subset_nonempty")
                                  nil)))))
                             ("2" (hide-all-but (-1 -4))
                              (("2"
                                (forward-chain
                                 "majority_subset_nonempty")
                                nil)))))))
                         ("2" (lemma "middle_value_upper_validity")
                          (("2"
                            (inst - "eligible_senders1!1" "actual1!1"
                             "good_senders!1")
                            (("1" (lemma "middle_value_lower_validity")
                              (("1"
                                (inst
                                 -
                                 "eligible_senders2!1"
                                 "actual2!1"
                                 "good_senders!1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (skosimp*)
                                    (("1"
                                      (expand "inexact_agreement")
                                      (("1"
                                        (inst - "i!2" _ "actual1!1" _)
                                        (("1"
                                          (inst - "i!1" "actual2!1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "abs")
                                              (("1"
                                                (assert)
                                                nil)))))))))))))))
                                 ("2"
                                  (hide-all-but (-1 -4))
                                  (("2"
                                    (forward-chain
                                     "majority_subset_nonempty")
                                    nil)))))))
                             ("2"
                              (forward-chain
                               "majority_subset_nonempty")
                              nil)))))))))))))))))))
           ("2" (expand "majority_good")
            (("2" (hide-all-but (-1 -4))
              (("2" (forward-chain "majority_subset_nonempty")
                nil)))))))
         ("2" (expand "majority_good")
          (("2" (forward-chain "majority_subset_nonempty") nil))))))))
    nil)
   proved
   ((<= const-decl "bool" reals nil)
    (MSG type-eq-decl nil single_stage_bag_mid_val nil)
    (S formal-const-decl "posnat" single_stage_bag_mid_val nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (mid_val_is_middle_value formula-decl nil mid_val_equiv nil)
    (majority_good const-decl "bool" single_stage_bag_mid_val nil)
    (middle_value_upper_validity formula-decl nil middle_value_index
     nil)
    (middle_value_lower_validity formula-decl nil middle_value_index
     nil)
    (abs const-decl "{n: nonneg_real | n >= m}" real_defs nil)
    (inexact_agreement const-decl "bool" single_stage_bag_mid_val nil)
    (inexact_agreement const-decl "bool" single_stage_bag_mid_val nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   831 640 nil nil)
  (inexact_agreement_propagation-1 nil 3287858330 3287858338
   ("" (skosimp*)
    (("" (lemma "mid_val_is_middle_value")
      (("" (inst-cp - "actual1!1" "eligible_senders1!1")
        (("1" (inst - "actual2!1" "eligible_senders2!1")
          (("1" (expand "agreement")
            (("1" (replace - :dir rl :hide? t)
              (("1" (replace - :dir rl :hide? t)
                (("1" (expand "majority_good")
                  (("1" (expand "abs")
                    (("1" (lift-if)
                      (("1" (prop)
                        (("1" (lemma "middle_value_upper_validity")
                          (("1"
                            (inst - "eligible_senders2!1" "actual2!1"
                             "good_senders!1")
                            (("1" (lemma "middle_value_lower_validity")
                              (("1"
                                (inst
                                 -
                                 "eligible_senders1!1"
                                 "actual1!1"
                                 "good_senders!1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (skosimp*)
                                    (("1"
                                      (expand "inexact_agreement")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (inst - "i!2" "actual2!1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "abs")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (forward-chain
                                   "majority_subset_nonempty")
                                  nil
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but (-1 -4))
                              (("2"
                                (forward-chain
                                 "majority_subset_nonempty")
                                nil
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (lemma "middle_value_upper_validity")
                          (("2"
                            (inst - "eligible_senders1!1" "actual1!1"
                             "good_senders!1")
                            (("1" (lemma "middle_value_lower_validity")
                              (("1"
                                (inst
                                 -
                                 "eligible_senders2!1"
                                 "actual2!1"
                                 "good_senders!1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (skosimp*)
                                    (("1"
                                      (expand "inexact_agreement")
                                      (("1"
                                        (inst - "i!2" _ "actual1!1" _)
                                        (("1"
                                          (inst - "i!1" "actual2!1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "abs")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but (-1 -4))
                                  (("2"
                                    (forward-chain
                                     "majority_subset_nonempty")
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2"
                              (forward-chain
                               "majority_subset_nonempty")
                              nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "majority_good")
            (("2" (hide-all-but (-1 -4))
              (("2" (forward-chain "majority_subset_nonempty") nil
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "majority_good")
          (("2" (forward-chain "majority_subset_nonempty") nil nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (empty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (abs const-decl "{n: nonneg_real | n >= m}" real_defs nil)
    (majority_subset_nonempty formula-decl nil pigeonhole nil)
    (middle_value_lower_validity formula-decl nil middle_value_index
     nil)
    (middle_value_upper_validity formula-decl nil middle_value_index
     nil)
    (majority_good const-decl "bool" single_stage_bag_mid_val nil)
    (mid_val_is_middle_value formula-decl nil mid_val_equiv nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (S formal-const-decl "posnat" single_stage_bag_mid_val nil)
    (MSG type-eq-decl nil single_stage_bag_mid_val nil)
    (<= const-decl "bool" reals nil))
   6963 620 nil nil))
 (inexact_agreement_generation 0
  (inexact_agreement_generation-1 nil 3287858996 3287917143
   ("" (skosimp*)
    (("" (expand "inexact_agreement")
      (("" (lemma "mid_val_is_middle_value")
        (("" (inst-cp - "actual1!1" "eligible_senders1!1")
          (("1" (inst - "actual2!1" "eligible_senders2!1")
            (("1" (replace - :dir rl :hide? t)
              (("1" (replace - :dir rl :hide? t)
                (("1" (replace - :hide? t)
                  (("1" (lemma "middle_value_overlap")
                    (("1"
                      (inst-cp - "eligible_senders2!1" "actual1!1"
                       "actual2!1")
                      (("1"
                        (inst - "eligible_senders2!1" "actual2!1"
                         "actual1!1")
                        (("1" (skosimp*)
                          (("1" (expand "inexact_symmetry")
                            (("1" (inst-cp - "j!1")
                              (("1"
                                (inst - "j!2")
                                (("1"
                                  (assert)
                                  (("1"
                                    (rewrite "abs_le_nonneg")
                                    (("1"
                                      (rewrite "abs_le_nonneg")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (rewrite "abs_le_nonneg")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (expand "empty?")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (expand "member")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skosimp*)
                          (("2" (expand "empty?")
                            (("2" (inst?)
                              (("2"
                                (expand "member")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (postpone) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (postpone) nil nil))
            nil)
           ("2" (postpone) nil nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((inexact_agreement const-decl "bool" single_stage_bag_mid_val nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (middle_value const-decl "T" middle_value_index nil)
    (abs_le_nonneg formula-decl nil abs_props nil)
    (nnreal type-eq-decl nil real_types nil)
    (skew const-decl "MSG" single_stage_bag_mid_val nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (inexact_symmetry const-decl "bool" single_stage_bag_mid_val nil)
    (middle_value_overlap formula-decl nil middle_value_index nil)
    (mid_val_is_middle_value formula-decl nil mid_val_equiv nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (S formal-const-decl "posnat" single_stage_bag_mid_val nil)
    (MSG type-eq-decl nil single_stage_bag_mid_val nil)
    (<= const-decl "bool" reals nil))
   719 540 t shostak)))


$$$make_bag.pvs
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Lee Pike 
% leepike @ galois.com
% Formal Methods Group, NASA Langley Research Center
%
% PVS Version 3.1
%
% PURPOSE: Collect values into a bag.  Some misc. results on 
%          finiteness.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

make_bag[S: posnat, T: NONEMPTY_TYPE]: 

THEORY

BEGIN

IMPORTING
  structures@finite_bags[T],
  structures@finite_bags_inductions[below(S)]

eligible_set  : VAR finite_set[below(S)]

actual       : VAR [below(S) -> T]

v            : VAR T
s,a          : VAR below(S)
P            : VAR pred[below(S)]
Set          : VAR finite_set[below(S)]

finite_intersect: LEMMA
  is_finite[below(S)]({s | Set(s) AND P(s)})

finite_add: LEMMA
  is_finite[below(S)]({s | add(a, Set)(s) AND P(s)})

finite_empty: LEMMA
  is_finite[below(S)]({s | emptyset[below(S)](s) AND P(s)})

make_bag(eligible_set, actual): finite_bag[T] =
  LAMBDA v:
    card({s | eligible_set(s) AND actual(s) = v})

card_make_bag: LEMMA
  card(make_bag(eligible_set, actual)) = card(eligible_set)

END make_bag

$$$make_bag.prf
(make_bag
 (finite_intersect 0
  (finite_intersect-1 nil 3287407616 3287407694
   ("" (skosimp*)
    (("" (lemma "finite_intersection2[below(S)]")
      (("" (inst?)
        (("" (inst - "P!1")
          (("" (expand "intersection")
            (("" (expand "member") (("" (propax) nil))))))))))))
    nil)
   proved
   ((below type-eq-decl nil naturalnumbers nil)
    (S formal-const-decl "posnat" make_bag nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (finite_intersection2 judgement-tcc nil finite_sets nil)
    (pred type-eq-decl nil defined_types nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil))
   129 90 nil nil))
 (finite_add 0
  (finite_add-1 nil 3287407665 3287407694
   ("" (skosimp*)
    (("" (lemma "finite_intersection2[below(S)]")
      (("" (inst - "add(a!1, Set!1)" "P!1")
        (("" (expand "intersection")
          (("" (expand "member") (("" (propax) nil))))))))))
    nil)
   proved
   ((below type-eq-decl nil naturalnumbers nil)
    (S formal-const-decl "posnat" make_bag nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (finite_intersection2 judgement-tcc nil finite_sets nil)
    (intersection const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (pred type-eq-decl nil defined_types nil)
    (add const-decl "(nonempty?)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil))
   123 80 nil nil))
 (finite_empty 0
  (finite_empty-1 nil 3287407688 3287407694
   ("" (skosimp*)
    (("" (lemma "finite_intersection2[below(S)]")
      (("" (inst?)
        (("" (inst - "P!1")
          (("" (expand "intersection")
            (("" (expand "member") (("" (propax) nil))))))))))))
    nil)
   proved
   ((below type-eq-decl nil naturalnumbers nil)
    (S formal-const-decl "posnat" make_bag nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (finite_intersection2 judgement-tcc nil finite_sets nil)
    (pred type-eq-decl nil defined_types nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (emptyset const-decl "set" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil))
   81 80 nil nil))
 (make_bag_TCC1 0
  (make_bag_TCC1-1 nil 3287407694 3287408276
   ("" (skosimp*) (("" (use "finite_intersect") nil nil)) nil) proved
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (S formal-const-decl "posnat" make_bag nil)
    (below type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (T formal-nonempty-type-decl nil make_bag nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (finite_intersect formula-decl nil make_bag nil))
   10630 500 t shostak))
 (make_bag_TCC2 0
  (make_bag_TCC2-1 nil 3287407694 3287412309
   ("" (skosimp*)
    (("" (expand "is_finite")
      (("" (expand "bag_to_set")
        (("" (typepred! "eligible_set!1")
          (("" (expand "is_finite" +)
            ((""
              (inst + "S" "LAMBDA (v: T): IF  card[below(S)]
                         ({s | eligible_set!1(s) AND actual!1(s) = v}) > 0 THEN min({s | actual!1(s) = v}) ELSE 0 ENDIF")
              (("1" (expand "injective?")
                (("1" (skosimp*)
                  (("1" (assert) (("1" (grind) nil nil)) nil)) nil))
                nil)
               ("2" (skosimp*) (("2" (grind) nil nil)) nil)
               ("3" (grind) nil nil)
               ("4" (skosimp*)
                (("4" (lemma "nonempty_card[below(S)]")
                  (("4"
                    (inst -
                     "{s | eligible_set!1(s) AND actual!1(s) = v!1}")
                    (("1" (assert)
                      (("1" (expand "nonempty?")
                        (("1" (expand "empty?")
                          (("1" (skosimp*)
                            (("1" (inst?)
                              (("1"
                                (expand "member")
                                (("1" (flatten) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (use "finite_intersect") nil nil))
                    nil))
                  nil))
                nil)
               ("5" (skosimp*) (("5" (use "finite_intersect") nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((is_finite const-decl "bool" finite_bags "bags/")
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (S formal-const-decl "posnat" make_bag nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (actual!1 skolem-const-decl "[below(S) -> T]" make_bag nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (eligible_set!1 skolem-const-decl "finite_set[below(S)]" make_bag
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil make_bag nil)
    (nonempty? const-decl "bool" sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (min const-decl "{a | S(a) AND (FORALL x: S(x) IMPLIES a <= x)}"
         min_nat nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (restrict const-decl "R" restrict nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (injective? const-decl "bool" functions nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (pred type-eq-decl nil defined_types nil)
    (finite_intersect formula-decl nil make_bag nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (v!1 skolem-const-decl "T" make_bag nil)
    (bag_to_set const-decl "set[T]" bags_to_sets "bags/"))
   4027225 31270 t shostak))
 (card_make_bag 0
  (card_make_bag-3 nil 3287223081 3287408247
   ("" (skolem + ("f" "_"))
    (("" (use "finite_set_induction_rest[below(S)]")
      (("" (split)
        (("1" (propax) nil nil)
         ("2" (hide 2)
          (("2" (expand "make_bag")
            (("2" (use "card_emptyset[below(S)]")
              (("2" (replace -)
                (("2" (expand "card")
                  (("2" (expand "bag_to_set")
                    (("2" (use "sum_emptyset[T,real,0,+]")
                      (("1" (expand "emptyset")
                        (("1" (replace -2) (("1" (assert) nil nil))
                          nil))
                        nil)
                       ("2" (hide -1 2)
                        (("2" (skosimp*)
                          (("2" (use "finite_empty") nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (hide 2)
          (("3" (skosimp*)
            (("3" (expand "rest")
              (("3"
                (case-replace
                 "make_bag(SS!1, f) = insert(f(choose(SS!1)), make_bag(remove(choose(SS!1), SS!1), f))")
                (("1" (hide -1)
                  (("1" (use "card_bag_insert[T]")
                    (("1" (replace -1 :hide? t)
                      (("1" (replace -1 :hide? t)
                        (("1" (use "card_remove[below(S)]")
                          (("1" (replace - :hide? t)
                            (("1" (lift-if)
                              (("1"
                                (split)
                                (("1"
                                  (flatten)
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -1 2)
                  (("2" (expand "insert")
                    (("2" (decompose-equality +)
                      (("2" (lift-if)
                        (("2" (split)
                          (("1" (flatten)
                            (("1" (replace -1 :dir rl :hide? t)
                              (("1"
                                (expand "make_bag")
                                (("1"
                                  (case-replace
                                   "{s | SS!1(s) AND f(s) = f(choose(SS!1))} = union({s | remove(choose(SS!1), SS!1)(s) AND f(s) = f(choose(SS!1))}, singleton[below(S)](choose(SS!1)))")
                                  (("1"
                                    (hide -1)
                                    (("1"
                                      (use "card_union[below(S)]")
                                      (("1"
                                        (replace -1 :hide? t)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (use
                                             "card_singleton[below(S)]")
                                            (("1"
                                              (replace - :hide? t)
                                              (("1"
                                                (case-replace
                                                 "card(intersection({s |
                            remove(choose(SS!1), SS!1)(s) AND
                             f(s) = f(choose(SS!1))},
                         singleton[below(S)](choose(SS!1)))) = 0")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (use
                                                     "empty_card[below(S)]")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (hide 2)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (use "finite_intersect")
                                          (("2"
                                            (hide 2)
                                            (("2"
                                              (expand "remove")
                                              (("2"
                                                (expand "member")
                                                (("2"
                                                  (use
                                                   "finite_intersect")
                                                  (("2"
                                                    (hide 2)
                                                    (("2"
                                                      (expand "choose")
                                                      (("2"
                                                        (expand "/=")
                                                        (("2"
                                                          (expand
                                                           "is_finite")
                                                          (("2"
                                                            (inst
                                                             +
                                                             "S"
                                                             _)
                                                            (("2"
                                                              (inst
                                                               +
                                                               "LAMBDA s: s")
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (skosimp*)
                                                                (("2"
                                                                  (inst
                                                                   +
                                                                   "0")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (expand "union")
                                      (("2"
                                        (decompose-equality +)
                                        (("2"
                                          (iff)
                                          (("2"
                                            (prop)
                                            (("1" (grind) nil nil)
                                             ("2" (grind) nil nil)
                                             ("3" (grind) nil nil)
                                             ("4"
                                              (grind)
                                              (("4"
                                                (typepred! "SS!1")
                                                (("4"
                                                  (use
                                                   "epsilon_ax[below(S)]")
                                                  (("1"
                                                    (split)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (expand "empty?")
                                                      (("2"
                                                        (skosimp*)
                                                        (("2"
                                                          (expand
                                                           "member")
                                                          (("2"
                                                            (inst?)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (inst + "0")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("5" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (expand "make_bag")
                              (("2"
                                (case-replace
                                 "{s | SS!1(s) AND f(s) = x!1} = {s | remove(choose(SS!1), SS!1)(s) AND f(s) = x!1}")
                                (("2"
                                  (hide 3)
                                  (("2"
                                    (decompose-equality +)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((bag_to_set const-decl "set[T]" bags_to_sets "bags/")
    (finite_empty formula-decl nil make_bag nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (emptyset const-decl "set" sets nil)
    (f skolem-const-decl "[below(S) -> T]" make_bag nil)
    (sum_emptyset formula-decl nil finite_sets_sum "finite_sets/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (card_emptyset formula-decl nil finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (insert const-decl "bag" bags "bags/")
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (remove const-decl "set" sets nil)
    (card_bag_insert formula-decl nil finite_bags "bags/")
    (card_remove formula-decl nil finite_sets nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (epsilon_ax formula-decl nil epsilons nil)
    (injective? const-decl "bool" functions nil)
    (below type-eq-decl nil nat_types nil)
    (epsilon const-decl "T" epsilons nil)
    (TRUE const-decl "bool" booleans nil)
    (finite_intersect formula-decl nil make_bag nil)
    (card_singleton formula-decl nil finite_sets nil)
    (intersection const-decl "set" sets nil)
    (empty_card formula-decl nil finite_sets nil)
    (member const-decl "bool" sets nil)
    (/= const-decl "boolean" notequal nil)
    (SS!1 skolem-const-decl "non_empty_finite_set[below(S)]" make_bag
     nil)
    (card_union formula-decl nil finite_sets nil)
    (union const-decl "set" sets nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (rest const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (pred type-eq-decl nil defined_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (T formal-nonempty-type-decl nil make_bag nil)
    (bag type-eq-decl nil bags "bags/")
    (is_finite const-decl "bool" finite_bags "bags/")
    (finite_bag type-eq-decl nil finite_bags "bags/")
    (card const-decl "nat" finite_bags "bags/")
    (make_bag const-decl "finite_bag[T]" make_bag nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (S formal-const-decl "posnat" make_bag nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (finite_set_induction_rest formula-decl nil finite_sets_inductions
     "finite_sets/"))
   522138 11810 t nil)
  (card_make_bag-2 nil 3287157220 3287222888
   ("" (use "finite_set_induction_rest[below(S)]")
    (("" (skolem + ("actual!1" _))
      ((""
        (inst -
         "LAMBDA (S: finite_set[below(S)]): card(make_bag(S, actual!1)) =
       card(S)")
        (("" (split)
          (("1" (propax) nil nil)
           ("2" (hide 2)
            (("2" (expand "make_bag")
              (("2" (expand "emptyset")
                (("2" (use "empty_card[below(S)]")
                  (("1" (expand "empty?")
                    (("1" (expand "member")
                      (("1" (replace -)
                        (("1" (expand "card")
                          (("1" (expand "bag_to_set")
                            (("1" (expand "sum")
                              (("1"
                                (lift-if)
                                (("1"
                                  (split)
                                  (("1" (propax) nil nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (expand "empty?")
                                      (("2"
                                        (skosimp*)
                                        (("2"
                                          (expand "member")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2) (("2" (postpone) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (skosimp*)
            (("3" (hide 2)
              (("3" (expand "make_bag")
                (("3" (expand "card")
                  (("3" (expand "bag_to_set")
                    (("3" (use "card_rest[below(S)]")
                      (("3" (split)
                        (("1" (replace -1 :hide? t)
                          (("1" (isolate -1 r 1)
                            (("1" (replace -1 :dir rl :hide? t)
                              (("1"
                                (case-replace
                                 "{t: T | card({s | rest(SS!1)(s) AND actual!1(s) = t}) > 0} = rest({t: T | card({s | rest(SS!1)(s) AND actual!1(s) = t}) > 0})")
                                (("1" (postpone) nil nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (decompose-equality +)
                                    (("1"
                                      (iff)
                                      (("1"
                                        (expand "rest")
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (expand "remove")
                                            (("1"
                                              (expand "choose")
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (postpone)
                                                  nil
                                                  nil)
                                                 ("2"
                                                  (postpone)
                                                  nil
                                                  nil)
                                                 ("3"
                                                  (postpone)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (postpone) nil nil))
                                    nil))
                                  nil)
                                 ("3" (postpone) nil nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2" (postpone) nil nil)) nil)
                             ("3" (skosimp*)
                              (("3"
                                (hide-all-but 1)
                                (("3" (postpone) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (postpone) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 58208029 710 t nil)
  (card_make_bag-1 nil 3287157165 3287157204
   ("" (expand "card")
    (("" (expand "bag_to_set")
      (("" (expand "make_bag")
        (("" (expand "member")
          (("" (skolem + ("AA" "_"))
            (("" (measure-induct+ "card(eligible_set)" "eligible_set")
              (("1" (use "Empty_Image")
                (("1" (use "Finite_From_Finite")
                  (("1" (use "Finite_Image")
                    (("1" (case "empty?(x!1)")
                      (("1" (inst?)
                        (("1" (assert)
                          (("1"
                            (case "empty?({t: T | card({s | x!1(s) AND AA(s) = t}) > 0})")
                            (("1" (use "sum_emptyset")
                              (("1"
                                (lemma "emptyset_is_empty?")
                                (("1"
                                  (inst
                                   -
                                   "{t: T | card({s | x!1(s) AND AA(s) = t}) > 0}")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replace -)
                                      (("1"
                                        (use "card_empty?[S]")
                                        (("1" (assert) nil)))))))))))))
                             ("2" (propax) nil)
                             ("3" (propax) nil)))))))
                       ("2" (inst -4 "rest(x!1)")
                        (("2" (use "card_rest[S]")
                          (("2" (assert)
                            (("2" (isolate -1 r 1)
                              (("2"
                                (replace -1 :dir rl :hide? t)
                                (("2"
                                  (replace -3 :dir rl :hide? t)
                                  (("2"
                                    (expand "sum" 3 1)
                                    (("2"
                                      (use "sum_rest")
                                      (("2"
                                        (split)
                                        (("1"
                                          (case
                                           "1 +
                                      sum({t: T | card({s | rest(x!1)(s) AND AA(s) = t}) > 0},
                                          LAMBDA (t: T): card({s | rest(x!1)(s) AND AA(s) = t})) = sum({t: T | card({s | x!1(s) AND AA(s) = t}) > 0},
                                         LAMBDA (t: T): card({s | x!1(s) AND AA(s) = t}))")
                                          (("1"
                                            (replace - :dir rl)
                                            (("1" (propax) nil)))
                                           ("2"
                                            (hide -1 4)
                                            (("2"
                                              (case
                                               "FORALL (XX: finite_set[S]): 1 +
                      sum({t: T | card({s | rest(XX)(s) AND AA(s) = t}) > 0},
                          LAMBDA (t: T): card({s | rest(XX)(s) AND AA(s) = t}))
                      =
                      sum({t: T | card({s | XX(s) AND AA(s) = t}) > 0},
                          LAMBDA (t: T): card({s | XX(s) AND AA(s) = t}))")
                                              (("1" (inst?) nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (measure-induct+
                                                   "card(XX)"
                                                   "XX")
                                                  (("1"
                                                    (case
                                                     "empty?(x!2)")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (propax)
                                                          nil)
                                                         ("2"
                                                          (postpone)
                                                          nil)))))
                                                     ("2"
                                                      (inst
                                                       -
                                                       "rest(x!2)")
                                                      (("2"
                                                        (split)
                                                        (("1"
                                                          (expand
                                                           "sum"
                                                           2
                                                           1)
                                                          (("1"
                                                            (lift-if)
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (hide
                                                                     -2)
                                                                    (("1"
                                                                      (case
                                                                       "singleton?({t: T | card({s | x!2(s) AND AA(s) = t}) > 0})")
                                                                      (("1"
                                                                        (postpone)
                                                                        nil)
                                                                       ("2"
                                                                        (postpone)
                                                                        nil)
                                                                       ("3"
                                                                        (postpone)
                                                                        nil)))))))))
                                                               ("2"
                                                                (postpone)
                                                                nil)))))))
                                                         ("2"
                                                          (postpone)
                                                          nil)))))))
                                                   ("2"
                                                    (hide 2 3 4)
                                                    (("2"
                                                      (postpone)
                                                      nil)))
                                                   ("3"
                                                    (hide 2)
                                                    (("3"
                                                      (postpone)
                                                      nil)))
                                                   ("4"
                                                    (hide 2)
                                                    (("4"
                                                      (postpone)
                                                      nil)))
                                                   ("5"
                                                    (hide 2)
                                                    (("5"
                                                      (postpone)
                                                      nil)))))))
                                               ("3"
                                                (skosimp*)
                                                (("3"
                                                  (use "Finite_Image")
                                                  nil)))
                                               ("4"
                                                (skosimp*)
                                                (("4"
                                                  (use
                                                   "Finite_From_Finite")
                                                  nil)))
                                               ("5"
                                                (skosimp*)
                                                (("5"
                                                  (use "Finite_Image")
                                                  (("5"
                                                    (hide 2)
                                                    (("5"
                                                      (postpone)
                                                      nil)))))))
                                               ("6"
                                                (skosimp*)
                                                (("6"
                                                  (hide 2)
                                                  (("6"
                                                    (postpone)
                                                    nil)))))))))
                                           ("3" (propax) nil)
                                           ("4"
                                            (hide-all-but (-2 -3 1))
                                            (("4"
                                              (lemma
                                               "finite_subset[T]")
                                              (("4"
                                                (inst?)
                                                (("1"
                                                  (inst
                                                   -
                                                   "{v: T | card({s | x!1(s) AND AA(s) = v}) > 0}")
                                                  (("1"
                                                    (split)
                                                    (("1" (propax) nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (expand
                                                         "subset?")
                                                        (("2"
                                                          (skosimp*)
                                                          (("2"
                                                            (expand
                                                             "member")
                                                            (("2"
                                                              (case
                                                               "subset?({s | rest[S](x!1)(s) AND AA(s) = x!2}, {s | x!1(s) AND AA(s) = x!2})")
                                                              (("1"
                                                                (use
                                                                 "card_subset[S]")
                                                                (("1"
                                                                  (assert)
                                                                  nil)
                                                                 ("2"
                                                                  (use
                                                                   "Finite_From_Finite")
                                                                  nil)
                                                                 ("3"
                                                                  (use
                                                                   "Finite_From_Finite")
                                                                  (("3"
                                                                    (use
                                                                     "finite_subset[S]")
                                                                    (("3"
                                                                      (split)
                                                                      (("1"
                                                                        (propax)
                                                                        nil)
                                                                       ("2"
                                                                        (propax)
                                                                        nil)))))))))
                                                               ("2"
                                                                (grind)
                                                                nil)))))))))))))))
                                                 ("2"
                                                  (skosimp*)
                                                  (("2"
                                                    (use
                                                     "finite_subset[S]")
                                                    (("2"
                                                      (split)
                                                      (("1"
                                                        (propax)
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (grind)
                                                          nil)))))))))))))))
                                           ("5"
                                            (skosimp*)
                                            (("5"
                                              (hide-all-but (-3 1))
                                              (("5"
                                                (inst?)
                                                (("5"
                                                  (use
                                                   "finite_subset[S]")
                                                  (("5"
                                                    (split)
                                                    (("1" (propax) nil)
                                                     ("2"
                                                      (grind)
                                                      nil)))))))))))))
                                         ("2"
                                          (propax)
                                          nil)))))))))))))))))))))))))))
               ("2" (use "Finite_Image") nil)
               ("3" (use "Finite_From_Finite") nil))))))))))))
    nil)
   unfinished nil 37478 1280 t nil)))


$$$maj_equiv.pvs
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Lee Pike 
% leepike @ galois.com
% Formal Methods Group, NASA Langley Research Center
%
% PVS Version 3.1
%
% PURPOSE:  Prove the equivlance between majority voting over
%           bags and majority voting over vectors (or functions)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

maj_equiv[S: posnat, T: NONEMPTY_TYPE]: 

THEORY

BEGIN

IMPORTING
  make_bag[S, T],
  majority_properties[S, T]

good_senders : VAR finite_set[below(S)]
eligible_set : VAR finite_set[below(S)]

actual       : VAR [below(S) -> T]

maj_is_majority: LEMMA
  majority(eligible_set, actual, no_majority) = 
  maj(make_bag(eligible_set, actual))

END maj_equiv

$$$maj_equiv.prf
(maj_equiv
 (maj_is_majority 0
  (maj_is_majority-1 nil 3287144024 3287148098
   ("" (skosimp*)
    (("" (expand "majority")
      (("" (expand "maj")
        (("" (lift-if)
          (("" (lift-if)
            (("" (prop)
              (("1" (hide 1)
                (("1" (expand "empty?")
                  (("1" (expand "majority_exists?")
                    (("1" (skosimp*)
                      (("1" (inst?)
                        (("1" (expand "member")
                          (("1" (expand "maj?")
                            (("1" (expand "majority?")
                              (("1"
                                (use "card_make_bag")
                                (("1"
                                  (replace -)
                                  (("1"
                                    (expand "make_bag")
                                    (("1"
                                      (expand "votes_for")
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (expand "majority_exists?")
                  (("2" (expand "majority?")
                    (("2" (expand "maj?")
                      (("2" (expand "the")
                        (("2" (use "card_make_bag")
                          (("2" (replace -)
                            (("2" (expand "make_bag")
                              (("2"
                                (expand "votes_for")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (expand "empty?")
                (("3" (skosimp*)
                  (("3" (expand "member")
                    (("3" (expand "majority_exists?")
                      (("3" (inst + "x!1")
                        (("3" (hide 2)
                          (("3" (expand "maj?")
                            (("3" (expand "majority?")
                              (("3"
                                (use "card_make_bag")
                                (("3"
                                  (replace -)
                                  (("3"
                                    (expand "make_bag")
                                    (("3"
                                      (expand "votes_for")
                                      (("3" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((majority const-decl "T" majority_properties nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (majority? const-decl "bool" majority_properties nil)
    (votes_for const-decl "finite_set[below(N)]" good_vote_for nil)
    (make_bag const-decl "finite_bag" make_bag nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (S formal-const-decl "posnat" maj_equiv nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (card_make_bag formula-decl nil make_bag nil)
    (maj? const-decl "bool" majority_vote "bags/")
    (T formal-nonempty-type-decl nil maj_equiv nil)
    (majority_exists? const-decl "bool" majority_properties nil)
    (the const-decl "(p)" sets nil)
    (maj const-decl "T" majority_vote "bags/"))
   211688 11310 t shostak)))


$$$good_vote_for.pvs
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% NASA Langley Formal Methods
% http://shemesh.larc.nasa.gov/fm/spider/fm-now-spider.html
%
% PVS 3.1
%
% Design       : SPIDER Version 2
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

good_vote_for[N: posnat, T: TYPE]: THEORY

  BEGIN

  IMPORTING
    finite_sets@finite_sets_below[N]

  n: VAR below(N)
  t: VAR T
  f, f1, f2: VAR [below(N) -> T]
  good, eligible: VAR finite_set[below(N)]

  good_vote_for?(good, f, t) : bool =
    FORALL n: good(n) IMPLIES f(n) = t

  eligible_symmetric?(eligible, f1, f2): bool =
    FORALL n: eligible(n) IMPLIES f1(n) = f2(n)

  votes_for(eligible, f, t): finite_set[below(N)] = {n | eligible(n) AND f(n) = t}

  votes_for_subset: LEMMA
    subset?(votes_for(eligible, f, t), eligible)

  eligible_symmetric_vote_same: LEMMA
      eligible_symmetric?(eligible, f1, f2) 
    IMPLIES
      votes_for(eligible, f1, t) = votes_for(eligible, f2, t)

  END good_vote_for

$$$good_vote_for.prf
(good_vote_for
 (votes_for_TCC1 0
  (votes_for_TCC1-1 nil 3276528241 3276530105
   ("" (skosimp*) (("" (rewrite "finite_below[N]") nil nil)) nil)
   proved
   ((finite_below formula-decl nil finite_sets_below "finite_sets/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (T formal-type-decl nil good_vote_for nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" good_vote_for nil))
   8248 1010 t shostak))
 (votes_for_subset 0
  (votes_for_subset-1 nil 3276528629 3276529994
   ("" (skosimp*)
    (("" (auto-rewrite-defs)
      (("" (assert) (("" (skosimp*) nil nil)) nil)) nil))
    nil)
   proved
   ((votes_for const-decl "finite_set[below(N)]" good_vote_for nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil))
   9534 1990 t nil))
 (eligible_symmetric_vote_same 0
  (eligible_symmetric_vote_same-1 nil 3276530010 3276530051
   ("" (skosimp*)
    (("" (apply-extensionality :hide? t)
      (("" (expand "votes_for")
        (("" (expand "eligible_symmetric?")
          (("" (inst?) (("" (iff) (("" (ground) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" good_vote_for nil)
    (below type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (votes_for const-decl "finite_set[below(N)]" good_vote_for nil)
    (T formal-type-decl nil good_vote_for nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (eligible_symmetric? const-decl "bool" good_vote_for nil))
   41454 4010 t shostak)))


$$$pigeonhole.pvs
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% NASA Langley Formal Methods
% http://shemesh.larc.nasa.gov/fm/spider/fm-now-spider.html
%
% PVS 3.1
%
% Design       : SPIDER Version 2
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

pigeonhole[T: TYPE]: THEORY

BEGIN

  A, A1, A2, B, C, S, S1, S2: VAR finite_set[T]
  x: VAR T
  
  pigeonhole: THEOREM
      card(A) + card(B) > card(union(A,B)) 
    IMPLIES
      EXISTS x: A(x) AND B(x)

  majority_subset?(A,S): bool = 
    2*card(A) > card(S) AND subset?(A,S)

  majority_subset_nonempty: LEMMA
      majority_subset?(A,S) 
    IMPLIES 
      NOT empty?(S)

  majority_nonempty: LEMMA
      majority_subset?(A,S) 
    IMPLIES 
      NOT empty?(A)

  majority_pigeonhole: THEOREM
      2*card(A) > card(S) AND 
      subset?(A,S) AND
      2*card(B) >= card(S) AND 
      subset?(B,S) 
    IMPLIES
      EXISTS x: A(x) AND B(x)

  byzantine_majority_subset?(A,S): bool = 
    3*card(A) > 2*card(S) AND 
    subset?(A,S) 

  byzantine_majority_subset_nonempty: LEMMA
      byzantine_majority_subset?(A,S) 
    IMPLIES 
      NOT empty?(S)

  byzantine_majority_nonempty: LEMMA
      byzantine_majority_subset?(A,S) 
    IMPLIES 
      NOT empty?(A)

  byzantine_majority_pigeonhole: THEOREM
      3*card(A) > 2*card(S) AND 
      subset?(A,S) AND
      3*card(B) >=  card(S) AND 
      subset?(B,S) 
    IMPLIES
      EXISTS x: 
        A(x) AND B(x)

  byzantine_majority_pigeonhole2: THEOREM
      3*card(A) >= 2*card(S) AND 
      subset?(A,S) AND
      3*card(B) > card(S) AND 
      subset?(B,S) 
    IMPLIES
      EXISTS x: 
        A(x) AND B(x)

  byzantine_overlap_pigeonhole_sym: THEOREM
      card(S1) >= card(S2) AND
      byzantine_majority_subset?(A,S1) AND
      byzantine_majority_subset?(A,S2) AND
      3*card(B) >= 2*card(S1) AND 
      subset?(B,S1) AND
      3*card(C) >= 2*card(S2) AND 
      subset?(C,S2) 
    IMPLIES
      EXISTS x: 
        A(x) AND B(x) AND C(x)

  byzantine_overlap_pigeonhole: THEOREM
      byzantine_majority_subset?(A,S1) AND
      byzantine_majority_subset?(A,S2) AND
      3*card(B) >= 2*card(S1) AND 
      subset?(B,S1) AND
      3*card(C) >= 2*card(S2) AND 
      subset?(C,S2) 
    IMPLIES
      EXISTS x: 
        A(x) AND B(x) AND C(x)

END pigeonhole

$$$pigeonhole.prf
(pigeonhole
 (pigeonhole 0
  (pigeonhole-1 nil 3266842135 3266842233
   ("" (skosimp*)
    (("" (case "card(intersection(A!1, B!1)) >= 1")
      (("1" (hide -2)
        (("1" (forward-chain "card_1_has_1")
          (("1" (hide -2)
            (("1" (skosimp*)
              (("1" (expand* "intersection" "member") (("1" (inst?) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (use "card_plus[T]") (("2" (assert) nil nil)) nil))
      nil))
    nil)
   unchecked
   ((intersection const-decl "set" sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil) (T formal-type-decl nil pigeonhole nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (card_1_has_1 formula-decl nil finite_sets nil)
    (member const-decl "bool" sets nil)
    (card_plus formula-decl nil finite_sets nil))
   54744 5690 t nil))
 (majority_subset_nonempty 0
  (majority_subset_nonempty-1 nil 3267459600 3267459694
   ("" (skosimp*)
    (("" (expand "majority_subset?")
      (("" (flatten)
        (("" (use "nonempty_card[T]")
          (("" (assert)
            (("" (expand* "nonempty?" "empty?" "subset?" "member")
              (("" (skosimp*)
                (("" (inst?) (("" (inst?) (("" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((majority_subset? const-decl "bool" pigeonhole nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (T formal-type-decl nil pigeonhole nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil))
   93831 7330 t shostak))
 (majority_nonempty 0
  (majority_nonempty-1 nil 3276456345 3276456628
   ("" (skosimp*)
    (("" (lemma "majority_subset_nonempty")
      (("" (inst?)
        (("" (assert)
          (("" (expand "majority_subset?")
            (("" (flatten)
              (("" (lemma "card_empty?[T]")
                (("" (inst-cp - "S!1")
                  (("" (inst - "A!1") (("" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((majority_subset_nonempty formula-decl nil pigeonhole nil)
    (card_empty? formula-decl nil finite_sets nil)
    (majority_subset? const-decl "bool" pigeonhole nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil pigeonhole nil))
   282760 11350 t shostak))
 (majority_pigeonhole 0
  (majority_pigeonhole-1 nil 3266842135 3266842142
   ("" (skosimp*)
    (("" (case "card(union(A!1,B!1)) <= card(S!1)")
      (("1" (use "pigeonhole") (("1" (assert) nil nil)) nil)
       ("2" (hide -1 -3 2)
        (("2" (rewrite "card_subset")
          (("2" (rewrite "union_upper_bound") nil nil)) nil))
        nil))
      nil))
    nil)
   unchecked
   ((union const-decl "set" sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil) (T formal-type-decl nil pigeonhole nil)
    (<= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (pigeonhole formula-decl nil pigeonhole nil)
    (card_subset formula-decl nil finite_sets nil)
    (union_upper_bound formula-decl nil sets_lemmas nil))
   905 830 nil nil))
 (byzantine_majority_subset_nonempty 0
  (byzantine_majority_subset_nonempty-1 nil 3278759253 3278759397
   ("" (skosimp*)
    (("" (lemma "majority_subset_nonempty")
      (("" (expand "majority_subset?")
        (("" (expand "byzantine_majority_subset?")
          (("" (inst?) (("" (flatten) (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((majority_subset_nonempty formula-decl nil pigeonhole nil)
    (byzantine_majority_subset? const-decl "bool" pigeonhole nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil pigeonhole nil)
    (majority_subset? const-decl "bool" pigeonhole nil))
   25874 2130 t nil))
 (byzantine_majority_nonempty 0
  (byzantine_majority_nonempty-1 nil 3278773608 3278773656
   ("" (skosimp*)
    (("" (lemma "byzantine_majority_subset_nonempty")
      (("" (inst?)
        (("" (assert)
          (("" (expand "byzantine_majority_subset?")
            (("" (flatten)
              (("" (lemma "card_empty?[T]")
                (("" (inst-cp - "S!1")
                  (("" (inst - "A!1") (("" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((byzantine_majority_subset_nonempty formula-decl nil pigeonhole nil)
    (card_empty? formula-decl nil finite_sets nil)
    (byzantine_majority_subset? const-decl "bool" pigeonhole nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil pigeonhole nil))
   44826 3040 t nil))
 (byzantine_majority_pigeonhole 0
  (byzantine_majority_pigeonhole-1 nil 3266842135 3266842143
   ("" (skosimp*)
    (("" (case "card(union(A!1,B!1)) <= card(S!1)")
      (("1" (hide -3 -5)
        (("1" (use "pigeonhole") (("1" (assert) nil nil)) nil)) nil)
       ("2" (hide -1 -3 2)
        (("2" (rewrite "card_subset")
          (("2" (rewrite "union_upper_bound") nil nil)) nil))
        nil))
      nil))
    nil)
   unchecked
   ((union const-decl "set" sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil) (T formal-type-decl nil pigeonhole nil)
    (<= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (pigeonhole formula-decl nil pigeonhole nil)
    (card_subset formula-decl nil finite_sets nil)
    (union_upper_bound formula-decl nil sets_lemmas nil))
   917 830 nil nil))
 (byzantine_majority_pigeonhole2 0
  (byzantine_majority_pigeonhole2-1 nil 3266842135 3266842144
   ("" (skosimp*)
    (("" (case "card(union(A!1,B!1)) <= card(S!1)")
      (("1" (hide -3 -5)
        (("1" (use "pigeonhole") (("1" (assert) nil nil)) nil)) nil)
       ("2" (hide -1 -3 2)
        (("2" (rewrite "card_subset")
          (("2" (rewrite "union_upper_bound") nil nil)) nil))
        nil))
      nil))
    nil)
   unchecked
   ((union const-decl "set" sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil) (T formal-type-decl nil pigeonhole nil)
    (<= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (pigeonhole formula-decl nil pigeonhole nil)
    (card_subset formula-decl nil finite_sets nil)
    (union_upper_bound formula-decl nil sets_lemmas nil))
   1002 910 nil nil))
 (byzantine_overlap_pigeonhole_sym 0
  (byzantine_overlap_pigeonhole_sym-1 nil 3266842135 3266842333
   ("" (expand "byzantine_majority_subset?")
    (("" (skosimp*)
      (("" (case "3*card(intersection(A!1,B!1)) > card(S1!1)")
        (("1" (hide -3 -4 -5 -7 -8)
          (("1" (use "byzantine_majority_pigeonhole2")
            (("1" (assert)
              (("1" (prop)
                (("1" (hide-all-but (-1 1))
                  (("1" (expand* "intersection" "member")
                    (("1" (skosimp*)
                      (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                    nil))
                  nil)
                 ("2" (hide-all-but (-3 1))
                  (("2" (use "intersection_subset1[T]")
                    (("2" (forward-chain "subset_transitive[T]") nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide -1 -4 -5 -8 -9 2)
          (("2" (lemma "card_plus[T]")
            (("2" (inst?)
              (("2" (lemma "union_upper_bound[T]")
                (("2" (inst - "A!1" "B!1" "S1!1")
                  (("2" (assert)
                    (("2" (forward-chain "card_subset")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((union const-decl "set" sets nil)
    (card_subset formula-decl nil finite_sets nil)
    (union_upper_bound formula-decl nil sets_lemmas nil)
    (card_plus formula-decl nil finite_sets nil)
    (subset_transitive formula-decl nil sets_lemmas nil)
    (intersection_subset1 formula-decl nil sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (byzantine_majority_pigeonhole2 formula-decl nil pigeonhole nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (T formal-type-decl nil pigeonhole nil) (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (intersection const-decl "set" sets nil)
    (byzantine_majority_subset? const-decl "bool" pigeonhole nil))
   70689 12620 t nil))
 (byzantine_overlap_pigeonhole 0
  (byzantine_overlap_pigeonhole-1 nil 3266842135 3266842147
   ("" (skosimp*)
    (("" (case "card(S1!1) >= card(S2!1)")
      (("1" (use "byzantine_overlap_pigeonhole_sym") (("1" (prop) nil nil))
        nil)
       ("2" (lemma "byzantine_overlap_pigeonhole_sym")
        (("2" (inst - "A!1" "C!1" "B!1" "S2!1" "S1!1")
          (("2" (assert)
            (("2" (skosimp*) (("2" (inst?) (("2" (prop) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil) (T formal-type-decl nil pigeonhole nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (byzantine_overlap_pigeonhole_sym formula-decl nil pigeonhole nil))
   862 820 nil nil)))


$$$majority_properties.pvs
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% NASA Langley Formal Methods
% http://shemesh.larc.nasa.gov/fm/spider/fm-now-spider.html
%
% PVS 3.1
%
% Design       : SPIDER Version 2
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


majority_properties[N: posnat, T:TYPE+]: THEORY

  BEGIN

  IMPORTING 
    pigeonhole[below(N)],
    good_vote_for[N, T],
    structures@majority_vote[T]

  f, f1, f2: VAR [below(N) -> T]
  
  n : VAR below(N)

  eligible, eligible1, eligible2, good, good1, good2: VAR finite_set[below(N)]

  default, t, t1, t2: var T

  majority?(eligible, f)(t) : bool = 
    2*card(votes_for(eligible, f, t)) > card(eligible)

  majority_exists?(eligible, f) : bool = 
    EXISTS t: majority?(eligible, f)(t)

  good_vote_for_majority: LEMMA
      majority_subset?(good, eligible) AND
      good_vote_for?(good, f, t) 
    IMPLIES
      majority?(eligible, f)(t)

  votes_for_majority_subset: LEMMA
      majority?(eligible, f)(t) 
    IMPLIES
      majority_subset?(votes_for(eligible, f, t), eligible)

  eligible_majority_unique: LEMMA
      majority?(eligible, f)(t1) AND
      majority?(eligible, f)(t2) 
    IMPLIES 
      t1 = t2

  majority_welldefinedness: LEMMA
      majority_exists?(eligible, f) 
    IMPLIES
      singleton?(majority?(eligible, f))

  the_majority_unique: LEMMA
      majority?(eligible, f)(t) 
    IMPLIES
      the(majority?(eligible, f)) = t

  majority(eligible, f, default): T =
    IF majority_exists?(eligible, f)
    THEN the(majority?(eligible, f))
    ELSE default
    ENDIF

  validity: THEOREM
      majority_subset?(good, eligible) AND
      good_vote_for?(good, f, t) 
    IMPLIES
      the(majority?(eligible, f)) = t

  agreement_propagation: COROLLARY 
      majority_subset?(good1, eligible1) AND
      majority_subset?(good2, eligible2) AND
      good_vote_for?(good1, f1, t) AND
      good_vote_for?(good2, f2, t)
    IMPLIES
      the(majority?(eligible1, f1)) = the(majority?(eligible2, f2))

  agreement_generation: THEOREM
      eligible_symmetric?(eligible, f1, f2) 
    IMPLIES 
      majority(eligible, f1, default) = majority(eligible, f2, default)

  END majority_properties
  

$$$majority_properties.prf
(majority_properties
 (good_vote_for_majority 0
  (good_vote_for_majority-1 nil 3276595581 3287141167
   ("" (skosimp*)
    (("" (expand "majority?")
      (("" (case "subset?(good!1, votes_for(eligible!1, f!1, t!1))")
        (("1" (expand "majority_subset?")
          (("1" (flatten)
            (("1" (forward-chain "card_subset[below(N)]")
              (("1" (assert) nil nil)) nil))
            nil))
          nil)
         ("2" (expand "majority_subset?")
          (("2" (flatten)
            (("2" (hide -1 2)
              (("2" (auto-rewrite-defs)
                (("2" (assert)
                  (("2" (skosimp*)
                    (("2" (inst?)
                      (("2" (inst?)
                        (("2" (assert) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((majority? const-decl "bool" majority_properties nil)
    (member const-decl "bool" sets nil)
    (good_vote_for? const-decl "bool" good_vote_for nil)
    (majority_subset? const-decl "bool" pigeonhole nil)
    (card_subset formula-decl nil finite_sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" majority_properties nil)
    (below type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (subset? const-decl "bool" sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (T formal-nonempty-type-decl nil majority_properties nil)
    (votes_for const-decl "finite_set[below(N)]" good_vote_for nil))
   827 620 t shostak))
 (votes_for_majority_subset 0
  (votes_for_majority_subset-1 nil 3276533858 3287141167
   ("" (skosimp*)
    (("" (expand "majority_subset?")
      (("" (rewrite "votes_for_subset")
        (("" (expand "majority?") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   unchecked
   ((majority_subset? const-decl "bool" pigeonhole nil)
    (majority? const-decl "bool" majority_properties nil)
    (T formal-nonempty-type-decl nil majority_properties nil)
    (N formal-const-decl "posnat" majority_properties nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (votes_for_subset formula-decl nil good_vote_for nil))
   129 80 t shostak))
 (eligible_majority_unique 0
  (eligible_majority_unique-1 nil 3276006842 3287141167
   ("" (skosimp*)
    (("" (forward-chain "votes_for_majority_subset")
      (("" (hide -2)
        (("" (forward-chain "votes_for_majority_subset")
          (("" (hide -3)
            (("" (lemma "majority_pigeonhole")
              (("" (expand "majority_subset?")
                (("" (flatten)
                  (("" (inst?)
                    (("" (assert)
                      (("" (assert)
                        (("" (hide -2 -3)
                          (("" (inst?)
                            (("" (assert)
                              ((""
                                (skosimp*)
                                ((""
                                  (expand "votes_for")
                                  ((""
                                    (flatten)
                                    (("" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((votes_for_majority_subset formula-decl nil majority_properties
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" majority_properties nil)
    (below type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (T formal-nonempty-type-decl nil majority_properties nil)
    (majority_pigeonhole formula-decl nil pigeonhole nil)
    (votes_for const-decl "finite_set[below(N)]" good_vote_for nil)
    (majority_subset? const-decl "bool" pigeonhole nil))
   523 480 t nil))
 (majority_welldefinedness 0
  (majority_welldefinedness-1 nil 3263288842 3287141167
   ("" (skosimp*)
    (("" (expand "majority_exists?")
      (("" (skosimp*)
        (("" (expand "singleton?")
          (("" (inst?)
            (("" (skosimp* t)
              (("" (lemma "eligible_majority_unique")
                (("" (inst?)
                  (("" (assert)
                    (("" (hide -2)
                      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((majority_exists? const-decl "bool" majority_properties nil)
    (singleton? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (eligible_majority_unique formula-decl nil majority_properties nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" majority_properties nil)
    (below type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (T formal-nonempty-type-decl nil majority_properties nil)
    (majority? const-decl "bool" majority_properties nil) nil nil nil)
   122 80 t nil))
 (the_majority_unique_TCC1 0
  (the_majority_unique_TCC1-1 nil 3268079067 3287141168
   ("" (skosimp*)
    (("" (rewrite "majority_welldefinedness")
      (("" (expand "majority_exists?") (("" (inst?) nil nil)) nil))
      nil))
    nil)
   proved-incomplete
   ((majority_welldefinedness formula-decl nil majority_properties nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" majority_properties nil)
    (below type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (T formal-nonempty-type-decl nil majority_properties nil)
    (majority_exists? const-decl "bool" majority_properties nil))
   86 40 t shostak))
 (the_majority_unique 0
  (the_majority_unique-1 nil 3268078722 3287141168
   ("" (skosimp*)
    (("" (lemma "eligible_majority_unique")
      (("" (inst?)
        (("" (invoke (inst - "%1") (! 1 l))
          (("1" (assert) nil nil)
           ("2" (rewrite "majority_welldefinedness")
            (("2" (expand "majority_exists?") (("2" (inst?) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((eligible_majority_unique formula-decl nil majority_properties nil)
    (the const-decl "(p)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (majority? const-decl "bool" majority_properties nil) nil nil
    (majority_exists? const-decl "bool" majority_properties nil)
    (majority_welldefinedness formula-decl nil majority_properties nil)
    (T formal-nonempty-type-decl nil majority_properties nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" majority_properties nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   80 90 t shostak))
 (majority_TCC1 0
  (majority_TCC1-1 nil 3263288842 3287141168
   ("" (skosimp*) (("" (rewrite "majority_welldefinedness") nil nil))
    nil)
   proved-incomplete
   ((majority_welldefinedness formula-decl nil majority_properties nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" majority_properties nil)
    (below type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (T formal-nonempty-type-decl nil majority_properties nil))
   70 30 nil nil))
 (maj_is_majority 0
  (maj_is_majority-1 nil 3287142624 3287143230
   ("" (skosimp*)
    (("" (expand "majority")
      (("" (expand "maj")
        (("" (lift-if)
          (("" (lift-if)
            (("" (prop)
              (("1" (expand "majority_exists?")
                (("1" (skosimp*)
                  (("1" (hide 1)
                    (("1" (grind)
                      (("1" (expand "votes_for")
                        (("1" (expand "bag_to_set")
                          (("1" (expand "make_bag")
                            (("1" (expand "member")
                              (("1" (postpone) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "the")
                (("2" (expand "majority?")
                  (("2" (expand "maj?")
                    (("2" (hide 2)
                      (("2" (expand "make_bag")
                        (("2" (expand "votes_for")
                          (("2" (expand "member")
                            (("2" (postpone) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3" (grind)
                  (("3" (expand "votes_for")
                    (("3" (expand "bag_to_set")
                      (("3" (expand "make_bag")
                        (("3" (expand "member")
                          (("3" (postpone) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 606541 12830 t shostak))
 (validity_TCC1 0
  (validity_TCC1-1 nil 3268066163 3287141168
   ("" (skosimp*)
    (("" (rewrite "majority_welldefinedness")
      (("" (forward-chain "good_vote_for_majority")
        (("" (expand "majority_exists?") (("" (inst?) nil nil)) nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((majority_welldefinedness formula-decl nil majority_properties nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" majority_properties nil)
    (below type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (T formal-nonempty-type-decl nil majority_properties nil)
    (majority_exists? const-decl "bool" majority_properties nil)
    (good_vote_for_majority formula-decl nil majority_properties nil))
   88 60 t shostak))
 (validity 0
  (validity-1 nil 3268075968 3287141332
   ("" (skosimp*)
    (("" (rewrite "the_majority_unique")
      (("" (hide 2)
        (("" (expand "majority?")
          (("" (expand "majority_subset?")
            (("" (flatten)
              ((""
                (invoke (then (case "%1 <= %2") (assert)) (! -1 l 2)
                 (! 1 l 2))
                (("" (rewrite "card_subset[below(N)]")
                  (("" (hide -1 2 3)
                    (("" (auto-rewrite-defs)
                      (("" (assert)
                        (("" (skosimp*)
                          (("" (inst?)
                            (("" (inst?)
                              ((""
                                (assert)
                                (("" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((the_majority_unique formula-decl nil majority_properties nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" majority_properties nil)
    (below type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (T formal-nonempty-type-decl nil majority_properties nil)
    (majority? const-decl "bool" majority_properties nil)
    (card_subset formula-decl nil finite_sets nil)
    (good_vote_for? const-decl "bool" good_vote_for nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (votes_for const-decl "finite_set[below(N)]" good_vote_for nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (majority_subset? const-decl "bool" pigeonhole nil))
   140213 5550 t shostak))
 (agreement_propagation_TCC1 0
  (agreement_propagation_TCC1-2 nil 3276279918 3287141169
   ("" (skosimp*)
    (("" (hide -1 -3)
      (("" (rewrite "majority_welldefinedness")
        (("" (hide 2)
          (("" (expand "majority_exists?")
            (("" (inst?)
              (("" (forward-chain "good_vote_for_majority") nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((good_vote_for_majority formula-decl nil majority_properties nil)
    (majority_exists? const-decl "bool" majority_properties nil)
    (T formal-nonempty-type-decl nil majority_properties nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" majority_properties nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (majority_welldefinedness formula-decl nil majority_properties
     nil))
   101 70 t nil)
  (agreement_propagation_TCC1-1 nil 3268066228 3276279852
   ("" (skosimp*)
    (("" (forward-chain "good_receive_agree_on_v")
      (("" (skosimp*)
        (("" (hide -2 -3 -4)
          (("" (rewrite "majority_welldefinedness")
            (("" (expand "majority_exists?")
              (("" (inst?)
                (("" (forward-chain "good_agree_majority") nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" majority_properties nil)
    (below type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (majority_exists? const-decl "bool" majority_properties nil)
    (majority_welldefinedness formula-decl nil majority_properties
     nil))
   65 50 t shostak))
 (agreement_propagation_TCC2 0
  (agreement_propagation_TCC2-2 nil 3276279763 3287141169
   ("" (skosimp*)
    (("" (hide -2 -4)
      (("" (rewrite "majority_welldefinedness")
        (("" (forward-chain "good_vote_for_majority")
          (("" (expand "majority_exists?") (("" (inst?) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((good_vote_for_majority formula-decl nil majority_properties nil)
    (majority_exists? const-decl "bool" majority_properties nil)
    (T formal-nonempty-type-decl nil majority_properties nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" majority_properties nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (majority_welldefinedness formula-decl nil majority_properties
     nil))
   93 50 t nil)
  (agreement_propagation_TCC2-1 nil 3268066569 3276279615
   ("" (skosimp*)
    (("" (forward-chain "good_receive_agree_on_v")
      (("" (skosimp*)
        (("" (hide -1 -3 -5)
          (("" (rewrite "majority_welldefinedness")
            (("" (expand "majority_exists?")
              (("" (inst?)
                (("" (forward-chain "good_agree_majority") nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" majority_properties nil)
    (below type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (majority_exists? const-decl "bool" majority_properties nil)
    (majority_welldefinedness formula-decl nil majority_properties
     nil))
   61 40 t shostak))
 (agreement_propagation 0
  (agreement_propagation-2 nil 3276279646 3287141169
   ("" (skosimp*)
    (("" (forward-chain "validity")
      (("" (hide -2 -4)
        (("" (forward-chain "validity") (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   unchecked
   ((validity formula-decl nil majority_properties nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" majority_properties nil)
    (below type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (T formal-nonempty-type-decl nil majority_properties nil))
   85 70 t nil)
  (agreement_propagation-1 nil 3268076245 3276279615
   ("" (skosimp*)
    (("" (forward-chain "good_receive_agree_on_v")
      (("" (skosimp*)
        (("" (forward-chain "validity")
          (("" (hide -2 -4)
            (("" (forward-chain "validity") (("" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" majority_properties nil)
    (below type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (validity formula-decl nil majority_properties nil))
   47 40 t shostak))
 (agreement_generation 0
  (agreement_generation-2 "" 3276527827 3287141170
   ("" (skosimp*)
    (("" (expand "majority")
      (("" (invoke (case-replace "%1 = %2") (! 1 l 1) (! 1 r 1))
        (("1" (lift-if)
          (("1" (assert)
            (("1" (prop)
              (("1" (iff)
                (("1" (prop)
                  (("1" (hide -3)
                    (("1" (lemma "eligible_symmetric_vote_same")
                      (("1" (inst?)
                        (("1" (expand "majority_exists?")
                          (("1" (skosimp*)
                            (("1" (forward-chain "the_majority_unique")
                              (("1"
                                (forward-chain
                                 "the_majority_unique"
                                 -4)
                                (("1"
                                  (replace*)
                                  (("1"
                                    (hide -1 -2)
                                    (("1"
                                      (forward-chain
                                       "votes_for_majority_subset")
                                      (("1"
                                        (forward-chain
                                         "votes_for_majority_subset"
                                         -4)
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (replace -3 :hide? t)
                                            (("1"
                                              (hide -3 -4 -5)
                                              (("1"
                                                (expand
                                                 "majority_subset?")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (lemma
                                                     "majority_pigeonhole")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (hide
                                                             -2
                                                             -3)
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (skosimp*)
                                                                  (("1"
                                                                    (expand
                                                                     "votes_for")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (iff)
            (("2" (lemma "eligible_symmetric_vote_same")
              (("2" (inst?)
                (("2" (assert)
                  (("2" (assert)
                    (("2" (expand "majority_exists?")
                      (("2" (prop)
                        (("1" (skosimp*)
                          (("1" (inst?)
                            (("1" (inst?)
                              (("1"
                                (expand "majority?")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skosimp*)
                          (("2" (inst?)
                            (("2" (inst?)
                              (("2"
                                (expand "majority?")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((majority const-decl "T" majority_properties nil)
    (majority? const-decl "bool" majority_properties nil)
    (eligible_symmetric_vote_same formula-decl nil good_vote_for nil)
    (the_majority_unique formula-decl nil majority_properties nil)
    (votes_for_majority_subset formula-decl nil majority_properties
     nil)
    (votes_for const-decl "finite_set[below(N)]" good_vote_for nil)
    (majority_pigeonhole formula-decl nil pigeonhole nil)
    (majority_subset? const-decl "bool" pigeonhole nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" majority_properties nil)
    (below type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (T formal-nonempty-type-decl nil majority_properties nil)
    (majority_exists? const-decl "bool" majority_properties nil))
   943 880 t shostak)
  (agreement_generation-1 nil 3268076396 3276525947
   ("" (skosimp*)
    (("" (expand "majority")
      (("" (use "similar_selective_majority_exists")
        (("" (assert)
          (("" (replace*)
            (("" (replace -1 :dir rl :hide? t)
              (("" (lift-if)
                (("" (prop)
                  (("" (expand "majority_exists?")
                    (("" (skosimp*)
                      (("" (forward-chain "similar_selective_majority")
                        (("" (forward-chain "the_majority_unique")
                          (("" (forward-chain "the_majority_unique" -3)
                            (("" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((majority const-decl "T" majority_properties nil)
    (the_majority_unique formula-decl nil majority_properties nil)
    (majority_exists? const-decl "bool" majority_properties nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" majority_properties nil)
    (below type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (T formal-nonempty-type-decl nil majority_properties nil))
   237 160 t shostak)))


$$$single_stage_bag_maj.pvs
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Lee Pike 
% leepike @ galois.com
% Formal Methods Group, NASA Langley Research Center
%
% PVS Version 3.1
%
%
% Purpose                  : proves validity and agreement results
%                            of majority voting over bags after a 
%                            a single exchange of exact communication
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

single_stage_bag_maj
[
    S: posnat,            % Number of senders
    MSG: TYPE+            % Messages
] : THEORY

BEGIN

IMPORTING
  majority_properties[S,MSG],
  maj_equiv[S,MSG]

s, s1, s2 : VAR below(S)

good_senders        : VAR finite_set[below(S)]

eligible_senders,
eligible_senders1,
eligible_senders2   : VAR finite_set[below(S)]

ideal               : VAR [below(S) -> MSG]

actual, actual1, 
actual2             : VAR [below(S) -> MSG]

majority_good(good_senders, eligible_senders): bool = 
  majority_subset?(good_senders, eligible_senders)

exact_function(good_senders, ideal, actual): bool =
  FORALL s: good_senders(s) IMPLIES ideal(s) = actual(s)  

function_agreement(good_senders, ideal): bool =
  FORALL s1, s2: good_senders(s1) AND good_senders(s2) 
    IMPLIES ideal(s1) = ideal(s2)

exact_validity(eligible_senders, good_senders, ideal, actual): bool = 
  FORALL s: good_senders(s) IMPLIES
              ideal(s) = maj(make_bag(eligible_senders, actual))

exact_validity: THEOREM
    majority_good(good_senders, eligible_senders) AND
    exact_function(good_senders, ideal, actual) AND
    function_agreement(good_senders, ideal)
  IMPLIES
    exact_validity(eligible_senders, good_senders, ideal, actual)

actual_agreement(good_senders): bool = 
  FORALL s1, s2, actual1, actual2: 
    good_senders(s1) AND good_senders(s2) IMPLIES 
      actual1(s1) = actual2(s2)

exact_agreement_propagation: THEOREM
    majority_good(good_senders, eligible_senders1) AND
    majority_good(good_senders, eligible_senders2) AND
    actual_agreement(good_senders) 
  IMPLIES
    maj(make_bag(eligible_senders1, actual1)) = 
    maj(make_bag(eligible_senders2, actual2))

symmetry_agreement(eligible_senders1, eligible_senders2, actual1, actual2): bool =
  FORALL s: eligible_senders1(s) AND eligible_senders2(s) IMPLIES
              actual1(s) = actual2(s)

exact_agreement_generation: THEOREM
    eligible_senders1 = eligible_senders2 AND
    symmetry_agreement(eligible_senders1, eligible_senders2, 
                       actual1, actual2)
  IMPLIES
    maj(make_bag(eligible_senders1, actual1)) = 
    maj(make_bag(eligible_senders2, actual2))


END single_stage_bag_maj

$$$single_stage_bag_maj.prf
(single_stage_bag_maj
 (exact_validity 0
  (exact_validity-1 nil 3287833018 3287834276
   ("" (skosimp*)
    (("" (expand "exact_validity")
      (("" (skosimp*)
        (("" (use "maj_is_majority")
          (("" (replace -1 :dir rl :hide? t)
            (("" (expand "majority_good")
              (("" (expand "majority")
                (("" (lift-if)
                  (("" (split)
                    (("1" (flatten)
                      (("1" (use "validity")
                        (("1" (expand "good_vote_for?")
                          (("1" (expand "exact_function")
                            (("1" (assert)
                              (("1"
                                (skosimp*)
                                (("1"
                                  (inst - "n!1")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "function_agreement")
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (inst - "n!1")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (expand "majority_exists?")
                        (("2" (inst?)
                          (("2" (use "validity")
                            (("2" (assert)
                              (("2"
                                (split)
                                (("1"
                                  (use "good_vote_for_majority")
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (hide 2 3)
                                  (("2"
                                    (expand "good_vote_for?")
                                    (("2"
                                      (skosimp*)
                                      (("2"
                                        (expand "exact_function")
                                        (("2"
                                          (inst - "n!1")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand
                                               "function_agreement")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (inst - "n!1")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((exact_validity const-decl "bool" single_stage_bag_maj nil)
    (maj_is_majority formula-decl nil maj_equiv nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (S formal-const-decl "posnat" single_stage_bag_maj nil)
    (MSG formal-nonempty-type-decl nil single_stage_bag_maj nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (majority_good const-decl "bool" single_stage_bag_maj nil)
    (good_vote_for_majority formula-decl nil majority_properties nil)
    (majority_exists? const-decl "bool" majority_properties nil)
    (good_vote_for? const-decl "bool" good_vote_for nil)
    (function_agreement const-decl "bool" single_stage_bag_maj nil)
    (exact_function const-decl "bool" single_stage_bag_maj nil)
    (validity formula-decl nil majority_properties nil)
    (majority const-decl "T" majority_properties nil))
   1258300 36740 t shostak))
 (exact_agreement_propagation 0
  (exact_agreement_propagation-1 nil 3287834569 3287845860
   ("" (skosimp*)
    (("" (expand "majority_good")
      (("" (lemma "maj_is_majority")
        (("" (inst-cp - "actual1!1" "eligible_senders1!1")
          (("" (inst - "actual2!1" "eligible_senders2!1")
            (("" (replace - :dir rl :hide? t)
              (("" (replace - :dir rl :hide? t)
                (("" (lemma "agreement_propagation")
                  (("" (inst?)
                    (("" (use "majority_nonempty")
                      (("" (assert)
                        (("" (expand "empty?")
                          (("" (skosimp*)
                            (("" (expand "member")
                              ((""
                                (inst
                                 -
                                 "eligible_senders2!1"
                                 "actual1!1"
                                 "actual2!1"
                                 "good_senders!1"
                                 "actual1!1(x!1)")
                                ((""
                                  (assert)
                                  ((""
                                    (split)
                                    (("1"
                                      (expand "majority")
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (use
                                               "majority_welldefinedness")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand
                                                   "majority_exists?")
                                                  (("1"
                                                    (skosimp*)
                                                    (("1"
                                                      (inst + "t!1")
                                                      (("1"
                                                        (lemma
                                                         "the_majority_unique")
                                                        (("1"
                                                          (inst
                                                           -
                                                           _
                                                           _
                                                           "t!1")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (use
                                               "majority_welldefinedness")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand
                                                   "majority_exists?")
                                                  (("2"
                                                    (skosimp*)
                                                    (("2"
                                                      (inst + "t!1")
                                                      (("2"
                                                        (lemma
                                                         "the_majority_unique")
                                                        (("2"
                                                          (inst
                                                           -
                                                           _
                                                           _
                                                           "t!1")
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "good_vote_for?")
                                      (("2"
                                        (skosimp*)
                                        (("2"
                                          (expand "actual_agreement")
                                          (("2"
                                            (inst?)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (expand "good_vote_for?")
                                      (("3"
                                        (skosimp*)
                                        (("3"
                                          (expand "actual_agreement")
                                          (("3"
                                            (inst?)
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((majority_good const-decl "bool" single_stage_bag_maj nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (agreement_propagation formula-decl nil majority_properties nil)
    (majority_nonempty formula-decl nil pigeonhole nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (good_vote_for? const-decl "bool" good_vote_for nil)
    (actual_agreement const-decl "bool" single_stage_bag_maj nil)
    (majority const-decl "T" majority_properties nil)
    (majority_welldefinedness formula-decl nil majority_properties nil)
    (majority_exists? const-decl "bool" majority_properties nil)
    (the_majority_unique formula-decl nil majority_properties nil)
    (maj_is_majority formula-decl nil maj_equiv nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (S formal-const-decl "posnat" single_stage_bag_maj nil)
    (MSG formal-nonempty-type-decl nil single_stage_bag_maj nil))
   2361894 45290 t shostak))
 (exact_agreement_generation 0
  (exact_agreement_generation-1 nil 3287846563 3287846705
   ("" (skosimp*)
    (("" (lemma "maj_is_majority")
      (("" (inst-cp - "actual1!1" "eligible_senders1!1")
        (("" (inst - "actual2!1" "eligible_senders2!1")
          (("" (replace - :dir rl :hide? t)
            (("" (replace - :dir rl :hide? t)
              (("" (lemma "agreement_generation")
                (("" (inst?)
                  (("" (inst - "actual2!1")
                    (("" (split)
                      (("1" (assert) nil nil)
                       ("2" (expand "eligible_symmetric?")
                        (("2" (skosimp*)
                          (("2" (expand "symmetry_agreement")
                            (("2" (inst?) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((MSG formal-nonempty-type-decl nil single_stage_bag_maj nil)
    (S formal-const-decl "posnat" single_stage_bag_maj nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (maj_is_majority formula-decl nil maj_equiv nil)
    (no_majority const-decl "T" majority_vote "bags/")
    (symmetry_agreement const-decl "bool" single_stage_bag_maj nil)
    (eligible_symmetric? const-decl "bool" good_vote_for nil)
    (agreement_generation formula-decl nil majority_properties nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   141739 9080 t shostak)))


$$$ABSTRACT_MSG_adt.pvs
%%% ADT file generated from abstract_msg

ABSTRACT_MSG_adt[MSG: TYPE+]: THEORY
 BEGIN
  ASSUMING
   MSG_TCC1: ASSUMPTION EXISTS (x: MSG): TRUE;
  ENDASSUMING

  ABSTRACT_MSG: TYPE

  benign_msg?, accepted_msg?: [ABSTRACT_MSG -> boolean]

  benign_msg: (benign_msg?)

  accepted_msg: [MSG -> (accepted_msg?)]

  m: [(accepted_msg?) -> MSG]

  ABSTRACT_MSG_ord: [ABSTRACT_MSG -> upto(1)]

  ABSTRACT_MSG_ord_defaxiom: AXIOM
    ABSTRACT_MSG_ord(benign_msg) = 0 AND
     (FORALL (m: MSG): ABSTRACT_MSG_ord(accepted_msg(m)) = 1);

  ord(x: ABSTRACT_MSG): upto(1) =
      CASES x OF benign_msg: 0, accepted_msg(accepted_msg1_var): 1 ENDCASES

  ABSTRACT_MSG_benign_msg_extensionality: AXIOM
    FORALL (benign_msg?_var: (benign_msg?),
            benign_msg?_var2: (benign_msg?)):
      benign_msg?_var = benign_msg?_var2;

  ABSTRACT_MSG_accepted_msg_extensionality: AXIOM
    FORALL (accepted_msg?_var: (accepted_msg?),
            accepted_msg?_var2: (accepted_msg?)):
      m(accepted_msg?_var) = m(accepted_msg?_var2) IMPLIES
       accepted_msg?_var = accepted_msg?_var2;

  ABSTRACT_MSG_accepted_msg_eta: AXIOM
    FORALL (accepted_msg?_var: (accepted_msg?)):
      accepted_msg(m(accepted_msg?_var)) = accepted_msg?_var;

  ABSTRACT_MSG_m_accepted_msg: AXIOM
    FORALL (accepted_msg1_var: MSG):
      m(accepted_msg(accepted_msg1_var)) = accepted_msg1_var;

  ABSTRACT_MSG_inclusive: AXIOM
    FORALL (ABSTRACT_MSG_var: ABSTRACT_MSG):
      benign_msg?(ABSTRACT_MSG_var) OR accepted_msg?(ABSTRACT_MSG_var);

  ABSTRACT_MSG_induction: AXIOM
    FORALL (p: [ABSTRACT_MSG -> boolean]):
      (p(benign_msg) AND
        (FORALL (accepted_msg1_var: MSG):
           p(accepted_msg(accepted_msg1_var))))
       IMPLIES
       (FORALL (ABSTRACT_MSG_var: ABSTRACT_MSG): p(ABSTRACT_MSG_var));

  every(p: PRED[MSG])(a: ABSTRACT_MSG):  boolean =
      CASES a
        OF benign_msg: TRUE,
           accepted_msg(accepted_msg1_var): p(accepted_msg1_var)
        ENDCASES;

  every(p: PRED[MSG], a: ABSTRACT_MSG):  boolean =
      CASES a
        OF benign_msg: TRUE,
           accepted_msg(accepted_msg1_var): p(accepted_msg1_var)
        ENDCASES;

  some(p: PRED[MSG])(a: ABSTRACT_MSG):  boolean =
      CASES a
        OF benign_msg: FALSE,
           accepted_msg(accepted_msg1_var): p(accepted_msg1_var)
        ENDCASES;

  some(p: PRED[MSG], a: ABSTRACT_MSG):  boolean =
      CASES a
        OF benign_msg: FALSE,
           accepted_msg(accepted_msg1_var): p(accepted_msg1_var)
        ENDCASES;

  subterm(x, y: ABSTRACT_MSG):  boolean = x = y;

  <<:  (well_founded?[ABSTRACT_MSG]) = LAMBDA (x, y: ABSTRACT_MSG): FALSE;

  ABSTRACT_MSG_well_founded: AXIOM well_founded?[ABSTRACT_MSG](<<);

  reduce_nat(benign_msg?_fun: nat, accepted_msg?_fun: [MSG -> nat]):
  [ABSTRACT_MSG -> nat] =
      LAMBDA (ABSTRACT_MSG_adtvar: ABSTRACT_MSG):
        LET red: [ABSTRACT_MSG -> nat] =
              reduce_nat(benign_msg?_fun, accepted_msg?_fun)
          IN
          CASES ABSTRACT_MSG_adtvar
            OF benign_msg: benign_msg?_fun,
               accepted_msg(accepted_msg1_var):
                 accepted_msg?_fun(accepted_msg1_var)
            ENDCASES;

  REDUCE_nat(benign_msg?_fun: [ABSTRACT_MSG -> nat],
             accepted_msg?_fun: [[MSG, ABSTRACT_MSG] -> nat]):
   [ABSTRACT_MSG -> nat] =
      LAMBDA (ABSTRACT_MSG_adtvar: ABSTRACT_MSG):
        LET red: [ABSTRACT_MSG -> nat] =
              REDUCE_nat(benign_msg?_fun, accepted_msg?_fun)
          IN
          CASES ABSTRACT_MSG_adtvar
            OF benign_msg: benign_msg?_fun(ABSTRACT_MSG_adtvar),
               accepted_msg(accepted_msg1_var):
                 accepted_msg?_fun(accepted_msg1_var, ABSTRACT_MSG_adtvar)
            ENDCASES;

  reduce_ordinal(benign_msg?_fun: ordinal,
                 accepted_msg?_fun: [MSG -> ordinal]):
   [ABSTRACT_MSG -> ordinal] =
      LAMBDA (ABSTRACT_MSG_adtvar: ABSTRACT_MSG):
        LET red: [ABSTRACT_MSG -> ordinal] =
              reduce_ordinal(benign_msg?_fun, accepted_msg?_fun)
          IN
          CASES ABSTRACT_MSG_adtvar
            OF benign_msg: benign_msg?_fun,
               accepted_msg(accepted_msg1_var):
                 accepted_msg?_fun(accepted_msg1_var)
            ENDCASES;

  REDUCE_ordinal(benign_msg?_fun: [ABSTRACT_MSG -> ordinal],
                 accepted_msg?_fun: [[MSG, ABSTRACT_MSG] -> ordinal]):
   [ABSTRACT_MSG -> ordinal] =
      LAMBDA (ABSTRACT_MSG_adtvar: ABSTRACT_MSG):
        LET red: [ABSTRACT_MSG -> ordinal] =
              REDUCE_ordinal(benign_msg?_fun, accepted_msg?_fun)
          IN
          CASES ABSTRACT_MSG_adtvar
            OF benign_msg: benign_msg?_fun(ABSTRACT_MSG_adtvar),
               accepted_msg(accepted_msg1_var):
                 accepted_msg?_fun(accepted_msg1_var, ABSTRACT_MSG_adtvar)
            ENDCASES;
 END ABSTRACT_MSG_adt

ABSTRACT_MSG_adt_map[MSG: TYPE+, MSG1: TYPE+]: THEORY
 BEGIN
  ASSUMING
   MSG_TCC1: ASSUMPTION EXISTS (x: MSG): TRUE;

   MSG1_TCC1: ASSUMPTION EXISTS (x: MSG1): TRUE;
  ENDASSUMING

  IMPORTING ABSTRACT_MSG_adt

  map(f: [MSG -> MSG1])(a: ABSTRACT_MSG[MSG]):  ABSTRACT_MSG[MSG1] =
      CASES a
        OF benign_msg: benign_msg,
           accepted_msg(accepted_msg1_var):
             accepted_msg(f(accepted_msg1_var))
        ENDCASES;

  map(f: [MSG -> MSG1], a: ABSTRACT_MSG[MSG]):  ABSTRACT_MSG[MSG1] =
      CASES a
        OF benign_msg: benign_msg,
           accepted_msg(accepted_msg1_var):
             accepted_msg(f(accepted_msg1_var))
        ENDCASES;

  every(R: [[MSG, MSG1] -> boolean])
       (x: ABSTRACT_MSG[MSG], y: ABSTRACT_MSG[MSG1]):
   boolean =
      benign_msg?(x) AND benign_msg?(y) OR
       accepted_msg?(x) AND accepted_msg?(y) AND R(m(x), m(y));
 END ABSTRACT_MSG_adt_map

ABSTRACT_MSG_adt_reduce[MSG: TYPE+, range: TYPE]: THEORY
 BEGIN
  ASSUMING
   MSG_TCC1: ASSUMPTION EXISTS (x: MSG): TRUE;
  ENDASSUMING

  IMPORTING ABSTRACT_MSG_adt[MSG]

  reduce(benign_msg?_fun: range, accepted_msg?_fun: [MSG -> range]):
  [ABSTRACT_MSG -> range] =
      LAMBDA (ABSTRACT_MSG_adtvar: ABSTRACT_MSG):
        LET red: [ABSTRACT_MSG -> range] =
              reduce(benign_msg?_fun, accepted_msg?_fun)
          IN
          CASES ABSTRACT_MSG_adtvar
            OF benign_msg: benign_msg?_fun,
               accepted_msg(accepted_msg1_var):
                 accepted_msg?_fun(accepted_msg1_var)
            ENDCASES;

  REDUCE(benign_msg?_fun: [ABSTRACT_MSG -> range],
         accepted_msg?_fun: [[MSG, ABSTRACT_MSG] -> range]):
   [ABSTRACT_MSG -> range] =
      LAMBDA (ABSTRACT_MSG_adtvar: ABSTRACT_MSG):
        LET red: [ABSTRACT_MSG -> range] =
              REDUCE(benign_msg?_fun, accepted_msg?_fun)
          IN
          CASES ABSTRACT_MSG_adtvar
            OF benign_msg: benign_msg?_fun(ABSTRACT_MSG_adtvar),
               accepted_msg(accepted_msg1_var):
                 accepted_msg?_fun(accepted_msg1_var, ABSTRACT_MSG_adtvar)
            ENDCASES;
 END ABSTRACT_MSG_adt_reduce
$$$abstract_msg.pvs
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% SPIDER Research Group 
% <http://shemesh.larc.nasa.gov/fm/spider/fm-now-spider.html>
%
% PVS          : Version 3.1
%
% Abstract message datatype
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

ABSTRACT_MSG[MSG: NONEMPTY_TYPE]: DATATYPE
  BEGIN
    benign_msg           : benign_msg?
    accepted_msg(m: MSG) : accepted_msg?
  END ABSTRACT_MSG



$$$send.pvs
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% SPIDER Research Group 
% <http://shemesh.larc.nasa.gov/fm/spider/fm-now-spider.html>
%
% PVS          : Version 3.1
%
% Send function abstraction
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

send
[
   S   : posnat,                        % number of sources
   R   : posnat,                        % number of receivers
   MSG : NONEMPTY_TYPE                 
]: THEORY

  BEGIN
  
  IMPORTING 
    ABSTRACT_MSG[MSG]

  fault_classification: TYPE = {good, ben, sym, asym}

  s: VAR below(S)
  r, r1, r2   : VAR below(R)

  msg: VAR ABSTRACT_MSG[MSG]
  msg_map: VAR [below(S) -> ABSTRACT_MSG[MSG]]

  sender_status: VAR [below(S) -> fault_classification]

  sym_send(msg, s): ABSTRACT_MSG[MSG]
  asym_send(msg, s, r): ABSTRACT_MSG[MSG] 

  send(msg_map, sender_status, s, r): ABSTRACT_MSG[MSG] =
    CASES sender_status(s) OF
      good : msg_map(s),
      ben  : benign_msg,
      sym  : sym_send(msg_map(s), s),
      asym : asym_send(msg_map(s), s, r) 
    ENDCASES

  good_send: LEMMA
      good?(sender_status(s)) 
    IMPLIES 
      send(msg_map, sender_status, s, r) = msg_map(s)

  not_asymmetric_send: LEMMA
      NOT asym?(sender_status(s)) 
    IMPLIES
      send(msg_map, sender_status, s, r1) = send(msg_map, sender_status, s, r2)

  benign_send: LEMMA
      ben?(sender_status(s))
    IMPLIES
      send(msg_map, sender_status, s, r) = benign_msg

END send

$$$send.prf
(send
 (good_send 0
  (good_send-1 nil 3293784292 3293784394 ("" (grind) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (R formal-const-decl "posnat" send nil)
    (below type-eq-decl nil naturalnumbers nil)
    (S formal-const-decl "posnat" send nil)
    (send const-decl "ABSTRACT_MSG[MSG]" send nil))
   13754 1330 t shostak))
 (not_asymmetric_send 0
  (not_asymmetric_send-1 nil 3293784459 3293784462 ("" (grind) nil nil)
   proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (R formal-const-decl "posnat" send nil)
    (below type-eq-decl nil naturalnumbers nil)
    (S formal-const-decl "posnat" send nil)
    (send const-decl "ABSTRACT_MSG[MSG]" send nil))
   3635 370 t shostak))
 (benign_send 0
  (benign_send-1 nil 3293784466 3293784472 ("" (grind) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (R formal-const-decl "posnat" send nil)
    (below type-eq-decl nil naturalnumbers nil)
    (S formal-const-decl "posnat" send nil)
    (send const-decl "ABSTRACT_MSG[MSG]" send nil))
   6248 330 t shostak)))

